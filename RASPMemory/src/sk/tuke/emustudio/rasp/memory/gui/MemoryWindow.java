/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.tuke.emustudio.rasp.memory.gui;

import emulib.plugins.memory.Memory;
import sk.tuke.emustudio.rasp.memory.MemoryItem;
import sk.tuke.emustudio.rasp.memory.NumberMemoryItemImpl;
import sk.tuke.emustudio.rasp.memory.OperandType;
import sk.tuke.emustudio.rasp.memory.RASPInstruction;
import sk.tuke.emustudio.rasp.memory.RASPInstructionImpl;
import sk.tuke.emustudio.rasp.memory.impl.RASPMemoryContextImpl;

/**
 * GUI window representing memory.
 *
 * @author miso
 */
public class MemoryWindow extends javax.swing.JFrame {

    private RASPMemoryContextImpl memory;
    private final RASPTableModel tableModel;

    /**
     * Creates new form MemoryWindow
     *
     * @param context the memory context
     */
    public MemoryWindow(RASPMemoryContextImpl context) {
        this.memory = context;
        initComponents();
        tableModel = new RASPTableModel(memory);
        memoryTable.setModel(tableModel);
        updateTable();
        memory.addMemoryListener(new Memory.MemoryListener() {

            @Override
            public void memoryChanged(int i) {
                updateTable();
            }

            @Override
            public void memorySizeChanged() {
                updateTable();
            }
        });
    }

    /**
     * Update the table.
     */
    public final void updateTable() {
        tableModel.fireTableDataChanged();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        memoryTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RASP Memory");

        memoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "Cell value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(memoryTable);
        if (memoryTable.getColumnModel().getColumnCount() > 0) {
            memoryTable.getColumnModel().getColumn(0).setResizable(false);
            memoryTable.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
////        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
////         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
////         */
////        try {
////            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
////                if ("Nimbus".equals(info.getName())) {
////                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
////                    break;
////                }
////            }
////        } catch (ClassNotFoundException ex) {
////            java.util.logging.Logger.getLogger(MemoryWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        } catch (InstantiationException ex) {
////            java.util.logging.Logger.getLogger(MemoryWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        } catch (IllegalAccessException ex) {
////            java.util.logging.Logger.getLogger(MemoryWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
////            java.util.logging.Logger.getLogger(MemoryWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        }
////        //</editor-fold>

        /**
         * Testing method to test loading example program to memory, here is the
         * example program: READ 1 LOAD =1 STORE 2 LOAD 1 SUB =1 JGTZ OK JMP
         * FINISH OK: LOAD 2 MUL 1 STORE 2 LOAD 1 SUB =1 STORE 1 SUB =1 JGTZ OK
         * JMP FINISH FINISH: WRITE 2 HALT
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RASPMemoryContextImpl memory = new RASPMemoryContextImpl();

                memory.setProgramStart(5);

                memory.addLabel(19, "OK");
                memory.addLabel(37, "FINISH");

                MemoryItem[] memoryItems = new MemoryItem[]{
                    new RASPInstructionImpl(RASPInstruction.READ, OperandType.REGISTER),
                    new NumberMemoryItemImpl(1),
                    new RASPInstructionImpl(RASPInstruction.LOAD, OperandType.CONSTANT),
                    new NumberMemoryItemImpl(1),
                    new RASPInstructionImpl(RASPInstruction.STORE, OperandType.REGISTER),
                    new NumberMemoryItemImpl(2),
                    new RASPInstructionImpl(RASPInstruction.LOAD, OperandType.REGISTER),
                    new NumberMemoryItemImpl(1),
                    new RASPInstructionImpl(RASPInstruction.SUB, OperandType.CONSTANT),
                    new NumberMemoryItemImpl(1),
                    new RASPInstructionImpl(RASPInstruction.JGTZ, OperandType.REGISTER),
                    new NumberMemoryItemImpl(19),
                    new RASPInstructionImpl(RASPInstruction.JMP, OperandType.REGISTER),
                    new NumberMemoryItemImpl(37),
                    new RASPInstructionImpl(RASPInstruction.LOAD, OperandType.REGISTER),
                    new NumberMemoryItemImpl(2),
                    new RASPInstructionImpl(RASPInstruction.MUL, OperandType.REGISTER),
                    new NumberMemoryItemImpl(2),
                    new RASPInstructionImpl(RASPInstruction.STORE, OperandType.REGISTER),
                    new NumberMemoryItemImpl(2),
                    new RASPInstructionImpl(RASPInstruction.LOAD, OperandType.REGISTER),
                    new NumberMemoryItemImpl(1),
                    new RASPInstructionImpl(RASPInstruction.SUB, OperandType.CONSTANT),
                    new NumberMemoryItemImpl(1),
                    new RASPInstructionImpl(RASPInstruction.STORE, OperandType.REGISTER),
                    new NumberMemoryItemImpl(1),
                    new RASPInstructionImpl(RASPInstruction.SUB, OperandType.CONSTANT),
                    new NumberMemoryItemImpl(1),
                    new RASPInstructionImpl(RASPInstruction.JGTZ, OperandType.REGISTER),
                    new NumberMemoryItemImpl(19),
                    new RASPInstructionImpl(RASPInstruction.JMP, OperandType.REGISTER),
                    new NumberMemoryItemImpl(37),
                    new RASPInstructionImpl(RASPInstruction.WRITE, OperandType.REGISTER),
                    new NumberMemoryItemImpl(2),
                    new RASPInstructionImpl(RASPInstruction.HALT, OperandType.REGISTER),
                    new NumberMemoryItemImpl(0)
                };

                int programStart = memory.getProgramStart();

                //write null to pre-program area
                for (int i = 0; i < programStart; i++) {
                    memory.write(i, null);
                }

                int positionAtProgram = 0;
                for (int i = programStart; i < programStart + memoryItems.length; i++) {
                    memory.write(i, memoryItems[positionAtProgram++]);
                }

                new MemoryWindow(memory).setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable memoryTable;
    // End of variables declaration//GEN-END:variables
}
