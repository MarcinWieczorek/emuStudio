Opening files...
Parsing specification from standard input...
Checking specification...
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]HALT [3]INC [4]DEC 
[5]INCV [6]DECV [7]PRINT [8]LOAD [9]LOOP 
[10]ENDL [11]EOL [12]NUMBER [13]TCOMMENT 

===== Non terminals =====
[0]Program [1]Row [2]Statement [3]Comment [4]NumberOpt 


===== Productions =====
[0] $START ::= Program EOF 
[1] Program ::= Row 
[2] Program ::= Program EOL Row 
[3] Row ::= Statement Comment 
[4] Row ::= Comment 
[5] Comment ::= TCOMMENT 
[6] Comment ::= 
[7] Statement ::= INC NumberOpt 
[8] Statement ::= DEC NumberOpt 
[9] Statement ::= INCV NumberOpt 
[10] Statement ::= DECV NumberOpt 
[11] Statement ::= PRINT NumberOpt 
[12] Statement ::= LOAD NumberOpt 
[13] Statement ::= LOOP 
[14] Statement ::= ENDL 
[15] Statement ::= HALT 
[16] NumberOpt ::= NUMBER 
[17] NumberOpt ::= 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Statement ::= (*) ENDL , {EOF EOL TCOMMENT }]
  [Statement ::= (*) PRINT NumberOpt , {EOF EOL TCOMMENT }]
  [Statement ::= (*) DEC NumberOpt , {EOF EOL TCOMMENT }]
  [Comment ::= (*) TCOMMENT , {EOF EOL }]
  [Program ::= (*) Program EOL Row , {EOF EOL }]
  [Statement ::= (*) LOOP , {EOF EOL TCOMMENT }]
  [Statement ::= (*) DECV NumberOpt , {EOF EOL TCOMMENT }]
  [Statement ::= (*) INC NumberOpt , {EOF EOL TCOMMENT }]
  [Row ::= (*) Comment , {EOF EOL }]
  [Program ::= (*) Row , {EOF EOL }]
  [Statement ::= (*) HALT , {EOF EOL TCOMMENT }]
  [Statement ::= (*) LOAD NumberOpt , {EOF EOL TCOMMENT }]
  [Statement ::= (*) INCV NumberOpt , {EOF EOL TCOMMENT }]
  [Comment ::= (*) , {EOF EOL }]
  [Row ::= (*) Statement Comment , {EOF EOL }]
  [$START ::= (*) Program EOF , {EOF }]
}
transition on ENDL to state [14]
transition on DEC to state [13]
transition on INCV to state [12]
transition on INC to state [11]
transition on TCOMMENT to state [10]
transition on LOAD to state [9]
transition on PRINT to state [8]
transition on Statement to state [7]
transition on LOOP to state [6]
transition on HALT to state [5]
transition on DECV to state [4]
transition on Comment to state [3]
transition on Program to state [2]
transition on Row to state [1]

-------------------
lalr_state [1]: {
  [Program ::= Row (*) , {EOF EOL }]
}

-------------------
lalr_state [2]: {
  [Program ::= Program (*) EOL Row , {EOF EOL }]
  [$START ::= Program (*) EOF , {EOF }]
}
transition on EOF to state [24]
transition on EOL to state [23]

-------------------
lalr_state [3]: {
  [Row ::= Comment (*) , {EOF EOL }]
}

-------------------
lalr_state [4]: {
  [NumberOpt ::= (*) NUMBER , {EOF EOL TCOMMENT }]
  [Statement ::= DECV (*) NumberOpt , {EOF EOL TCOMMENT }]
  [NumberOpt ::= (*) , {EOF EOL TCOMMENT }]
}
transition on NUMBER to state [16]
transition on NumberOpt to state [22]

-------------------
lalr_state [5]: {
  [Statement ::= HALT (*) , {EOF EOL TCOMMENT }]
}

-------------------
lalr_state [6]: {
  [Statement ::= LOOP (*) , {EOF EOL TCOMMENT }]
}

-------------------
lalr_state [7]: {
  [Comment ::= (*) TCOMMENT , {EOF EOL }]
  [Comment ::= (*) , {EOF EOL }]
  [Row ::= Statement (*) Comment , {EOF EOL }]
}
transition on Comment to state [21]
transition on TCOMMENT to state [10]

-------------------
lalr_state [8]: {
  [NumberOpt ::= (*) NUMBER , {EOF EOL TCOMMENT }]
  [NumberOpt ::= (*) , {EOF EOL TCOMMENT }]
  [Statement ::= PRINT (*) NumberOpt , {EOF EOL TCOMMENT }]
}
transition on NUMBER to state [16]
transition on NumberOpt to state [20]

-------------------
lalr_state [9]: {
  [NumberOpt ::= (*) NUMBER , {EOF EOL TCOMMENT }]
  [Statement ::= LOAD (*) NumberOpt , {EOF EOL TCOMMENT }]
  [NumberOpt ::= (*) , {EOF EOL TCOMMENT }]
}
transition on NUMBER to state [16]
transition on NumberOpt to state [19]

-------------------
lalr_state [10]: {
  [Comment ::= TCOMMENT (*) , {EOF EOL }]
}

-------------------
lalr_state [11]: {
  [NumberOpt ::= (*) NUMBER , {EOF EOL TCOMMENT }]
  [Statement ::= INC (*) NumberOpt , {EOF EOL TCOMMENT }]
  [NumberOpt ::= (*) , {EOF EOL TCOMMENT }]
}
transition on NUMBER to state [16]
transition on NumberOpt to state [18]

-------------------
lalr_state [12]: {
  [NumberOpt ::= (*) NUMBER , {EOF EOL TCOMMENT }]
  [Statement ::= INCV (*) NumberOpt , {EOF EOL TCOMMENT }]
  [NumberOpt ::= (*) , {EOF EOL TCOMMENT }]
}
transition on NUMBER to state [16]
transition on NumberOpt to state [17]

-------------------
lalr_state [13]: {
  [NumberOpt ::= (*) NUMBER , {EOF EOL TCOMMENT }]
  [NumberOpt ::= (*) , {EOF EOL TCOMMENT }]
  [Statement ::= DEC (*) NumberOpt , {EOF EOL TCOMMENT }]
}
transition on NUMBER to state [16]
transition on NumberOpt to state [15]

-------------------
lalr_state [14]: {
  [Statement ::= ENDL (*) , {EOF EOL TCOMMENT }]
}

-------------------
lalr_state [15]: {
  [Statement ::= DEC NumberOpt (*) , {EOF EOL TCOMMENT }]
}

-------------------
lalr_state [16]: {
  [NumberOpt ::= NUMBER (*) , {EOF EOL TCOMMENT }]
}

-------------------
lalr_state [17]: {
  [Statement ::= INCV NumberOpt (*) , {EOF EOL TCOMMENT }]
}

-------------------
lalr_state [18]: {
  [Statement ::= INC NumberOpt (*) , {EOF EOL TCOMMENT }]
}

-------------------
lalr_state [19]: {
  [Statement ::= LOAD NumberOpt (*) , {EOF EOL TCOMMENT }]
}

-------------------
lalr_state [20]: {
  [Statement ::= PRINT NumberOpt (*) , {EOF EOL TCOMMENT }]
}

-------------------
lalr_state [21]: {
  [Row ::= Statement Comment (*) , {EOF EOL }]
}

-------------------
lalr_state [22]: {
  [Statement ::= DECV NumberOpt (*) , {EOF EOL TCOMMENT }]
}

-------------------
lalr_state [23]: {
  [Statement ::= (*) ENDL , {EOF EOL TCOMMENT }]
  [Statement ::= (*) PRINT NumberOpt , {EOF EOL TCOMMENT }]
  [Statement ::= (*) DEC NumberOpt , {EOF EOL TCOMMENT }]
  [Program ::= Program EOL (*) Row , {EOF EOL }]
  [Comment ::= (*) TCOMMENT , {EOF EOL }]
  [Statement ::= (*) LOOP , {EOF EOL TCOMMENT }]
  [Statement ::= (*) DECV NumberOpt , {EOF EOL TCOMMENT }]
  [Statement ::= (*) INC NumberOpt , {EOF EOL TCOMMENT }]
  [Row ::= (*) Comment , {EOF EOL }]
  [Statement ::= (*) HALT , {EOF EOL TCOMMENT }]
  [Statement ::= (*) LOAD NumberOpt , {EOF EOL TCOMMENT }]
  [Statement ::= (*) INCV NumberOpt , {EOF EOL TCOMMENT }]
  [Comment ::= (*) , {EOF EOL }]
  [Row ::= (*) Statement Comment , {EOF EOL }]
}
transition on ENDL to state [14]
transition on DEC to state [13]
transition on INCV to state [12]
transition on INC to state [11]
transition on TCOMMENT to state [10]
transition on LOAD to state [9]
transition on PRINT to state [8]
transition on Statement to state [7]
transition on LOOP to state [6]
transition on HALT to state [5]
transition on DECV to state [4]
transition on Comment to state [3]
transition on Row to state [25]

-------------------
lalr_state [24]: {
  [$START ::= Program EOF (*) , {EOF }]
}

-------------------
lalr_state [25]: {
  [Program ::= Program EOL Row (*) , {EOF EOL }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 0:REDUCE(with prod 6)] [term 2:SHIFT(to state 5)]
 [term 3:SHIFT(to state 11)] [term 4:SHIFT(to state 13)]
 [term 5:SHIFT(to state 12)] [term 6:SHIFT(to state 4)]
 [term 7:SHIFT(to state 8)] [term 8:SHIFT(to state 9)]
 [term 9:SHIFT(to state 6)] [term 10:SHIFT(to state 14)]
 [term 11:REDUCE(with prod 6)] [term 13:SHIFT(to state 10)]
From state #1
 [term 0:REDUCE(with prod 1)] [term 11:REDUCE(with prod 1)]
From state #2
 [term 0:SHIFT(to state 24)] [term 11:SHIFT(to state 23)]
From state #3
 [term 0:REDUCE(with prod 4)] [term 11:REDUCE(with prod 4)]
From state #4
 [term 0:REDUCE(with prod 17)] [term 11:REDUCE(with prod 17)]
 [term 12:SHIFT(to state 16)] [term 13:REDUCE(with prod 17)]
From state #5
 [term 0:REDUCE(with prod 15)] [term 11:REDUCE(with prod 15)]
 [term 13:REDUCE(with prod 15)]
From state #6
 [term 0:REDUCE(with prod 13)] [term 11:REDUCE(with prod 13)]
 [term 13:REDUCE(with prod 13)]
From state #7
 [term 0:REDUCE(with prod 6)] [term 11:REDUCE(with prod 6)]
 [term 13:SHIFT(to state 10)]
From state #8
 [term 0:REDUCE(with prod 17)] [term 11:REDUCE(with prod 17)]
 [term 12:SHIFT(to state 16)] [term 13:REDUCE(with prod 17)]
From state #9
 [term 0:REDUCE(with prod 17)] [term 11:REDUCE(with prod 17)]
 [term 12:SHIFT(to state 16)] [term 13:REDUCE(with prod 17)]
From state #10
 [term 0:REDUCE(with prod 5)] [term 11:REDUCE(with prod 5)]
From state #11
 [term 0:REDUCE(with prod 17)] [term 11:REDUCE(with prod 17)]
 [term 12:SHIFT(to state 16)] [term 13:REDUCE(with prod 17)]
From state #12
 [term 0:REDUCE(with prod 17)] [term 11:REDUCE(with prod 17)]
 [term 12:SHIFT(to state 16)] [term 13:REDUCE(with prod 17)]
From state #13
 [term 0:REDUCE(with prod 17)] [term 11:REDUCE(with prod 17)]
 [term 12:SHIFT(to state 16)] [term 13:REDUCE(with prod 17)]
From state #14
 [term 0:REDUCE(with prod 14)] [term 11:REDUCE(with prod 14)]
 [term 13:REDUCE(with prod 14)]
From state #15
 [term 0:REDUCE(with prod 8)] [term 11:REDUCE(with prod 8)]
 [term 13:REDUCE(with prod 8)]
From state #16
 [term 0:REDUCE(with prod 16)] [term 11:REDUCE(with prod 16)]
 [term 13:REDUCE(with prod 16)]
From state #17
 [term 0:REDUCE(with prod 9)] [term 11:REDUCE(with prod 9)]
 [term 13:REDUCE(with prod 9)]
From state #18
 [term 0:REDUCE(with prod 7)] [term 11:REDUCE(with prod 7)]
 [term 13:REDUCE(with prod 7)]
From state #19
 [term 0:REDUCE(with prod 12)] [term 11:REDUCE(with prod 12)]
 [term 13:REDUCE(with prod 12)]
From state #20
 [term 0:REDUCE(with prod 11)] [term 11:REDUCE(with prod 11)]
 [term 13:REDUCE(with prod 11)]
From state #21
 [term 0:REDUCE(with prod 3)] [term 11:REDUCE(with prod 3)]
From state #22
 [term 0:REDUCE(with prod 10)] [term 11:REDUCE(with prod 10)]
 [term 13:REDUCE(with prod 10)]
From state #23
 [term 0:REDUCE(with prod 6)] [term 2:SHIFT(to state 5)]
 [term 3:SHIFT(to state 11)] [term 4:SHIFT(to state 13)]
 [term 5:SHIFT(to state 12)] [term 6:SHIFT(to state 4)]
 [term 7:SHIFT(to state 8)] [term 8:SHIFT(to state 9)]
 [term 9:SHIFT(to state 6)] [term 10:SHIFT(to state 14)]
 [term 11:REDUCE(with prod 6)] [term 13:SHIFT(to state 10)]
From state #24
 [term 0:REDUCE(with prod 0)]
From state #25
 [term 0:REDUCE(with prod 2)] [term 11:REDUCE(with prod 2)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 2] [non term 1->state 1] [non term 2->state 7]
 [non term 3->state 3]
From state #1
From state #2
From state #3
From state #4
 [non term 4->state 22]
From state #5
From state #6
From state #7
 [non term 3->state 21]
From state #8
 [non term 4->state 20]
From state #9
 [non term 4->state 19]
From state #10
From state #11
 [non term 4->state 18]
From state #12
 [non term 4->state 17]
From state #13
 [non term 4->state 15]
From state #14
From state #15
From state #16
From state #17
From state #18
From state #19
From state #20
From state #21
From state #22
From state #23
 [non term 1->state 25] [non term 2->state 7] [non term 3->state 3]
From state #24
From state #25
-----------------------------
Closing files...
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  0 errors and 0 warnings
  14 terminals, 5 non-terminals, and 18 productions declared, 
  producing 26 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "BDParser.java", and "symBD.java".
---------------------------------------------------- (v0.11a beta 20060608)
