
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 31 11:57:51 CET 2007
//----------------------------------------------------

package compiler8080;

import java_cup.runtime.*;
import compiler.*;
import tree8080Abstract.*;
import tree8080.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 31 11:57:51 CET 2007
  */
public class parser8080 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser8080() {super();}

  /** Constructor which sets the default scanner. */
  public parser8080(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser8080(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\004\000\002\003\005\000\002\004\003" +
    "\000\002\004\002\000\002\027\003\000\002\027\002\000" +
    "\002\005\003\000\002\005\003\000\002\005\002\000\002" +
    "\006\003\000\002\006\003\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\011\003\000\002\011\005" +
    "\000\002\012\003\000\002\012\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\003\000\002" +
    "\016\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\004\000\002\016\005\000" +
    "\002\016\004\000\002\016\005\000\002\016\004\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\007\004\000\002\007\005" +
    "\000\002\007\005\000\002\007\011\000\002\007\011\000" +
    "\002\007\004\000\002\017\003\000\002\017\002\000\002" +
    "\020\003\000\002\020\005\000\002\021\003\000\002\021" +
    "\002\000\002\022\003\000\002\022\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\006\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\006\000\002\015\006\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\024\003" +
    "\000\002\024\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\264\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb" +
    "\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072" +
    "\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb" +
    "\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb\106\ufffb\107" +
    "\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb\114\ufffb\115\ufffb" +
    "\116\ufffb\117\ufffb\120\ufffb\121\ufffb\122\ufffb\125\ufffb\131" +
    "\ufffb\132\ufffb\133\ufffb\152\ufffb\171\007\172\ufffb\173\ufffb" +
    "\001\002\000\012\002\000\003\000\130\000\152\000\001" +
    "\002\000\010\002\373\003\216\152\351\001\002\000\264" +
    "\002\ufff6\003\ufff6\004\126\005\071\006\022\007\014\010" +
    "\072\011\063\012\115\013\114\014\032\015\065\016\015" +
    "\017\016\020\106\021\121\022\060\023\020\024\053\025" +
    "\064\026\035\027\043\030\133\031\131\032\036\033\105" +
    "\034\061\035\021\036\140\037\116\040\040\041\037\042" +
    "\057\043\103\044\010\045\031\046\077\047\113\050\055" +
    "\051\011\052\051\053\137\054\130\055\102\056\124\057" +
    "\100\060\075\061\041\062\030\063\026\064\017\065\012" +
    "\066\023\067\025\070\117\071\110\072\076\073\052\074" +
    "\054\075\034\076\044\077\042\100\045\101\013\102\134" +
    "\103\046\104\125\105\127\106\107\107\112\110\123\111" +
    "\120\112\074\113\066\114\136\115\132\116\024\117\047" +
    "\120\111\121\062\122\033\125\135\130\ufff6\131\122\132" +
    "\101\133\104\152\ufff6\172\027\173\ufff6\001\002\000\264" +
    "\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074" +
    "\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc" +
    "\103\ufffc\104\ufffc\105\ufffc\106\ufffc\107\ufffc\110\ufffc\111" +
    "\ufffc\112\ufffc\113\ufffc\114\ufffc\115\ufffc\116\ufffc\117\ufffc" +
    "\120\ufffc\121\ufffc\122\ufffc\125\ufffc\130\ufffc\131\ufffc\132" +
    "\ufffc\133\ufffc\152\ufffc\172\ufffc\173\ufffc\001\002\000\022" +
    "\134\154\147\146\153\151\154\152\162\156\166\147\167" +
    "\153\172\155\001\002\000\022\134\154\147\146\153\151" +
    "\154\152\162\156\166\147\167\153\172\155\001\002\000" +
    "\022\134\154\147\146\153\151\154\152\162\156\166\147" +
    "\167\153\172\155\001\002\000\022\134\154\147\146\153" +
    "\151\154\152\162\156\166\147\167\153\172\155\001\002" +
    "\000\022\135\237\136\236\137\235\140\234\141\244\142" +
    "\243\143\242\144\241\001\002\000\022\135\237\136\236" +
    "\137\235\140\234\141\244\142\243\143\242\144\241\001" +
    "\002\000\022\135\237\136\236\137\235\140\234\141\244" +
    "\142\243\143\242\144\241\001\002\000\022\134\154\147" +
    "\146\153\151\154\152\162\156\166\147\167\153\172\155" +
    "\001\002\000\022\135\237\136\236\137\235\140\234\141" +
    "\244\142\243\143\242\144\241\001\002\000\012\136\142" +
    "\140\141\142\145\146\143\001\002\000\022\135\237\136" +
    "\236\137\235\140\234\141\244\142\243\143\242\144\241" +
    "\001\002\000\022\134\154\147\146\153\151\154\152\162" +
    "\156\166\147\167\153\172\155\001\002\000\016\002\uffb1" +
    "\003\uffb1\130\uffb1\151\uffb1\152\uffb1\173\uffb1\001\002\000" +
    "\022\134\154\147\146\153\151\154\152\162\156\166\147" +
    "\167\153\172\155\001\002\000\022\134\154\147\146\153" +
    "\151\154\152\162\156\166\147\167\153\172\155\001\002" +
    "\000\042\002\uffcb\003\uffcb\123\334\124\336\127\335\130" +
    "\uffcb\134\154\147\146\152\uffcb\153\151\154\152\162\156" +
    "\166\147\167\153\172\155\173\uffcb\001\002\000\022\134" +
    "\154\147\146\153\151\154\152\162\156\166\147\167\153" +
    "\172\155\001\002\000\022\134\154\147\146\153\151\154" +
    "\152\162\156\166\147\167\153\172\155\001\002\000\006" +
    "\136\300\140\277\001\002\000\022\134\154\147\146\153" +
    "\151\154\152\162\156\166\147\167\153\172\155\001\002" +
    "\000\022\134\154\147\146\153\151\154\152\162\156\166" +
    "\147\167\153\172\155\001\002\000\016\002\uffc3\003\uffc3" +
    "\130\uffc3\151\uffc3\152\uffc3\173\uffc3\001\002\000\012\136" +
    "\256\140\255\142\260\145\257\001\002\000\016\002\uffbd" +
    "\003\uffbd\130\uffbd\151\uffbd\152\uffbd\173\uffbd\001\002\000" +
    "\016\002\uffbe\003\uffbe\130\uffbe\151\uffbe\152\uffbe\173\uffbe" +
    "\001\002\000\022\134\154\147\146\153\151\154\152\162" +
    "\156\166\147\167\153\172\155\001\002\000\022\134\154" +
    "\147\146\153\151\154\152\162\156\166\147\167\153\172" +
    "\155\001\002\000\016\002\uffc2\003\uffc2\130\uffc2\151\uffc2" +
    "\152\uffc2\173\uffc2\001\002\000\022\134\154\147\146\153" +
    "\151\154\152\162\156\166\147\167\153\172\155\001\002" +
    "\000\022\134\154\147\146\153\151\154\152\162\156\166" +
    "\147\167\153\172\155\001\002\000\016\002\uffbb\003\uffbb" +
    "\130\uffbb\151\uffbb\152\uffbb\173\uffbb\001\002\000\022\134" +
    "\154\147\146\153\151\154\152\162\156\166\147\167\153" +
    "\172\155\001\002\000\014\002\ufff9\003\ufff9\130\ufff9\152" +
    "\ufff9\173\213\001\002\000\022\134\154\147\146\153\151" +
    "\154\152\162\156\166\147\167\153\172\155\001\002\000" +
    "\022\134\154\147\146\153\151\154\152\162\156\166\147" +
    "\167\153\172\155\001\002\000\022\135\237\136\236\137" +
    "\235\140\234\141\244\142\243\143\242\144\241\001\002" +
    "\000\022\134\154\147\146\153\151\154\152\162\156\166" +
    "\147\167\153\172\155\001\002\000\022\134\154\147\146" +
    "\153\151\154\152\162\156\166\147\167\153\172\155\001" +
    "\002\000\014\002\ufff5\003\ufff5\130\ufff5\152\ufff5\173\ufff5" +
    "\001\002\000\012\136\142\140\141\142\145\146\143\001" +
    "\002\000\022\135\237\136\236\137\235\140\234\141\244" +
    "\142\243\143\242\144\241\001\002\000\012\136\142\140" +
    "\141\142\145\146\143\001\002\000\016\002\uffb0\003\uffb0" +
    "\130\uffb0\151\uffb0\152\uffb0\173\uffb0\001\002\000\016\002" +
    "\uffc5\003\uffc5\130\uffc5\151\uffc5\152\uffc5\173\uffc5\001\002" +
    "\000\022\135\237\136\236\137\235\140\234\141\244\142" +
    "\243\143\242\144\241\001\002\000\006\136\300\140\277" +
    "\001\002\000\016\002\uffb3\003\uffb3\130\uffb3\151\uffb3\152" +
    "\uffb3\173\uffb3\001\002\000\014\002\ufff7\003\ufff7\130\ufff7" +
    "\152\ufff7\173\ufff7\001\002\000\014\002\ufff8\003\ufff8\130" +
    "\ufff8\152\ufff8\173\ufff8\001\002\000\016\002\uffc7\003\uffc7" +
    "\130\uffc7\151\uffc7\152\uffc7\173\uffc7\001\002\000\016\002" +
    "\uffc6\003\uffc6\130\uffc6\151\uffc6\152\uffc6\173\uffc6\001\002" +
    "\000\014\002\ufff4\003\ufff4\130\ufff4\152\ufff4\173\ufff4\001" +
    "\002\000\016\002\uffb4\003\uffb4\130\uffb4\151\uffb4\152\uffb4" +
    "\173\uffb4\001\002\000\016\002\uffbc\003\uffbc\130\uffbc\151" +
    "\uffbc\152\uffbc\173\uffbc\001\002\000\022\134\154\147\146" +
    "\153\151\154\152\162\156\166\147\167\153\172\155\001" +
    "\002\000\022\134\154\147\146\153\151\154\152\162\156" +
    "\166\147\167\153\172\155\001\002\000\022\134\154\147" +
    "\146\153\151\154\152\162\156\166\147\167\153\172\155" +
    "\001\002\000\022\134\154\147\146\153\151\154\152\162" +
    "\156\166\147\167\153\172\155\001\002\000\022\134\154" +
    "\147\146\153\151\154\152\162\156\166\147\167\153\172" +
    "\155\001\002\000\022\135\237\136\236\137\235\140\234" +
    "\141\244\142\243\143\242\144\241\001\002\000\022\134" +
    "\154\147\146\153\151\154\152\162\156\166\147\167\153" +
    "\172\155\001\002\000\012\136\256\140\255\142\260\145" +
    "\257\001\002\000\022\135\237\136\236\137\235\140\234" +
    "\141\244\142\243\143\242\144\241\001\002\000\016\002" +
    "\uffb8\003\uffb8\130\uffb8\151\uffb8\152\uffb8\173\uffb8\001\002" +
    "\000\022\134\154\147\146\153\151\154\152\162\156\166" +
    "\147\167\153\172\155\001\002\000\022\134\154\147\146" +
    "\153\151\154\152\162\156\166\147\167\153\172\155\001" +
    "\002\000\016\002\uffb7\003\uffb7\130\uffb7\151\uffb7\152\uffb7" +
    "\173\uffb7\001\002\000\022\134\154\147\146\153\151\154" +
    "\152\162\156\166\147\167\153\172\155\001\002\000\022" +
    "\135\237\136\236\137\235\140\234\141\244\142\243\143" +
    "\242\144\241\001\002\000\016\002\uffc4\003\uffc4\130\uffc4" +
    "\151\uffc4\152\uffc4\173\uffc4\001\002\000\016\002\uffbf\003" +
    "\uffbf\130\uffbf\151\uffbf\152\uffbf\173\uffbf\001\002\000\022" +
    "\134\154\147\146\153\151\154\152\162\156\166\147\167" +
    "\153\172\155\001\002\000\016\002\uffb5\003\uffb5\130\uffb5" +
    "\151\uffb5\152\uffb5\173\uffb5\001\002\000\022\135\237\136" +
    "\236\137\235\140\234\141\244\142\243\143\242\144\241" +
    "\001\002\000\260\004\126\005\071\006\022\007\014\010" +
    "\072\011\063\012\115\013\114\014\032\015\065\016\015" +
    "\017\016\020\106\021\121\022\060\023\020\024\053\025" +
    "\064\026\035\027\043\030\133\031\131\032\036\033\105" +
    "\034\061\035\021\036\140\037\116\040\040\041\037\042" +
    "\057\043\103\044\010\045\031\046\077\047\113\050\055" +
    "\051\011\052\051\053\137\054\130\055\102\056\124\057" +
    "\100\060\075\061\041\062\030\063\026\064\017\065\012" +
    "\066\023\067\025\070\117\071\110\072\076\073\052\074" +
    "\054\075\034\076\044\077\042\100\045\101\013\102\134" +
    "\103\046\104\125\105\127\106\107\107\112\110\123\111" +
    "\120\112\074\113\066\114\136\115\132\116\024\117\047" +
    "\120\111\121\062\134\154\147\146\153\151\154\152\162" +
    "\156\166\147\167\153\170\225\172\155\001\002\000\016" +
    "\002\uffb6\003\uffb6\130\uffb6\151\uffb6\152\uffb6\173\uffb6\001" +
    "\002\000\022\134\154\147\146\153\151\154\152\162\156" +
    "\166\147\167\153\172\155\001\002\000\016\002\uffba\003" +
    "\uffba\130\uffba\151\uffba\152\uffba\173\uffba\001\002\000\016" +
    "\002\uffc8\003\uffc8\130\uffc8\151\uffc8\152\uffc8\173\uffc8\001" +
    "\002\000\016\002\uffb9\003\uffb9\130\uffb9\151\uffb9\152\uffb9" +
    "\173\uffb9\001\002\000\022\134\154\147\146\153\151\154" +
    "\152\162\156\166\147\167\153\172\155\001\002\000\016" +
    "\002\uffc0\003\uffc0\130\uffc0\151\uffc0\152\uffc0\173\uffc0\001" +
    "\002\000\016\002\uffb2\003\uffb2\130\uffb2\151\uffb2\152\uffb2" +
    "\173\uffb2\001\002\000\016\002\uffc1\003\uffc1\130\uffc1\151" +
    "\uffc1\152\uffc1\173\uffc1\001\002\000\022\134\154\147\146" +
    "\153\151\154\152\162\156\166\147\167\153\172\155\001" +
    "\002\000\022\134\154\147\146\153\151\154\152\162\156" +
    "\166\147\167\153\172\155\001\002\000\022\134\154\147" +
    "\146\153\151\154\152\162\156\166\147\167\153\172\155" +
    "\001\002\000\022\134\154\147\146\153\151\154\152\162" +
    "\156\166\147\167\153\172\155\001\002\000\012\136\142" +
    "\140\141\142\145\146\143\001\002\000\016\002\uff73\003" +
    "\uff73\130\uff73\151\uff73\152\uff73\173\uff73\001\002\000\016" +
    "\002\uff74\003\uff74\130\uff74\151\uff74\152\uff74\173\uff74\001" +
    "\002\000\016\002\uff71\003\uff71\130\uff71\151\uff71\152\uff71" +
    "\173\uff71\001\002\000\016\002\uff9e\003\uff9e\130\uff9e\151" +
    "\uff9e\152\uff9e\173\uff9e\001\002\000\016\002\uff72\003\uff72" +
    "\130\uff72\151\uff72\152\uff72\173\uff72\001\002\000\022\134" +
    "\154\147\146\153\151\154\152\162\156\166\147\167\153" +
    "\172\155\001\002\000\044\002\uffe7\003\uffe7\130\uffe7\150" +
    "\uffe7\151\uffe7\152\uffe7\153\uffe7\154\uffe7\155\uffe7\156\uffe7" +
    "\157\uffe7\160\uffe7\161\uffe7\163\uffe7\164\uffe7\165\uffe7\173" +
    "\uffe7\001\002\000\042\002\uff94\003\uff94\130\uff94\151\uff94" +
    "\152\uff94\153\165\154\170\155\162\156\171\157\163\160" +
    "\164\161\167\163\160\164\166\165\161\173\uff94\001\002" +
    "\000\022\134\154\147\146\153\151\154\152\162\156\166" +
    "\147\167\153\172\155\001\002\000\022\134\154\147\146" +
    "\153\151\154\152\162\156\166\147\167\153\172\155\001" +
    "\002\000\044\002\uffe6\003\uffe6\130\uffe6\150\uffe6\151\uffe6" +
    "\152\uffe6\153\uffe6\154\uffe6\155\uffe6\156\uffe6\157\uffe6\160" +
    "\uffe6\161\uffe6\163\uffe6\164\uffe6\165\uffe6\173\uffe6\001\002" +
    "\000\044\002\uffe5\003\uffe5\130\uffe5\150\uffe5\151\uffe5\152" +
    "\uffe5\153\uffe5\154\uffe5\155\uffe5\156\uffe5\157\uffe5\160\uffe5" +
    "\161\uffe5\163\uffe5\164\uffe5\165\uffe5\173\uffe5\001\002\000" +
    "\044\002\uffe4\003\uffe4\130\uffe4\150\uffe4\151\uffe4\152\uffe4" +
    "\153\uffe4\154\uffe4\155\uffe4\156\uffe4\157\uffe4\160\uffe4\161" +
    "\uffe4\163\uffe4\164\uffe4\165\uffe4\173\uffe4\001\002\000\022" +
    "\134\154\147\146\153\151\154\152\162\156\166\147\167" +
    "\153\172\155\001\002\000\044\002\uffe0\003\uffe0\130\uffe0" +
    "\150\uffe0\151\uffe0\152\uffe0\153\165\154\170\155\162\156" +
    "\171\157\163\160\164\161\167\163\uffe0\164\uffe0\165\uffe0" +
    "\173\uffe0\001\002\000\022\134\154\147\146\153\151\154" +
    "\152\162\156\166\147\167\153\172\155\001\002\000\022" +
    "\134\154\147\146\153\151\154\152\162\156\166\147\167" +
    "\153\172\155\001\002\000\022\134\154\147\146\153\151" +
    "\154\152\162\156\166\147\167\153\172\155\001\002\000" +
    "\022\134\154\147\146\153\151\154\152\162\156\166\147" +
    "\167\153\172\155\001\002\000\022\134\154\147\146\153" +
    "\151\154\152\162\156\166\147\167\153\172\155\001\002" +
    "\000\022\134\154\147\146\153\151\154\152\162\156\166" +
    "\147\167\153\172\155\001\002\000\022\134\154\147\146" +
    "\153\151\154\152\162\156\166\147\167\153\172\155\001" +
    "\002\000\022\134\154\147\146\153\151\154\152\162\156" +
    "\166\147\167\153\172\155\001\002\000\022\134\154\147" +
    "\146\153\151\154\152\162\156\166\147\167\153\172\155" +
    "\001\002\000\022\134\154\147\146\153\151\154\152\162" +
    "\156\166\147\167\153\172\155\001\002\000\044\002\uffda" +
    "\003\uffda\130\uffda\150\uffda\151\uffda\152\uffda\153\uffda\154" +
    "\uffda\155\uffda\156\uffda\157\uffda\160\uffda\161\uffda\163\uffda" +
    "\164\uffda\165\uffda\173\uffda\001\002\000\044\002\uffdd\003" +
    "\uffdd\130\uffdd\150\uffdd\151\uffdd\152\uffdd\153\uffdd\154\uffdd" +
    "\155\162\156\171\157\163\160\164\161\167\163\uffdd\164" +
    "\uffdd\165\uffdd\173\uffdd\001\002\000\044\002\uffd7\003\uffd7" +
    "\130\uffd7\150\uffd7\151\uffd7\152\uffd7\153\uffd7\154\uffd7\155" +
    "\uffd7\156\uffd7\157\uffd7\160\uffd7\161\uffd7\163\uffd7\164\uffd7" +
    "\165\uffd7\173\uffd7\001\002\000\044\002\uffe3\003\uffe3\130" +
    "\uffe3\150\uffe3\151\uffe3\152\uffe3\153\165\154\170\155\162" +
    "\156\171\157\163\160\164\161\167\163\160\164\uffe3\165" +
    "\uffe3\173\uffe3\001\002\000\044\002\uffdf\003\uffdf\130\uffdf" +
    "\150\uffdf\151\uffdf\152\uffdf\153\uffdf\154\uffdf\155\162\156" +
    "\171\157\163\160\164\161\167\163\uffdf\164\uffdf\165\uffdf" +
    "\173\uffdf\001\002\000\044\002\uffd8\003\uffd8\130\uffd8\150" +
    "\uffd8\151\uffd8\152\uffd8\153\uffd8\154\uffd8\155\uffd8\156\uffd8" +
    "\157\uffd8\160\uffd8\161\uffd8\163\uffd8\164\uffd8\165\uffd8\173" +
    "\uffd8\001\002\000\044\002\uffd9\003\uffd9\130\uffd9\150\uffd9" +
    "\151\uffd9\152\uffd9\153\uffd9\154\uffd9\155\uffd9\156\uffd9\157" +
    "\uffd9\160\uffd9\161\uffd9\163\uffd9\164\uffd9\165\uffd9\173\uffd9" +
    "\001\002\000\044\002\uffdb\003\uffdb\130\uffdb\150\uffdb\151" +
    "\uffdb\152\uffdb\153\uffdb\154\uffdb\155\uffdb\156\uffdb\157\uffdb" +
    "\160\uffdb\161\uffdb\163\uffdb\164\uffdb\165\uffdb\173\uffdb\001" +
    "\002\000\044\002\uffe2\003\uffe2\130\uffe2\150\uffe2\151\uffe2" +
    "\152\uffe2\153\165\154\170\155\162\156\171\157\163\160" +
    "\164\161\167\163\160\164\uffe2\165\uffe2\173\uffe2\001\002" +
    "\000\044\002\uffe1\003\uffe1\130\uffe1\150\uffe1\151\uffe1\152" +
    "\uffe1\153\165\154\170\155\162\156\171\157\163\160\164" +
    "\161\167\163\uffe1\164\uffe1\165\uffe1\173\uffe1\001\002\000" +
    "\044\002\uffdc\003\uffdc\130\uffdc\150\uffdc\151\uffdc\152\uffdc" +
    "\153\uffdc\154\uffdc\155\162\156\171\157\163\160\164\161" +
    "\167\163\uffdc\164\uffdc\165\uffdc\173\uffdc\001\002\000\044" +
    "\002\uffde\003\uffde\130\uffde\150\uffde\151\uffde\152\uffde\153" +
    "\uffde\154\uffde\155\162\156\171\157\163\160\164\161\167" +
    "\163\uffde\164\uffde\165\uffde\173\uffde\001\002\000\030\150" +
    "\207\153\165\154\170\155\162\156\171\157\163\160\164" +
    "\161\167\163\160\164\166\165\161\001\002\000\044\002" +
    "\uffe8\003\uffe8\130\uffe8\150\uffe8\151\uffe8\152\uffe8\153\uffe8" +
    "\154\uffe8\155\uffe8\156\uffe8\157\uffe8\160\uffe8\161\uffe8\163" +
    "\uffe8\164\uffe8\165\uffe8\173\uffe8\001\002\000\042\002\uff7d" +
    "\003\uff7d\130\uff7d\151\uff7d\152\uff7d\153\165\154\170\155" +
    "\162\156\171\157\163\160\164\161\167\163\160\164\166" +
    "\165\161\173\uff7d\001\002\000\032\152\ufff9\153\165\154" +
    "\170\155\162\156\171\157\163\160\164\161\167\163\160" +
    "\164\166\165\161\173\213\001\002\000\004\152\214\001" +
    "\002\000\012\002\ufffa\003\ufffa\130\ufffa\152\ufffa\001\002" +
    "\000\262\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074" +
    "\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb" +
    "\103\ufffb\104\ufffb\105\ufffb\106\ufffb\107\ufffb\110\ufffb\111" +
    "\ufffb\112\ufffb\113\ufffb\114\ufffb\115\ufffb\116\ufffb\117\ufffb" +
    "\120\ufffb\121\ufffb\122\ufffb\125\ufffb\131\ufffb\132\ufffb\133" +
    "\ufffb\152\ufffb\171\007\172\ufffb\173\ufffb\001\002\000\006" +
    "\003\216\152\217\001\002\000\012\002\ufffe\003\ufffe\130" +
    "\ufffe\152\ufffe\001\002\000\264\003\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb" +
    "\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100" +
    "\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb\106\ufffb" +
    "\107\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb\114\ufffb\115" +
    "\ufffb\116\ufffb\117\ufffb\120\ufffb\121\ufffb\122\ufffb\125\ufffb" +
    "\126\221\131\ufffb\132\ufffb\133\ufffb\152\ufffb\171\007\172" +
    "\ufffb\173\ufffb\001\002\000\012\002\uffff\003\uffff\130\uffff" +
    "\152\uffff\001\002\000\014\002\uffd3\003\uffd3\130\uffd3\152" +
    "\uffd3\173\uffd3\001\002\000\042\002\uff7e\003\uff7e\130\uff7e" +
    "\151\uff7e\152\uff7e\153\165\154\170\155\162\156\171\157" +
    "\163\160\164\161\167\163\160\164\166\165\161\173\uff7e" +
    "\001\002\000\042\002\uff93\003\uff93\130\uff93\151\uff93\152" +
    "\uff93\153\165\154\170\155\162\156\171\157\163\160\164" +
    "\161\167\163\160\164\166\165\161\173\uff93\001\002\000" +
    "\042\002\uff91\003\uff91\130\uff91\151\uff91\152\uff91\153\165" +
    "\154\170\155\162\156\171\157\163\160\164\161\167\163" +
    "\160\164\166\165\161\173\uff91\001\002\000\016\002\uffeb" +
    "\003\uffeb\130\uffeb\151\uffeb\152\uffeb\173\uffeb\001\002\000" +
    "\016\002\ufff3\003\ufff3\130\ufff3\151\232\152\ufff3\173\ufff3" +
    "\001\002\000\016\002\uffea\003\uffea\130\uffea\151\uffea\152" +
    "\uffea\173\uffea\001\002\000\016\002\ufff0\003\ufff0\130\ufff0" +
    "\151\ufff0\152\ufff0\173\ufff0\001\002\000\042\002\uffec\003" +
    "\uffec\130\uffec\151\uffec\152\uffec\153\165\154\170\155\162" +
    "\156\171\157\163\160\164\161\167\163\160\164\166\165" +
    "\161\173\uffec\001\002\000\260\004\126\005\071\006\022" +
    "\007\014\010\072\011\063\012\115\013\114\014\032\015" +
    "\065\016\015\017\016\020\106\021\121\022\060\023\020" +
    "\024\053\025\064\026\035\027\043\030\133\031\131\032" +
    "\036\033\105\034\061\035\021\036\140\037\116\040\040" +
    "\041\037\042\057\043\103\044\010\045\031\046\077\047" +
    "\113\050\055\051\011\052\051\053\137\054\130\055\102" +
    "\056\124\057\100\060\075\061\041\062\030\063\026\064" +
    "\017\065\012\066\023\067\025\070\117\071\110\072\076" +
    "\073\052\074\054\075\034\076\044\077\042\100\045\101" +
    "\013\102\134\103\046\104\125\105\127\106\107\107\112" +
    "\110\123\111\120\112\074\113\066\114\136\115\132\116" +
    "\024\117\047\120\111\121\062\134\154\147\146\153\151" +
    "\154\152\162\156\166\147\167\153\170\225\172\155\001" +
    "\002\000\016\002\uffef\003\uffef\130\uffef\151\uffef\152\uffef" +
    "\173\uffef\001\002\000\016\002\uff6d\003\uff6d\130\uff6d\151" +
    "\uff6d\152\uff6d\173\uff6d\001\002\000\016\002\uff6e\003\uff6e" +
    "\130\uff6e\151\uff6e\152\uff6e\173\uff6e\001\002\000\016\002" +
    "\uff6f\003\uff6f\130\uff6f\151\uff6f\152\uff6f\173\uff6f\001\002" +
    "\000\016\002\uff70\003\uff70\130\uff70\151\uff70\152\uff70\173" +
    "\uff70\001\002\000\016\002\uffaa\003\uffaa\130\uffaa\151\uffaa" +
    "\152\uffaa\173\uffaa\001\002\000\016\002\uff69\003\uff69\130" +
    "\uff69\151\uff69\152\uff69\173\uff69\001\002\000\016\002\uff6a" +
    "\003\uff6a\130\uff6a\151\uff6a\152\uff6a\173\uff6a\001\002\000" +
    "\016\002\uff6b\003\uff6b\130\uff6b\151\uff6b\152\uff6b\173\uff6b" +
    "\001\002\000\016\002\uff6c\003\uff6c\130\uff6c\151\uff6c\152" +
    "\uff6c\173\uff6c\001\002\000\042\002\uff88\003\uff88\130\uff88" +
    "\151\uff88\152\uff88\153\165\154\170\155\162\156\171\157" +
    "\163\160\164\161\167\163\160\164\166\165\161\173\uff88" +
    "\001\002\000\004\151\247\001\002\000\022\135\237\136" +
    "\236\137\235\140\234\141\244\142\243\143\242\144\241" +
    "\001\002\000\016\002\uffa5\003\uffa5\130\uffa5\151\uffa5\152" +
    "\uffa5\173\uffa5\001\002\000\042\002\uff98\003\uff98\130\uff98" +
    "\151\uff98\152\uff98\153\165\154\170\155\162\156\171\157" +
    "\163\160\164\161\167\163\160\164\166\165\161\173\uff98" +
    "\001\002\000\042\002\uff7b\003\uff7b\130\uff7b\151\uff7b\152" +
    "\uff7b\153\165\154\170\155\162\156\171\157\163\160\164" +
    "\161\167\163\160\164\166\165\161\173\uff7b\001\002\000" +
    "\042\002\uff87\003\uff87\130\uff87\151\uff87\152\uff87\153\165" +
    "\154\170\155\162\156\171\157\163\160\164\161\167\163" +
    "\160\164\166\165\161\173\uff87\001\002\000\016\002\uffab" +
    "\003\uffab\130\uffab\151\uffab\152\uffab\173\uffab\001\002\000" +
    "\016\002\uff77\003\uff77\130\uff77\151\uff77\152\uff77\173\uff77" +
    "\001\002\000\016\002\uff78\003\uff78\130\uff78\151\uff78\152" +
    "\uff78\173\uff78\001\002\000\016\002\uff75\003\uff75\130\uff75" +
    "\151\uff75\152\uff75\173\uff75\001\002\000\016\002\uff76\003" +
    "\uff76\130\uff76\151\uff76\152\uff76\173\uff76\001\002\000\016" +
    "\002\uffa1\003\uffa1\130\uffa1\151\uffa1\152\uffa1\173\uffa1\001" +
    "\002\000\040\002\ufff1\003\ufff1\130\ufff1\152\ufff1\153\165" +
    "\154\170\155\162\156\171\157\163\160\164\161\167\163" +
    "\160\164\166\165\161\173\ufff1\001\002\000\004\151\264" +
    "\001\002\000\022\134\154\147\146\153\151\154\152\162" +
    "\156\166\147\167\153\172\155\001\002\000\042\002\uff9c" +
    "\003\uff9c\130\uff9c\151\uff9c\152\uff9c\153\165\154\170\155" +
    "\162\156\171\157\163\160\164\161\167\163\160\164\166" +
    "\165\161\173\uff9c\001\002\000\042\002\uff92\003\uff92\130" +
    "\uff92\151\uff92\152\uff92\153\165\154\170\155\162\156\171" +
    "\157\163\160\164\161\167\163\160\164\166\165\161\173" +
    "\uff92\001\002\000\016\002\uffee\003\uffee\130\uffee\151\uffee" +
    "\152\uffee\173\uffee\001\002\000\016\002\ufff2\003\ufff2\130" +
    "\ufff2\151\272\152\ufff2\173\ufff2\001\002\000\042\002\uffe9" +
    "\003\uffe9\130\uffe9\151\uffe9\152\uffe9\153\165\154\170\155" +
    "\162\156\171\157\163\160\164\161\167\163\160\164\166" +
    "\165\161\173\uffe9\001\002\000\022\134\154\147\146\153" +
    "\151\154\152\162\156\166\147\167\153\172\155\001\002" +
    "\000\016\002\uffed\003\uffed\130\uffed\151\uffed\152\uffed\173" +
    "\uffed\001\002\000\042\002\uff90\003\uff90\130\uff90\151\uff90" +
    "\152\uff90\153\165\154\170\155\162\156\171\157\163\160" +
    "\164\161\167\163\160\164\166\165\161\173\uff90\001\002" +
    "\000\042\002\uff99\003\uff99\130\uff99\151\uff99\152\uff99\153" +
    "\165\154\170\155\162\156\171\157\163\160\164\161\167" +
    "\163\160\164\166\165\161\173\uff99\001\002\000\042\002" +
    "\uff86\003\uff86\130\uff86\151\uff86\152\uff86\153\165\154\170" +
    "\155\162\156\171\157\163\160\164\161\167\163\160\164" +
    "\166\165\161\173\uff86\001\002\000\016\002\uff79\003\uff79" +
    "\130\uff79\151\uff79\152\uff79\173\uff79\001\002\000\016\002" +
    "\uff7a\003\uff7a\130\uff7a\151\uff7a\152\uff7a\173\uff7a\001\002" +
    "\000\016\002\uffa3\003\uffa3\130\uffa3\151\uffa3\152\uffa3\173" +
    "\uffa3\001\002\000\016\002\uffa6\003\uffa6\130\uffa6\151\uffa6" +
    "\152\uffa6\173\uffa6\001\002\000\016\002\uffa0\003\uffa0\130" +
    "\uffa0\151\uffa0\152\uffa0\173\uffa0\001\002\000\016\002\uffa9" +
    "\003\uffa9\130\uffa9\151\uffa9\152\uffa9\173\uffa9\001\002\000" +
    "\004\151\306\001\002\000\022\134\154\147\146\153\151" +
    "\154\152\162\156\166\147\167\153\172\155\001\002\000" +
    "\042\002\uff9d\003\uff9d\130\uff9d\151\uff9d\152\uff9d\153\165" +
    "\154\170\155\162\156\171\157\163\160\164\161\167\163" +
    "\160\164\166\165\161\173\uff9d\001\002\000\042\002\uff97" +
    "\003\uff97\130\uff97\151\uff97\152\uff97\153\165\154\170\155" +
    "\162\156\171\157\163\160\164\161\167\163\160\164\166" +
    "\165\161\173\uff97\001\002\000\042\002\uff84\003\uff84\130" +
    "\uff84\151\uff84\152\uff84\153\165\154\170\155\162\156\171" +
    "\157\163\160\164\161\167\163\160\164\166\165\161\173" +
    "\uff84\001\002\000\016\002\uffa7\003\uffa7\130\uffa7\151\uffa7" +
    "\152\uffa7\173\uffa7\001\002\000\042\002\uff85\003\uff85\130" +
    "\uff85\151\uff85\152\uff85\153\165\154\170\155\162\156\171" +
    "\157\163\160\164\161\167\163\160\164\166\165\161\173" +
    "\uff85\001\002\000\042\002\uff95\003\uff95\130\uff95\151\uff95" +
    "\152\uff95\153\165\154\170\155\162\156\171\157\163\160" +
    "\164\161\167\163\160\164\166\165\161\173\uff95\001\002" +
    "\000\012\002\ufffd\003\ufffd\130\ufffd\152\ufffd\001\002\000" +
    "\042\002\uff7c\003\uff7c\130\uff7c\151\uff7c\152\uff7c\153\165" +
    "\154\170\155\162\156\171\157\163\160\164\161\167\163" +
    "\160\164\166\165\161\173\uff7c\001\002\000\042\002\uff81" +
    "\003\uff81\130\uff81\151\uff81\152\uff81\153\165\154\170\155" +
    "\162\156\171\157\163\160\164\161\167\163\160\164\166" +
    "\165\161\173\uff81\001\002\000\042\002\uff82\003\uff82\130" +
    "\uff82\151\uff82\152\uff82\153\165\154\170\155\162\156\171" +
    "\157\163\160\164\161\167\163\160\164\166\165\161\173" +
    "\uff82\001\002\000\042\002\uff80\003\uff80\130\uff80\151\uff80" +
    "\152\uff80\153\165\154\170\155\162\156\171\157\163\160" +
    "\164\161\167\163\160\164\166\165\161\173\uff80\001\002" +
    "\000\042\002\uff8f\003\uff8f\130\uff8f\151\uff8f\152\uff8f\153" +
    "\165\154\170\155\162\156\171\157\163\160\164\161\167" +
    "\163\160\164\166\165\161\173\uff8f\001\002\000\016\002" +
    "\uffa2\003\uffa2\130\uffa2\151\uffa2\152\uffa2\173\uffa2\001\002" +
    "\000\042\002\uff83\003\uff83\130\uff83\151\uff83\152\uff83\153" +
    "\165\154\170\155\162\156\171\157\163\160\164\161\167" +
    "\163\160\164\166\165\161\173\uff83\001\002\000\040\002" +
    "\uffd6\003\uffd6\130\uffd6\152\uffd6\153\165\154\170\155\162" +
    "\156\171\157\163\160\164\161\167\163\160\164\166\165" +
    "\161\173\uffd6\001\002\000\016\002\uffa4\003\uffa4\130\uffa4" +
    "\151\uffa4\152\uffa4\173\uffa4\001\002\000\042\002\uff9a\003" +
    "\uff9a\130\uff9a\151\uff9a\152\uff9a\153\165\154\170\155\162" +
    "\156\171\157\163\160\164\161\167\163\160\164\166\165" +
    "\161\173\uff9a\001\002\000\042\002\uff8e\003\uff8e\130\uff8e" +
    "\151\uff8e\152\uff8e\153\165\154\170\155\162\156\171\157" +
    "\163\160\164\161\167\163\160\164\166\165\161\173\uff8e" +
    "\001\002\000\014\002\uffd1\003\uffd1\130\uffd1\152\uffd1\173" +
    "\uffd1\001\002\000\016\002\uffcc\003\uffcc\130\uffcc\151\353" +
    "\152\uffcc\173\uffcc\001\002\000\042\002\uffca\003\uffca\130" +
    "\uffca\151\uffca\152\uffca\153\165\154\170\155\162\156\171" +
    "\157\163\160\164\161\167\163\160\164\166\165\161\173" +
    "\uffca\001\002\000\022\134\154\147\146\153\151\154\152" +
    "\162\156\166\147\167\153\172\155\001\002\000\010\152" +
    "\uffcf\172\340\173\uffcf\001\002\000\022\134\154\147\146" +
    "\153\151\154\152\162\156\166\147\167\153\172\155\001" +
    "\002\000\040\002\uffd4\003\uffd4\130\uffd4\152\uffd4\153\165" +
    "\154\170\155\162\156\171\157\163\160\164\161\167\163" +
    "\160\164\166\165\161\173\uffd4\001\002\000\010\151\uffce" +
    "\152\uffce\173\uffce\001\002\000\006\152\ufff9\173\213\001" +
    "\002\000\010\151\343\152\uffd0\173\uffd0\001\002\000\004" +
    "\172\344\001\002\000\010\151\uffcd\152\uffcd\173\uffcd\001" +
    "\002\000\004\152\346\001\002\000\264\003\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb" +
    "\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077" +
    "\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb" +
    "\106\ufffb\107\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb\114" +
    "\ufffb\115\ufffb\116\ufffb\117\ufffb\120\ufffb\121\ufffb\122\ufffb" +
    "\125\ufffb\130\ufffb\131\ufffb\132\ufffb\133\ufffb\152\ufffb\171" +
    "\007\172\ufffb\173\ufffb\001\002\000\010\003\216\130\350" +
    "\152\351\001\002\000\014\002\uffd2\003\uffd2\130\uffd2\152" +
    "\uffd2\173\uffd2\001\002\000\266\002\ufffb\003\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb" +
    "\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077" +
    "\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb" +
    "\106\ufffb\107\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb\114" +
    "\ufffb\115\ufffb\116\ufffb\117\ufffb\120\ufffb\121\ufffb\122\ufffb" +
    "\125\ufffb\130\ufffb\131\ufffb\132\ufffb\133\ufffb\152\ufffb\171" +
    "\007\172\ufffb\173\ufffb\001\002\000\040\002\uffd5\003\uffd5" +
    "\130\uffd5\152\uffd5\153\165\154\170\155\162\156\171\157" +
    "\163\160\164\161\167\163\160\164\166\165\161\173\uffd5" +
    "\001\002\000\022\134\154\147\146\153\151\154\152\162" +
    "\156\166\147\167\153\172\155\001\002\000\042\002\uffc9" +
    "\003\uffc9\130\uffc9\151\uffc9\152\uffc9\153\165\154\170\155" +
    "\162\156\171\157\163\160\164\161\167\163\160\164\166" +
    "\165\161\173\uffc9\001\002\000\042\002\uff8d\003\uff8d\130" +
    "\uff8d\151\uff8d\152\uff8d\153\165\154\170\155\162\156\171" +
    "\157\163\160\164\161\167\163\160\164\166\165\161\173" +
    "\uff8d\001\002\000\042\002\uff8a\003\uff8a\130\uff8a\151\uff8a" +
    "\152\uff8a\153\165\154\170\155\162\156\171\157\163\160" +
    "\164\161\167\163\160\164\166\165\161\173\uff8a\001\002" +
    "\000\042\002\uff89\003\uff89\130\uff89\151\uff89\152\uff89\153" +
    "\165\154\170\155\162\156\171\157\163\160\164\161\167" +
    "\163\160\164\166\165\161\173\uff89\001\002\000\016\002" +
    "\uffaf\003\uffaf\130\uffaf\151\uffaf\152\uffaf\173\uffaf\001\002" +
    "\000\016\002\uff9f\003\uff9f\130\uff9f\151\uff9f\152\uff9f\173" +
    "\uff9f\001\002\000\016\002\uffa8\003\uffa8\130\uffa8\151\uffa8" +
    "\152\uffa8\173\uffa8\001\002\000\042\002\uff8c\003\uff8c\130" +
    "\uff8c\151\uff8c\152\uff8c\153\165\154\170\155\162\156\171" +
    "\157\163\160\164\161\167\163\160\164\166\165\161\173" +
    "\uff8c\001\002\000\016\002\uffac\003\uffac\130\uffac\151\uffac" +
    "\152\uffac\173\uffac\001\002\000\016\002\uffad\003\uffad\130" +
    "\uffad\151\uffad\152\uffad\173\uffad\001\002\000\016\002\uffae" +
    "\003\uffae\130\uffae\151\uffae\152\uffae\173\uffae\001\002\000" +
    "\042\002\uff7f\003\uff7f\130\uff7f\151\uff7f\152\uff7f\153\165" +
    "\154\170\155\162\156\171\157\163\160\164\161\167\163" +
    "\160\164\166\165\161\173\uff7f\001\002\000\042\002\uff8b" +
    "\003\uff8b\130\uff8b\151\uff8b\152\uff8b\153\165\154\170\155" +
    "\162\156\171\157\163\160\164\161\167\163\160\164\166" +
    "\165\161\173\uff8b\001\002\000\042\002\uff96\003\uff96\130" +
    "\uff96\151\uff96\152\uff96\153\165\154\170\155\162\156\171" +
    "\157\163\160\164\161\167\163\160\164\166\165\161\173" +
    "\uff96\001\002\000\042\002\uff9b\003\uff9b\130\uff9b\151\uff9b" +
    "\152\uff9b\153\165\154\170\155\162\156\171\157\163\160" +
    "\164\161\167\163\160\164\166\165\161\173\uff9b\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\010\002\004\003\003\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\047\006\067" +
    "\007\066\010\055\015\072\001\001\000\002\001\001\000" +
    "\004\016\371\001\001\000\004\016\370\001\001\000\004" +
    "\016\367\001\001\000\004\016\366\001\001\000\004\023" +
    "\365\001\001\000\004\023\364\001\001\000\004\023\363" +
    "\001\001\000\004\016\362\001\001\000\004\023\361\001" +
    "\001\000\004\026\360\001\001\000\004\023\357\001\001" +
    "\000\004\016\356\001\001\000\002\001\001\000\004\016" +
    "\355\001\001\000\004\016\354\001\001\000\010\016\332" +
    "\021\330\022\331\001\001\000\004\016\327\001\001\000" +
    "\004\016\326\001\001\000\004\024\325\001\001\000\004" +
    "\016\324\001\001\000\004\016\323\001\001\000\002\001" +
    "\001\000\004\025\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\321\001\001\000\004\016\320\001" +
    "\001\000\002\001\001\000\004\016\317\001\001\000\004" +
    "\016\316\001\001\000\002\001\001\000\004\016\315\001" +
    "\001\000\004\027\314\001\001\000\004\016\313\001\001" +
    "\000\004\016\312\001\001\000\004\023\311\001\001\000" +
    "\004\016\310\001\001\000\004\016\307\001\001\000\002" +
    "\001\001\000\004\026\304\001\001\000\004\023\303\001" +
    "\001\000\004\026\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\301\001\001\000\004\024\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\275\001\001" +
    "\000\004\016\274\001\001\000\004\016\273\001\001\000" +
    "\010\012\267\014\266\016\270\001\001\000\004\016\265" +
    "\001\001\000\004\023\262\001\001\000\004\016\261\001" +
    "\001\000\004\025\260\001\001\000\004\023\253\001\001" +
    "\000\002\001\001\000\004\016\252\001\001\000\004\016" +
    "\251\001\001\000\002\001\001\000\004\016\250\001\001" +
    "\000\004\023\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\244\001\001\000\002\001\001\000\004" +
    "\023\237\001\001\000\012\011\225\013\227\015\226\016" +
    "\230\001\001\000\002\001\001\000\004\016\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\221\001\001\000\004\016" +
    "\210\001\001\000\004\016\207\001\001\000\004\016\147" +
    "\001\001\000\004\026\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\204\001\001\000\004\016\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\156\001\001\000\002\001\001\000\004" +
    "\016\202\001\001\000\004\016\201\001\001\000\004\016" +
    "\200\001\001\000\004\016\177\001\001\000\004\016\176" +
    "\001\001\000\004\016\175\001\001\000\004\016\174\001" +
    "\001\000\004\016\173\001\001\000\004\016\172\001\001" +
    "\000\004\016\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\214\003\003\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\217\004\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\232\015\226\016\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\272\016\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\351\001\001\000\006\017\340\020\341\001\001\000\004" +
    "\016\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\346\003" +
    "\003\004\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\217\004\005\001\001\000\002\001\001\000" +
    "\004\016\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser8080$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser8080$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser8080$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 errorCount = 0; lastLine = 0; lastColumn = 0; 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    emu8Token t = (emu8Token)this.getScanner().next_token();
    this.lastLine = t.getLine()+1;
    this.lastColumn = t.getColumn()+1;
    return (Symbol)t;
 
    }


    private messageReporter reporter = null;
    public int lastLine;
    public int lastColumn;
    public static int errorCount = 0;
    
    public parser8080(java_cup.runtime.Scanner s, messageReporter reporter) {
        this(s);
        this.reporter = reporter;
    }
    	
    public void syntax_error(Symbol current) {
        report_error("Syntax error: ",current);
    }

    public void unrecovered_syntax_error(Symbol current) {
        report_error("Fatal syntax error: ", current);
        done_parsing();
    }

    public void report_error(String message, Symbol current) {
        String mes;
        String location="";
        if (current instanceof emu8Token) {
            emu8Token t = (emu8Token)current;
            location = (t.getLine()+1)+","+t.getColumn();
            mes = message + t.getErrorString() + " ('"+t.getText()+"')";
        } else mes = message + "symbol " + current.sym;
        if (reporter != null) {
            if (location != "") reporter.reportMessage(location,mes);
            else reporter.reportMessage(mes);
        } else System.err.println(mes);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser8080$actions {
  private final parser8080 parser;

  /** Constructor */
  CUP$parser8080$actions(parser8080 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser8080$do_action(
    int                        CUP$parser8080$act_num,
    java_cup.runtime.lr_parser CUP$parser8080$parser,
    java.util.Stack            CUP$parser8080$stack,
    int                        CUP$parser8080$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser8080$result;

      /* select the action based on the action number */
      switch (CUP$parser8080$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Reg ::= REGISTERS_M 
            {
              Byte RESULT =null;
		 RESULT = 6; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Reg",17, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Reg ::= REGISTERS_L 
            {
              Byte RESULT =null;
		 RESULT = 5; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Reg",17, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Reg ::= REGISTERS_H 
            {
              Byte RESULT =null;
		 RESULT = 4; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Reg",17, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Reg ::= REGISTERS_E 
            {
              Byte RESULT =null;
		 RESULT = 3; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Reg",17, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Reg ::= REGISTERS_D 
            {
              Byte RESULT =null;
		 RESULT = 2; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Reg",17, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Reg ::= REGISTERS_C 
            {
              Byte RESULT =null;
		 RESULT = 1; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Reg",17, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Reg ::= REGISTERS_B 
            {
              Byte RESULT =null;
		 RESULT = 0; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Reg",17, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Reg ::= REGISTERS_A 
            {
              Byte RESULT =null;
		 RESULT = 7; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Reg",17, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // RegPairBDHS ::= REGISTERS_SP 
            {
              Byte RESULT =null;
		 RESULT = 3; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("RegPairBDHS",20, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // RegPairBDHS ::= REGISTERS_H 
            {
              Byte RESULT =null;
		 RESULT = 2; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("RegPairBDHS",20, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // RegPairBDHS ::= REGISTERS_D 
            {
              Byte RESULT =null;
		 RESULT = 1; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("RegPairBDHS",20, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // RegPairBDHS ::= REGISTERS_B 
            {
              Byte RESULT =null;
		 RESULT = 0; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("RegPairBDHS",20, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // RegPairBDHP ::= REGISTERS_PSW 
            {
              Byte RESULT =null;
		 RESULT = 3; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("RegPairBDHP",19, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // RegPairBDHP ::= REGISTERS_H 
            {
              Byte RESULT =null;
		 RESULT = 2; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("RegPairBDHP",19, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // RegPairBDHP ::= REGISTERS_D 
            {
              Byte RESULT =null;
		 RESULT = 1; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("RegPairBDHP",19, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // RegPairBDHP ::= REGISTERS_B 
            {
              Byte RESULT =null;
		 RESULT = 0; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("RegPairBDHP",19, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // RegPairBD ::= REGISTERS_D 
            {
              Byte RESULT =null;
		 RESULT = 1; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("RegPairBD",18, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // RegPairBD ::= REGISTERS_B 
            {
              Byte RESULT =null;
		 RESULT = 0; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("RegPairBD",18, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Opcode ::= RESERVED_OUT Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("out",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Opcode ::= RESERVED_IN Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("in",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Opcode ::= RESERVED_RST Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("rst",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Opcode ::= RESERVED_CPO Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("cpo",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Opcode ::= RESERVED_CPE Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("cpe",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Opcode ::= RESERVED_CP Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("cp",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Opcode ::= RESERVED_CM Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("cm",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Opcode ::= RESERVED_CNZ Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("cnz",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Opcode ::= RESERVED_CZ Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("cz",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Opcode ::= RESERVED_CNC Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("cnc",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Opcode ::= RESERVED_CC Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("cc",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Opcode ::= RESERVED_CALL Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("call",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Opcode ::= RESERVED_JPO Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("jpo",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Opcode ::= RESERVED_JPE Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("jpe",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Opcode ::= RESERVED_JP Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("jp",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Opcode ::= RESERVED_JM Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("jm",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Opcode ::= RESERVED_JNZ Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("jnz",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Opcode ::= RESERVED_JZ Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("jz",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Opcode ::= RESERVED_JNC Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("jnc",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Opcode ::= RESERVED_JC Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("jc",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Opcode ::= RESERVED_JMP Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("jmp",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Opcode ::= RESERVED_LHLD Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("lhld",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Opcode ::= RESERVED_SHLD Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("shld",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Opcode ::= RESERVED_LDA Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("lda",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Opcode ::= RESERVED_STA Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("sta",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Opcode ::= RESERVED_CPI Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("cpi",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Opcode ::= RESERVED_ORI Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("ori",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Opcode ::= RESERVED_XRI Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("xri",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Opcode ::= RESERVED_ANI Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("ani",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Opcode ::= RESERVED_SBI Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("sbi",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Opcode ::= RESERVED_SUI Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("sui",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Opcode ::= RESERVED_ACI Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("aci",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Opcode ::= RESERVED_ADI Expression 
            {
              OpCodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Expr("adi",e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Opcode ::= RESERVED_MVI Reg SEPARATOR_COMMA Expression 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_RegExpr("mvi",r,e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-3)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Opcode ::= RESERVED_LXI RegPairBDHS SEPARATOR_COMMA Expression 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_RegpairExpr("lxi",r,e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-3)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Opcode ::= RESERVED_DCX RegPairBDHS 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Regpair("dcx",r,false,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Opcode ::= RESERVED_INX RegPairBDHS 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Regpair("inx",r,false,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Opcode ::= RESERVED_DAD RegPairBDHS 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Regpair("dad",r,false,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Opcode ::= RESERVED_POP RegPairBDHP 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Regpair("pop",r,true,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Opcode ::= RESERVED_PUSH RegPairBDHP 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Regpair("push",r,true,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Opcode ::= RESERVED_LDAX RegPairBD 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Regpair("ldax",r,false,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Opcode ::= RESERVED_STAX RegPairBD 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Regpair("stax",r,false,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Opcode ::= RESERVED_MOV Reg SEPARATOR_COMMA Reg 
            {
              OpCodeNode RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		Byte dst = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte src = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_RegReg("mov",dst,src,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-3)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Opcode ::= RESERVED_CMP Reg 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Reg("cmp",r,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Opcode ::= RESERVED_ORA Reg 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Reg("ora",r,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Opcode ::= RESERVED_XRA Reg 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Reg("xra",r,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Opcode ::= RESERVED_ANA Reg 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Reg("ana",r,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Opcode ::= RESERVED_SBB Reg 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Reg("sbb",r,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Opcode ::= RESERVED_SUB Reg 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Reg("sub",r,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Opcode ::= RESERVED_ADC Reg 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Reg("adc",r,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Opcode ::= RESERVED_ADD Reg 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Reg("add",r,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Opcode ::= RESERVED_DCR Reg 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Reg("dcr",r,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Opcode ::= RESERVED_INR Reg 
            {
              OpCodeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Byte r = (Byte)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OC_Reg("inr",r,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Opcode ::= RESERVED_HLT 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("hlt",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Opcode ::= RESERVED_DI 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("di",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Opcode ::= RESERVED_EI 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("ei",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Opcode ::= RESERVED_RPO 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("rpo",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Opcode ::= RESERVED_RPE 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("rpe",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Opcode ::= RESERVED_RP 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("rp",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Opcode ::= RESERVED_RM 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("rm",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Opcode ::= RESERVED_RNZ 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("rnz",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Opcode ::= RESERVED_RZ 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("rz",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Opcode ::= RESERVED_RNC 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("rnc",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Opcode ::= RESERVED_RC 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("rc",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Opcode ::= RESERVED_RET 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("ret",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Opcode ::= RESERVED_PCHL 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("pchl",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Opcode ::= RESERVED_SPHL 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("sphl",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Opcode ::= RESERVED_XTHL 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("xthl",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Opcode ::= RESERVED_XCHG 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("xchg",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Opcode ::= RESERVED_RAR 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("rar",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Opcode ::= RESERVED_RAL 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("ral",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Opcode ::= RESERVED_RRC 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("rrc",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Opcode ::= RESERVED_RLC 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("rlc",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Opcode ::= RESERVED_NOP 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("nop",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Opcode ::= RESERVED_DAA 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("daa",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Opcode ::= RESERVED_CMA 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("cma",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Opcode ::= RESERVED_CMC 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("cmc",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Opcode ::= RESERVED_STC 
            {
              OpCodeNode RESULT =null;
		 RESULT = new OC_NoParams("stc",parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Opcode",11, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MExprList ::= MExprList SEPARATOR_COMMA Expression 
            {
              Vector RESULT =null;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		Vector vec = (Vector)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 vec.addElement(expr); RESULT = vec; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("MExprList",16, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MExprList ::= Expression 
            {
              Vector RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 Vector vec = new Vector();
       vec.addElement(expr);
       RESULT = vec; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("MExprList",16, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MacroExprOptional ::= 
            {
              Vector RESULT =null;
		 RESULT = null; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("MacroExprOptional",15, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MacroExprOptional ::= MExprList 
            {
              Vector RESULT =null;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Vector vec = (Vector)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = vec; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("MacroExprOptional",15, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MOperList ::= MOperList SEPARATOR_COMMA TIDENTIFIER 
            {
              Vector RESULT =null;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		Vector vec = (Vector)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 vec.addElement(name); RESULT = vec; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("MOperList",14, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MOperList ::= TIDENTIFIER 
            {
              Vector RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 Vector vec = new Vector();
       vec.addElement(name);
       RESULT = vec; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("MOperList",14, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MacroOperOptional ::= 
            {
              Vector RESULT =null;
		 RESULT = null; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("MacroOperOptional",13, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MacroOperOptional ::= MOperList 
            {
              Vector RESULT =null;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Vector vec = (Vector)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = vec; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("MacroOperOptional",13, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Pseudocode ::= TIDENTIFIER MacroExprOptional 
            {
              PseudoNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Vector vec = (Vector)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new MacroCallPseudo(name, vec,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Pseudocode",5, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Pseudocode ::= TIDENTIFIER PREPROCESSOR_MACRO MacroOperOptional CommentOptional SEPARATOR_EOL Statement PREPROCESSOR_ENDM 
            {
              PseudoNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-6)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-4)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-4)).right;
		Vector vec = (Vector)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).value;
		 RESULT = new MacroPseudoNode(name,vec,s,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Pseudocode",5, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-6)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Pseudocode ::= PREPROCESSOR_IF Expression CommentOptional SEPARATOR_EOL Statement SEPARATOR_EOL PREPROCESSOR_ENDIF 
            {
              PseudoNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-5)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		 RESULT = new IfPseudoNode(e,s,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Pseudocode",5, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-6)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Pseudocode ::= TIDENTIFIER PREPROCESSOR_SET Expression 
            {
              PseudoNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new SetPseudoNode(name,e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Pseudocode",5, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Pseudocode ::= TIDENTIFIER PREPROCESSOR_EQU Expression 
            {
              PseudoNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new EquPseudoNode(name,e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Pseudocode",5, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Pseudocode ::= PREPROCESSOR_ORG Expression 
            {
              PseudoNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new OrgPseudoNode(e,parser.lastLine, parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Pseudocode",5, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Expression OPERATOR_SHL Expression 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(e1,e2,"shl"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Expression OPERATOR_SHR Expression 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(e1,e2,"shr"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression OPERATOR_MOD Expression 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(e1,e2,"mod"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression OPERATOR_DIVIDE Expression 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(e1,e2,"/"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression OPERATOR_MULTIPLY Expression 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(e1,e2,"*"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= OPERATOR_SUBTRACT Expression 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(new DecimalValueNode(0),e1,"-"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression OPERATOR_SUBTRACT Expression 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(e1,e2,"-"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= OPERATOR_ADD Expression 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(new DecimalValueNode(0),e1,"+"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression OPERATOR_ADD Expression 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(e1,e2,"+"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= OPERATOR_NOT Expression 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(e,null,"not"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= Expression OPERATOR_AND Expression 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(e1,e2,"and"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression ::= Expression OPERATOR_XOR Expression 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(e1,e2,"xor"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= Expression OPERATOR_OR Expression 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new ArithNode(e1,e2,"or"); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= TIDENTIFIER 
            {
              ExprNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new IdExpr(name); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expression ::= PREPROCESSOR_ADDR 
            {
              ExprNode RESULT =null;
		 RESULT = new AddressValueNode(); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expression ::= LITERAL_DECIMAL_16BIT 
            {
              ExprNode RESULT =null;
		int num16left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int num16right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Integer num16 = (Integer)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		RESULT = new DecimalValueNode(num16); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expression ::= LITERAL_DECIMAL_8BIT 
            {
              ExprNode RESULT =null;
		int num8left = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int num8right = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		Integer num8 = (Integer)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new DecimalValueNode(num8); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expression ::= SEPARATOR_LPAR Expression SEPARATOR_RPAR 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).value;
		 RESULT = e; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DW_Data ::= Expression 
            {
              DWDataNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new DWDataNode(expr,parser.lastLine,parser.lastColumn);
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("DW_Data",10, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DB_Data ::= Opcode 
            {
              DBDataNode RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		OpCodeNode opcode = (OpCodeNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new DBDataNode(opcode,parser.lastLine,parser.lastColumn);
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("DB_Data",9, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DB_Data ::= LITERAL_STRING 
            {
              DBDataNode RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new DBDataNode(str,parser.lastLine,parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("DB_Data",9, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DB_Data ::= Expression 
            {
              DBDataNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new DBDataNode(expr,parser.lastLine,parser.lastColumn);
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("DB_Data",9, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DWDataList ::= DWDataList SEPARATOR_COMMA DW_Data 
            {
              DataNode RESULT =null;
		int dnleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int dnright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		DataNode dn = (DataNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int dwdataleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int dwdataright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		DWDataNode dwdata = (DWDataNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 dn.addElement(dwdata); RESULT = dn; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("DWDataList",8, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DWDataList ::= DW_Data 
            {
              DataNode RESULT =null;
		int dwdataleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int dwdataright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		DWDataNode dwdata = (DWDataNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 DataNode dn = new DataNode(parser.lastLine,parser.lastColumn);
       dn.addElement(dwdata);
       RESULT = dn; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("DWDataList",8, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DBDataList ::= DBDataList SEPARATOR_COMMA DB_Data 
            {
              DataNode RESULT =null;
		int dnleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int dnright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		DataNode dn = (DataNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int dbdataleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int dbdataright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		DBDataNode dbdata = (DBDataNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 dn.addElement(dbdata); RESULT = dn; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("DBDataList",7, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DBDataList ::= DB_Data 
            {
              DataNode RESULT =null;
		int dbdataleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int dbdataright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		DBDataNode dbdata = (DBDataNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 DataNode dn = new DataNode(parser.lastLine,parser.lastColumn);
       dn.addElement(dbdata);
       RESULT = dn; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("DBDataList",7, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Data ::= PREPROCESSOR_DS Expression 
            {
              DataNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 DataNode dn = new DataNode(parser.lastLine,parser.lastColumn);
       dn.addElement(new DSDataNode(expr,parser.lastLine,parser.lastColumn));
       RESULT= dn; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Data",6, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Data ::= PREPROCESSOR_DW DWDataList 
            {
              DataNode RESULT =null;
		int dwleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int dwright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		DataNode dw = (DataNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = dw; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Data",6, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Data ::= PREPROCESSOR_DB DBDataList 
            {
              DataNode RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		DataNode db = (DataNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = db; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Data",6, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Code ::= Opcode 
            {
              CodeNode RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		OpCodeNode code = (OpCodeNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = code; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Code",4, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Code ::= Data 
            {
              CodeNode RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		DataNode data = (DataNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = data; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Code",4, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CodePseudocode ::= 
            {
              CodePseudoNode RESULT =null;
		 RESULT = null; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("CodePseudocode",3, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CodePseudocode ::= Pseudocode 
            {
              CodePseudoNode RESULT =null;
		int pseudoleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int pseudoright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		PseudoNode pseudo = (PseudoNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = pseudo; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("CodePseudocode",3, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CodePseudocode ::= Code 
            {
              CodePseudoNode RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		CodeNode code = (CodeNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = code; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("CodePseudocode",3, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CommentOptional ::= 
            {
              Object RESULT =null;

              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("CommentOptional",21, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CommentOptional ::= TCOMMENT 
            {
              Object RESULT =null;

              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("CommentOptional",21, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LabelOptional ::= 
            {
              LabelNode RESULT =null;
		 RESULT = null; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("LabelOptional",2, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LabelOptional ::= TLABEL 
            {
              LabelNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 RESULT = new LabelNode(name,parser.lastLine,parser.lastColumn); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("LabelOptional",2, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instruction ::= LabelOptional CodePseudocode CommentOptional 
            {
              InstructionNode RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		LabelNode label = (LabelNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int codepseudoleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).left;
		int codepseudoright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).right;
		CodePseudoNode codepseudo = (CodePseudoNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).value;
		 if (label == null && codepseudo == null) RESULT = null;
       else RESULT = new InstructionNode(label,codepseudo); 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= Statement error 
            {
              Statement RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).value;
		 parser.errorCount++; RESULT = stmt; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Statement ::= Statement SEPARATOR_EOL Instruction 
            {
              Statement RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		InstructionNode instr = (InstructionNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 if (instr != null) stmt.addElement(instr); RESULT = stmt; 
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-2)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Statement ::= Instruction 
            {
              Statement RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()).right;
		InstructionNode instr = (InstructionNode)((java_cup.runtime.Symbol) CUP$parser8080$stack.peek()).value;
		 
       Statement stmt = new Statement();
       if (instr != null) stmt.addElement(instr);
       RESULT = stmt;
    
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          return CUP$parser8080$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).right;
		Statement start_val = (Statement)((java_cup.runtime.Symbol) CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)).value;
		RESULT = start_val;
              CUP$parser8080$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser8080$stack.elementAt(CUP$parser8080$top-1)), ((java_cup.runtime.Symbol)CUP$parser8080$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser8080$parser.done_parsing();
          return CUP$parser8080$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

