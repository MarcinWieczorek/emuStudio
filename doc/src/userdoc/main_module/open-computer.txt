[[XO]]
== Opening a computer

The first action which emuStudio does is loading a computer to be emulated. Virtual computers are
described in abstract schemas, which are stored in configuration files (see <<XIID,Directory structure>> section). 

Computers can be loaded either from <<XC,command line>> or manually in GUI (by default). The
open dialog is the first thing which appears to a user.

image::main_module/images/open-dialog.png["Open a computer" dialog]

Left part contains a control panel and a list of all available virtual computers. When a user
clicks at a computer, it's abstract schema is displayed on the right. Double-clicking or clicking
on the `Open` button loads selected computer.

[[XOM]]
=== Managing virtual computers

image::main_module/images/open-dialog-panel.png[Managing virtual computers]

- *A*: Adds new computer. The abstract schema editor will be opened.
- *B*: Deletes selected computer. Be aware of what you are doing - the action cannot be undone.
- *C*: Edits selected computer. The abstract schema editor will be opened.
- *D*: Saves the displayed abstract schema into image file.

[[XOA]]
=== Abstract schema editor

Abstract schema editor is a graphical editor for drawing abstract schemas of virtual computers
for emulation in emuStudio. Users pick plug-ins which appear as "boxes" or elements on the screen.
Then using connection lines those elements can be connected together to express a relation (that they
can "see" each other).

When the abstract schema is completed, user must save it and then it will appear in the
<<XOM,Open a computer>> dialog.

image::main_module/images/schema-editor.png[Abstract schema editor]

Description of the control panel follows.

image::main_module/images/schema-editor-panel.png[Control panel in the abstract schema editor]

- *A*: Save the virtual computer.
- *B*: Select a compiler.
- *C*: Select a CPU.
- *D*: Select a memory.
- *E*: Select a device.
- *F*: Use a connection line. The line is bidirectional by default.
- *G*: Set or unset the connection line to be bidirectional. If the line is not bidirectional,
       the source direction is the first clicked element and the target direction is the second
       clicked element.
- *H*: Remove an element from the schema.
- *I*: This drop-down list is used for selecting specific plug-in (element) in the abstract schema.
       See icons `B`, `C`, `D`, and `E`. Those names are just file names of plug-ins located in
       corresponding directory (see <<XIID,Directory structure>> section).
- *J*: Use / do not use a grid in the editor. Elements are "snapped" to the grid if it is used
       and it's easier to draw the schema which looks good. The slider on the right then controls
       density of the grid. The density is saved in the configuration file of the edited computer.

NOTE: Virtual computers in emuStudio are following von-Neumann model of computers. It means that each
      computer must have a CPU, and memory. Optionally one or more devices, and optionally a
      compiler.footnote:[The compiler is not really a computer component, but since it also can be
      interconnected to other components, it is part of the abstract schema.]

==== Connection lines

Connection line represents virtual "connection" between computer components. For the abstract schema
it's not important how the connection is realized. It's safe to say that the connection is similar
as if we say that a component "sees" the other component, in the direction of the arrow:

image::main_module/images/connection.png[CPU "sees" operating memory, but not vice-versa]

In the previous image, a CPU "sees" the memory, but not vice-versa. It means, CPU can read/write
from/to memory, but memory is not seeing it, it can just answer to CPU requests. This connection makes
sense in real-world computers.

Drawing connection lines is very easy. Connection line always connects exactly two elements in the
schema. At first, user must click on already existing element in the schema. It's just a click, not
a drag.

Then a grey temporary line is being drawn having its end at the mouse position and moving with the
mouse move. If the element is not really close, user can make a "path" by clicking somewhere in the
schema. At those locations fixed-points are created.

When a user clicks at the second element, the temporary line disappears, and real connection line is
created.

User can find the fixed-points later and move them by dragging. They can be removed by clicking at
them with right button of the mouse.




