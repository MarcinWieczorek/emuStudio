/*
 * Parser (syntactic analyzer for SSEM assembler)
 *
 * Copyright (C) 2016 Peter Jakubčo
 * KISS, YAGNI, DRY
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 */
package net.sf.emustudio.ssem.assembler;

import emulib.plugins.compiler.Message;
import emulib.plugins.compiler.Token;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import net.sf.emustudio.ssem.assembler.tree.Instruction;
import net.sf.emustudio.ssem.assembler.tree.Program;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

parser code {:
    private LexerImpl lexer;
    private boolean syntaxErrors;
    private CompilerImpl compiler;

    public ParserImpl(LexerImpl lex, ComplexSymbolFactory csf, CompilerImpl compiler) {
        super(lex, csf);
        lexer = Objects.requireNonNull(lex);
        this.compiler = Objects.requireNonNull(compiler);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        done_parsing();
        report_error(message, info);
        throw new Exception("Can\'t recover from previous error(s)");
    }

    @Override
    public void report_error(String messageText, Object current) {
        syntaxErrors = true;

        Token token = (Token)current;

        messageText += ":" + token.getErrorString() + " ('" + token.getText() + "')";

        List expectedTokenIds = expected_token_ids()
            .stream()
            .map(id -> symbl_name_from_id(id.intValue()))
            .collect(Collectors.toList());

        if (!expectedTokenIds.isEmpty()) {
            messageText += "\nExpected tokens: " + expectedTokenIds;
        }

        Message message = new Message(
            Message.MessageType.TYPE_ERROR, messageText, token.getLine()+1, token.getColumn(), null, 0
        );

        if (compiler != null) {
            compiler.notifyOnMessage(message);
        } else {
            System.err.println(message.getFormattedMessage());
        }
    }

    public boolean hasSyntaxErrors() {
        return syntaxErrors;
    }

:};

terminal JMP, JRP, LDN, STO, SUB, CMP, STP, SEPARATOR_EOL, TCOMMENT, ERROR_UNKNOWN_TOKEN;
terminal Byte NUMBER;

non terminal Program Program;
non terminal Instruction Statement;
non terminal Instruction Instruction;
non terminal Comment;

start with Program;

Program ::= Statement:s Program:p                       {: if (s != null) p.statement(s); RESULT = p;  :}
    | /* empty program */                               {: RESULT = new Program(); :}
    ;

Statement ::= Instruction:i Comment SEPARATOR_EOL       {: RESULT = i; :}
    | SEPARATOR_EOL
    ;

Instruction ::= JMP NUMBER:address                      {: RESULT = Instruction.jmp(address); :}
    | JRP NUMBER:address                                {: RESULT = Instruction.jrp(address); :}
    | LDN NUMBER:address                                {: RESULT = Instruction.ldn(address); :}
    | STO NUMBER:address                                {: RESULT = Instruction.sto(address); :}
    | SUB NUMBER:address                                {: RESULT = Instruction.sub(address); :}
    | CMP                                               {: RESULT = Instruction.cmp(); :}
    | STP                                               {: RESULT = Instruction.stp(); :}
    | error
    ;

Comment ::= TCOMMENT
    | /* no comment*/
    ;

