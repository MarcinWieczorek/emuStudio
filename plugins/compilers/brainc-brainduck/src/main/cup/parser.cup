/*
 * Parser (syntactic analyzer for Brainfuck)
 *
 * Copyright (C) 2009-2014 Peter Jakubƒço
 * KISS, YAGNI, DRY
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package net.sf.emustudio.brainduck.brainc.impl;

import java_cup.runtime.Symbol;
import emulib.plugins.compiler.Token;
import net.sf.emustudio.brainduck.brainc.tree.*;
import emulib.plugins.compiler.Message;
import emulib.plugins.compiler.Message.MessageType;

init with {: errorCount = 0; :}
parser code {:
    private CompilerImpl compiler;
    public Token lastToken;
    public int errorCount = 0;

    public void setCompiler(CompilerImpl compiler) {
        this.compiler = compiler;
    }

    public void syntax_error(Symbol current) {
        errorCount++;
        report_error("Syntax error: ",current);
    }

    public void unrecovered_syntax_error(Symbol current) {
        errorCount++;
        report_error("Fatal syntax error: ", current);
        done_parsing();
    }

    public void report_error(String messageText, Symbol current) {
        Token token = (Token)current;
        Message message = new Message(MessageType.TYPE_ERROR, messageText + token.getErrorString() + " ('"+token.getText()+"')",
                token.getLine()+1, token.getColumn(), null, errorCount);
        if (compiler != null) {
            compiler.notifyOnMessage(message);
        } else {
            System.out.println(message.getFormattedMessage());
        }
    }
:}

terminal HALT,INC,DEC,INCV,DECV,PRINT,LOAD,LOOP,ENDL;
terminal TCOMMENT;

non terminal Program Program;
non terminal Instruction Statement;

start with Program;

Program ::= Statement:statement
            {:
                Program program = new Program();
                if (statement != null) {
                    program.add(statement);
                }
                RESULT = program;
            :} |
            Program:program Statement:statement
            {:
                if (statement != null) {
                    program.add(statement);
                }
                RESULT = program;
            :};

Statement ::=
            INC   {: RESULT = new Instruction(Instruction.INC);   :} |
            DEC   {: RESULT = new Instruction(Instruction.DEC);   :} |
            INCV  {: RESULT = new Instruction(Instruction.INCV);  :} |
            DECV  {: RESULT = new Instruction(Instruction.DECV);  :} |
            PRINT {: RESULT = new Instruction(Instruction.PRINT); :} |
            LOAD  {: RESULT = new Instruction(Instruction.LOAD);  :} |
            LOOP  {: RESULT = new Instruction(Instruction.LOOP);  :} |
            ENDL  {: RESULT = new Instruction(Instruction.ENDL);  :} |
            HALT  {: RESULT = new Instruction(Instruction.HALT);  :} |
            TCOMMENT {: RESULT = null; :}
            ;

