/* The following code was generated by JFlex 1.4.3 on 31.10.2011 17:53 */

/*
 * Lexer8080.flex
 *
 * Lexical analyser for 8080 compiler
 *
 * KEEP IT SIMPLE STUPID
 * sometimes just: YOU AREN'T GONNA NEED IT
 *
 * Copyright (C) 2008-2010 Peter Jakubco <pjakubco at gmail.com>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package as_8080.impl;

import emuLib8.plugins.compiler.ILexer;
import emuLib8.plugins.compiler.IToken;
import java.io.IOException;
import java.io.Reader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31.10.2011 17:53 from the specification file
 * <tt>lexer.flex</tt>
 */
public class Lexer8080 implements java_cup.runtime.Scanner, ILexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\1\0\1\4\1\2\22\0\1\4\3\0\1\43"+
    "\2\0\1\15\1\44\1\45\1\51\1\47\1\46\1\50\1\0\1\52"+
    "\2\13\6\7\2\5\1\17\1\1\1\0\1\53\1\0\2\16\1\27"+
    "\1\14\1\22\1\6\1\41\1\11\1\36\1\12\1\24\1\37\1\16"+
    "\1\34\1\23\1\25\1\30\1\31\1\10\1\26\1\20\1\21\1\35"+
    "\1\32\1\42\1\33\1\16\1\40\4\0\1\16\1\0\1\27\1\14"+
    "\1\22\1\6\1\41\1\11\1\36\1\12\1\24\1\37\1\16\1\34"+
    "\1\23\1\25\1\30\1\31\1\10\1\26\1\20\1\21\1\35\1\32"+
    "\1\42\1\33\1\16\1\40\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\5"+
    "\1\7\1\10\1\5\1\11\1\1\1\7\1\12\1\13"+
    "\3\7\1\14\3\7\1\15\1\7\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\5"+
    "\1\0\1\30\1\31\1\32\1\33\1\7\1\34\1\7"+
    "\1\35\1\36\1\7\1\37\1\40\3\7\1\41\2\7"+
    "\1\42\1\43\2\7\1\44\1\45\3\7\1\46\1\47"+
    "\2\7\1\50\1\51\3\7\1\52\1\7\1\53\4\7"+
    "\1\54\14\7\1\55\1\56\1\7\1\57\1\60\1\7"+
    "\1\61\1\7\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\7\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\7"+
    "\1\106\1\107\1\110\1\7\1\111\1\112\1\113\1\7"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
    "\1\144\1\145\1\7\1\146\3\7\1\147\1\150\1\151"+
    "\1\152\1\7\1\153\1\154\1\155\1\156\1\157\1\160"+
    "\1\161\1\7\1\162\1\163\1\164\1\165\2\7\1\166"+
    "\1\167\1\170\1\171\1\172\1\173\1\174\1\7\1\175"+
    "\1\7\1\176\1\7\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\54\0\204\0\260\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\u0160\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u03f4\0\u0420\0\54\0\54\0\54\0\54\0\54"+
    "\0\54\0\54\0\54\0\54\0\u044c\0\u044c\0\54\0\u0160"+
    "\0\54\0\u0160\0\u0478\0\u0160\0\u04a4\0\u0160\0\54\0\u04d0"+
    "\0\u044c\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604"+
    "\0\u0160\0\u0630\0\u065c\0\u0688\0\u06b4\0\u0160\0\u06e0\0\u070c"+
    "\0\u0738\0\u0160\0\u0764\0\u0790\0\u07bc\0\u0160\0\u0160\0\u07e8"+
    "\0\u0814\0\u0840\0\u086c\0\u0898\0\u0160\0\u08c4\0\u08f0\0\u091c"+
    "\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c"+
    "\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0160\0\u0bb0"+
    "\0\u0bdc\0\u0c08\0\u0160\0\u0c34\0\u0160\0\u0c60\0\u0160\0\u0160"+
    "\0\u0160\0\u0160\0\u0160\0\54\0\u0160\0\u0c8c\0\u0160\0\u0160"+
    "\0\u0160\0\u0cb8\0\u0ce4\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160"+
    "\0\u0160\0\u0160\0\u0160\0\u0d10\0\u0160\0\u0160\0\u0160\0\u0d3c"+
    "\0\u0160\0\u0160\0\u0160\0\u0d68\0\u0160\0\u0160\0\u0160\0\u0160"+
    "\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160"+
    "\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160"+
    "\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0d94\0\u0160"+
    "\0\u0dc0\0\u0dec\0\u0e18\0\u0160\0\u0160\0\u0160\0\u0e44\0\u0e70"+
    "\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0e9c"+
    "\0\u0160\0\u0160\0\u0160\0\u0160\0\u0ec8\0\u0ef4\0\u0160\0\u0160"+
    "\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0f20\0\u0160\0\u0f4c"+
    "\0\u0160\0\u0f78\0\u0160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\12\1\13\1\14\1\15\1\16\1\12\1\2\1\17"+
    "\1\12\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\12\1\30\1\31\2\12\1\32\1\12\1\33"+
    "\1\12\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\54\0\2\3\2\0\50\3\2\0\1\4"+
    "\55\0\1\6\54\0\1\7\1\45\1\7\1\0\1\46"+
    "\1\47\1\7\1\46\5\0\1\46\4\0\1\46\11\0"+
    "\1\46\17\0\7\12\1\50\1\0\1\12\1\51\1\52"+
    "\1\12\1\53\1\12\1\54\2\12\1\55\12\12\1\56"+
    "\16\0\1\7\1\45\1\11\1\57\1\46\1\47\1\11"+
    "\1\46\5\0\1\46\4\0\1\46\1\57\10\0\1\46"+
    "\17\0\10\12\1\0\1\12\1\51\23\12\16\0\10\12"+
    "\1\0\1\12\1\51\14\12\1\60\6\12\16\0\1\7"+
    "\1\45\1\11\1\57\1\46\1\47\1\14\1\61\5\0"+
    "\1\46\4\0\1\46\1\57\10\0\1\46\12\0\2\62"+
    "\2\0\11\62\1\0\36\62\5\0\5\12\1\63\1\12"+
    "\1\64\1\0\1\12\1\51\1\12\1\65\7\12\1\66"+
    "\3\12\1\67\3\12\1\70\1\12\16\0\10\12\1\0"+
    "\1\12\1\51\2\12\1\71\1\72\1\12\1\73\1\12"+
    "\1\74\1\12\1\75\6\12\1\76\2\12\16\0\10\12"+
    "\1\0\1\12\1\51\7\12\1\77\1\100\1\12\1\101"+
    "\10\12\16\0\4\12\1\102\3\12\1\0\1\12\1\51"+
    "\5\12\1\103\15\12\16\0\10\12\1\0\1\12\1\51"+
    "\10\12\1\104\12\12\16\0\10\12\1\0\1\12\1\51"+
    "\1\105\1\12\1\106\1\107\1\12\1\110\1\111\1\112"+
    "\1\12\1\113\2\12\1\114\3\12\1\115\1\116\1\12"+
    "\16\0\1\12\1\117\6\12\1\0\1\12\1\51\2\12"+
    "\1\120\2\12\1\121\15\12\16\0\10\12\1\0\1\12"+
    "\1\51\6\12\1\122\6\12\1\123\5\12\16\0\10\12"+
    "\1\0\1\12\1\51\1\124\1\12\1\125\5\12\1\126"+
    "\4\12\1\127\5\12\16\0\10\12\1\0\1\12\1\51"+
    "\1\12\1\130\1\131\3\12\1\132\1\12\1\133\12\12"+
    "\16\0\1\12\1\134\3\12\1\135\2\12\1\0\1\12"+
    "\1\51\13\12\1\136\7\12\16\0\10\12\1\0\1\12"+
    "\1\51\2\12\1\137\1\140\1\12\1\141\3\12\1\142"+
    "\6\12\1\143\2\12\16\0\3\12\1\144\4\12\1\0"+
    "\1\12\1\51\4\12\1\145\1\146\15\12\16\0\3\46"+
    "\1\0\1\46\1\47\2\46\5\0\1\46\4\0\1\46"+
    "\11\0\1\46\17\0\10\12\1\0\1\12\1\51\6\12"+
    "\1\147\4\12\1\150\7\12\16\0\1\12\1\151\6\12"+
    "\1\0\1\12\1\51\7\12\1\152\13\12\16\0\10\12"+
    "\1\0\1\12\1\51\1\12\1\153\21\12\11\0\2\62"+
    "\2\0\11\62\1\154\36\62\5\0\10\12\1\0\1\12"+
    "\1\51\6\12\1\155\5\12\1\156\6\12\16\0\7\12"+
    "\1\157\1\0\1\12\1\51\4\12\1\160\16\12\16\0"+
    "\10\12\1\0\1\12\1\51\2\12\1\161\4\12\1\162"+
    "\13\12\16\0\5\12\1\163\2\12\1\0\1\12\1\51"+
    "\23\12\16\0\7\12\1\164\1\0\1\12\1\51\4\12"+
    "\1\165\16\12\16\0\10\12\1\0\1\12\1\51\1\12"+
    "\1\166\21\12\16\0\10\12\1\0\1\12\1\51\2\12"+
    "\1\167\4\12\1\170\1\12\1\171\11\12\16\0\10\12"+
    "\1\0\1\12\1\51\2\12\1\172\15\12\1\173\2\12"+
    "\16\0\10\12\1\0\1\12\1\51\14\12\1\174\6\12"+
    "\16\0\10\12\1\0\1\12\1\51\4\12\1\175\3\12"+
    "\1\176\10\12\1\177\1\12\16\0\10\12\1\0\1\12"+
    "\1\51\2\12\1\200\20\12\16\0\1\12\1\201\6\12"+
    "\1\0\1\12\1\51\12\12\1\202\10\12\16\0\10\12"+
    "\1\0\1\12\1\51\4\12\1\203\16\12\16\0\10\12"+
    "\1\0\1\12\1\51\2\12\1\204\3\12\1\205\4\12"+
    "\1\206\7\12\16\0\10\12\1\0\1\12\1\51\1\12"+
    "\1\207\7\12\1\210\11\12\16\0\10\12\1\0\1\12"+
    "\1\51\1\12\1\211\21\12\16\0\10\12\1\0\1\12"+
    "\1\51\2\12\1\212\15\12\1\213\2\12\16\0\10\12"+
    "\1\0\1\12\1\51\2\12\1\214\20\12\16\0\10\12"+
    "\1\0\1\12\1\51\6\12\1\215\5\12\1\216\6\12"+
    "\16\0\10\12\1\0\1\12\1\51\10\12\1\217\10\12"+
    "\1\220\1\12\16\0\10\12\1\0\1\12\1\51\2\12"+
    "\1\221\20\12\16\0\10\12\1\0\1\12\1\51\1\12"+
    "\1\222\21\12\16\0\1\12\1\223\6\12\1\0\1\12"+
    "\1\51\2\12\1\224\1\12\1\225\16\12\16\0\10\12"+
    "\1\0\1\12\1\51\4\12\1\226\16\12\16\0\1\12"+
    "\1\227\6\12\1\0\1\12\1\51\4\12\1\230\2\12"+
    "\1\231\13\12\16\0\10\12\1\0\1\12\1\51\4\12"+
    "\1\232\2\12\1\233\6\12\1\234\4\12\16\0\10\12"+
    "\1\0\1\12\1\51\1\12\1\235\21\12\16\0\10\12"+
    "\1\0\1\12\1\51\22\12\1\236\16\0\5\12\1\237"+
    "\2\12\1\0\1\12\1\51\23\12\16\0\10\12\1\0"+
    "\1\12\1\51\11\12\1\240\11\12\16\0\10\12\1\0"+
    "\1\12\1\51\1\241\22\12\16\0\5\12\1\242\2\12"+
    "\1\0\1\12\1\51\23\12\16\0\5\12\1\243\2\12"+
    "\1\0\1\12\1\51\23\12\16\0\10\12\1\0\1\12"+
    "\1\51\4\12\1\244\2\12\1\245\13\12\16\0\10\12"+
    "\1\0\1\12\1\51\6\12\1\246\14\12\16\0\10\12"+
    "\1\0\1\12\1\51\7\12\1\247\13\12\16\0\10\12"+
    "\1\0\1\12\1\51\14\12\1\250\6\12\16\0\10\12"+
    "\1\0\1\12\1\51\4\12\1\251\16\12\16\0\10\12"+
    "\1\0\1\12\1\51\11\12\1\252\11\12\16\0\10\12"+
    "\1\0\1\12\1\51\2\12\1\253\15\12\1\254\2\12"+
    "\16\0\10\12\1\0\1\12\1\51\10\12\1\255\10\12"+
    "\1\256\1\12\16\0\10\12\1\0\1\12\1\51\15\12"+
    "\1\257\5\12\16\0\1\12\1\260\6\12\1\0\1\12"+
    "\1\51\23\12\16\0\1\12\1\261\6\12\1\0\1\12"+
    "\1\51\23\12\16\0\10\12\1\0\1\12\1\51\13\12"+
    "\1\262\7\12\16\0\10\12\1\0\1\12\1\51\14\12"+
    "\1\263\6\12\16\0\10\12\1\0\1\12\1\51\14\12"+
    "\1\264\6\12\16\0\10\12\1\0\1\12\1\51\6\12"+
    "\1\265\14\12\16\0\10\12\1\0\1\12\1\51\14\12"+
    "\1\266\6\12\16\0\10\12\1\0\1\12\1\51\14\12"+
    "\1\267\6\12\16\0\5\12\1\270\2\12\1\0\1\12"+
    "\1\51\23\12\16\0\10\12\1\0\1\12\1\51\14\12"+
    "\1\271\6\12\16\0\10\12\1\0\1\12\1\51\16\12"+
    "\1\272\4\12\16\0\10\12\1\0\1\12\1\51\13\12"+
    "\1\273\7\12\16\0\1\12\1\274\6\12\1\0\1\12"+
    "\1\51\23\12\16\0\10\12\1\0\1\12\1\51\3\12"+
    "\1\275\1\276\16\12\16\0\10\12\1\0\1\12\1\51"+
    "\10\12\1\277\12\12\16\0\10\12\1\0\1\12\1\51"+
    "\15\12\1\300\5\12\16\0\4\12\1\301\3\12\1\0"+
    "\1\12\1\51\23\12\16\0\1\12\1\302\6\12\1\0"+
    "\1\12\1\51\23\12\16\0\10\12\1\0\1\12\1\51"+
    "\21\12\1\303\1\12\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4004];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\27\1\11\11\1\1\1\0"+
    "\1\11\1\1\1\11\5\1\1\11\74\1\1\11\127\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int lastToken;

    @Override
    public Token8080 getSymbol() throws IOException {
        return next_token();
    }

    @Override
    public void reset(Reader in, int yyline, int yychar, int yycolumn) {
        yyreset(in);
        this.yyline = yyline;
        this.yychar = yychar;
        this.yycolumn = yycolumn;
    }

    @Override
    public void reset() {
        this.yyline = 0;
        this.yychar = 0;
        this.yycolumn = 0;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer8080(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer8080(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token8080 next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 89: 
          { lastToken = Token8080.RESERVED_RET;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 128: break;
        case 26: 
          { lastToken = Token8080.TLABEL;
    String text = yytext();
    Object val = text.substring(0,text.length()-1).toUpperCase();
    return (new Token8080(lastToken,IToken.LABEL,text,val,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 129: break;
        case 71: 
          { lastToken = Token8080.RESERVED_CPO;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 130: break;
        case 4: 
          { /* ignore white spaces */
          }
        case 131: break;
        case 127: 
          { lastToken = Token8080.PREPROCESSOR_INCLUDE;
    String text = yytext();
    return (new Token8080(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 132: break;
        case 96: 
          { lastToken = Token8080.RESERVED_ANA;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 133: break;
        case 68: 
          { lastToken = Token8080.RESERVED_CNC;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 134: break;
        case 24: 
          { String text = yytext();
    int num=0;
    int tokenType=0;
    text = text.replaceFirst("[hH]","");
    try {
        num = Integer.parseInt(text,16);
        if (num > 65535) {
            lastToken = Token8080.ERROR_DECIMAL_SIZE;
            tokenType = IToken.ERROR;
        } else if (num > 255) {
            lastToken = Token8080.LITERAL_DECIMAL_16BIT;
            tokenType = IToken.LITERAL;
        } else {
            lastToken = Token8080.LITERAL_DECIMAL_8BIT;
            tokenType = IToken.LITERAL;
        }
    } catch (NumberFormatException e) {
        lastToken = Token8080.ERROR_DECIMAL_SIZE;
        tokenType = IToken.ERROR;
    }
    return (new Token8080(lastToken,tokenType,yytext(),(Object)num,yyline,
        yycolumn,yychar,yychar+yytext().length(),true));
          }
        case 135: break;
        case 45: 
          { lastToken = Token8080.RESERVED_JC;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 136: break;
        case 64: 
          { lastToken = Token8080.PREPROCESSOR_SET;
    String text = yytext();
    return (new Token8080(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 137: break;
        case 74: 
          { lastToken = Token8080.RESERVED_MOV;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 138: break;
        case 42: 
          { lastToken = Token8080.RESERVED_RP;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 139: break;
        case 33: 
          { lastToken = Token8080.REGISTERS_SP;
    String text = yytext();
    return (new Token8080(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 140: break;
        case 77: 
          { lastToken = Token8080.RESERVED_INX;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 141: break;
        case 104: 
          { lastToken = Token8080.RESERVED_XRA;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 142: break;
        case 79: 
          { lastToken = Token8080.RESERVED_NOP;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 143: break;
        case 50: 
          { lastToken = Token8080.RESERVED_DCR;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 144: break;
        case 65: 
          { lastToken = Token8080.RESERVED_CMC;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 145: break;
        case 56: 
          { lastToken = Token8080.OPERATOR_SHR;
    String text = yytext();
    return (new Token8080(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 146: break;
        case 59: 
          { lastToken = Token8080.RESERVED_SBI;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 147: break;
        case 36: 
          { lastToken = Token8080.RESERVED_CP;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 148: break;
        case 80: 
          { lastToken = Token8080.RESERVED_RST;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 149: break;
        case 97: 
          { lastToken = Token8080.RESERVED_ORI;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 150: break;
        case 105: 
          { lastToken = Token8080.OPERATOR_XOR;
    String text = yytext();
    return (new Token8080(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 151: break;
        case 58: 
          { lastToken = Token8080.RESERVED_SBB;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 152: break;
        case 72: 
          { lastToken = Token8080.RESERVED_CPE;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 153: break;
        case 61: 
          { lastToken = Token8080.RESERVED_STA;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 154: break;
        case 22: 
          { lastToken = Token8080.OPERATOR_DIVIDE;
    String text = yytext();
    return (new Token8080(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 155: break;
        case 41: 
          { lastToken = Token8080.RESERVED_RM;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 156: break;
        case 124: 
          { lastToken = Token8080.PREPROCESSOR_ENDM;
    String text = yytext();
    return (new Token8080(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 157: break;
        case 114: 
          { lastToken = Token8080.RESERVED_SHLD;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 158: break;
        case 123: 
          { lastToken = Token8080.RESERVED_LHLD;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 159: break;
        case 3: 
          { lastToken = Token8080.SEPARATOR_EOL;
    String text = yytext();
    return (new Token8080(lastToken,IToken.SEPARATOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 160: break;
        case 84: 
          { lastToken = Token8080.RESERVED_RAR;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 161: break;
        case 35: 
          { lastToken = Token8080.RESERVED_CM;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 162: break;
        case 70: 
          { lastToken = Token8080.RESERVED_CPI;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 163: break;
        case 92: 
          { lastToken = Token8080.RESERVED_ADI;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 164: break;
        case 63: 
          { lastToken = Token8080.RESERVED_SUI;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 165: break;
        case 23: 
          { lastToken = Token8080.OPERATOR_EQUAL;
    String text = yytext();
    return (new Token8080(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 166: break;
        case 95: 
          { lastToken = Token8080.RESERVED_ANI;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 167: break;
        case 39: 
          { lastToken = Token8080.RESERVED_IN;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 168: break;
        case 101: 
          { lastToken = Token8080.REGISTERS_PSW;
    String text = yytext();
    return (new Token8080(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 169: break;
        case 32: 
          { lastToken = Token8080.ERROR_UNCLOSED_STRING;
    String text = yytext();
    return (new Token8080(lastToken,IToken.ERROR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 170: break;
        case 110: 
          { lastToken = Token8080.RESERVED_JNZ;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 171: break;
        case 6: 
          { lastToken = Token8080.REGISTERS_D;
    String text = yytext();
    return (new Token8080(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 172: break;
        case 86: 
          { lastToken = Token8080.RESERVED_RPO;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 173: break;
        case 62: 
          { lastToken = Token8080.RESERVED_SUB;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 174: break;
        case 122: 
          { lastToken = Token8080.RESERVED_LDAX;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 175: break;
        case 29: 
          { lastToken = Token8080.PREPROCESSOR_DW;
    String text = yytext();
    return (new Token8080(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 176: break;
        case 81: 
          { lastToken = Token8080.RESERVED_RNC;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 177: break;
        case 76: 
          { lastToken = Token8080.RESERVED_INR;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 178: break;
        case 103: 
          { lastToken = Token8080.RESERVED_XRI;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 179: break;
        case 102: 
          { lastToken = Token8080.RESERVED_POP;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 180: break;
        case 40: 
          { lastToken = Token8080.RESERVED_RC;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 181: break;
        case 57: 
          { lastToken = Token8080.OPERATOR_SHL;
    String text = yytext();
    return (new Token8080(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 182: break;
        case 15: 
          { lastToken = Token8080.PREPROCESSOR_ADDR;
    String text = yytext();
    return (new Token8080(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 183: break;
        case 2: 
          { lastToken = Token8080.TCOMMENT;
    String text = yytext();
    return (new Token8080(lastToken,IToken.COMMENT,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 184: break;
        case 8: 
          { lastToken = Token8080.REGISTERS_H;
    String text = yytext();
    return (new Token8080(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 185: break;
        case 99: 
          { lastToken = Token8080.PREPROCESSOR_ORG;
    String text = yytext();
    return (new Token8080(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 186: break;
        case 27: 
          { lastToken = Token8080.PREPROCESSOR_DS;
    String text = yytext();
    return (new Token8080(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 187: break;
        case 115: 
          { lastToken = Token8080.RESERVED_STAX;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 188: break;
        case 25: 
          { lastToken = Token8080.PREPROCESSOR_DB;
    String text = yytext();
    return (new Token8080(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 189: break;
        case 34: 
          { lastToken = Token8080.RESERVED_CC;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 190: break;
        case 69: 
          { lastToken = Token8080.RESERVED_CNZ;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 191: break;
        case 12: 
          { lastToken = Token8080.REGISTERS_A;
    String text = yytext();
    return (new Token8080(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 192: break;
        case 83: 
          { lastToken = Token8080.RESERVED_RRC;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 193: break;
        case 94: 
          { lastToken = Token8080.OPERATOR_AND;
    String text = yytext();
    return (new Token8080(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 194: break;
        case 5: 
          { String text = yytext();
    text = text.replaceFirst("[dD]","");
    int num=0;
    int tokenType = 0;
    try {
        num = Integer.parseInt(text,10);
        if (num > 65535) { // || num < -32768) {
            lastToken = Token8080.ERROR_DECIMAL_SIZE;
            tokenType = IToken.ERROR;
        } else if (num > 255) { // || num < -128) {
            lastToken = Token8080.LITERAL_DECIMAL_16BIT;
            tokenType = IToken.LITERAL;
        } else {
            lastToken = Token8080.LITERAL_DECIMAL_8BIT;
            tokenType = IToken.LITERAL;
        }
    } catch (NumberFormatException e) {
        lastToken = Token8080.ERROR_DECIMAL_SIZE;
        tokenType = IToken.LITERAL;
    }
    return (new Token8080(lastToken,tokenType,yytext(),(Object)num,yyline,
        yycolumn,yychar,yychar+yytext().length(),true));
          }
        case 195: break;
        case 93: 
          { lastToken = Token8080.RESERVED_ACI;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 196: break;
        case 48: 
          { lastToken = Token8080.RESERVED_JZ;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 197: break;
        case 87: 
          { lastToken = Token8080.RESERVED_RPE;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 198: break;
        case 52: 
          { lastToken = Token8080.RESERVED_DAD;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 199: break;
        case 13: 
          { lastToken = Token8080.REGISTERS_L;
    String text = yytext();
    return (new Token8080(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 200: break;
        case 85: 
          { lastToken = Token8080.RESERVED_RAL;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 201: break;
        case 91: 
          { lastToken = Token8080.RESERVED_ADC;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 202: break;
        case 14: 
          { lastToken = Token8080.REGISTERS_E;
    String text = yytext();
    return (new Token8080(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 203: break;
        case 73: 
          { lastToken = Token8080.OPERATOR_MOD;
    String text = yytext();
    return (new Token8080(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 204: break;
        case 30: 
          { String text = yytext();
    int num=0;
    int tokenType=0;
    text = text.replaceFirst("[oOqQ]","");
    try {

        num = Integer.parseInt(text,8);
        if (num > 65535) { // || num < -32768) {
            lastToken = Token8080.ERROR_DECIMAL_SIZE;
            tokenType = IToken.ERROR;
        } else if (num > 255) { // || num < -128) {
            lastToken = Token8080.LITERAL_DECIMAL_16BIT;
            tokenType = IToken.LITERAL;
        } else {
            lastToken = Token8080.LITERAL_DECIMAL_8BIT;
            tokenType = IToken.LITERAL;
        }
    } catch (NumberFormatException e) {
        lastToken = Token8080.ERROR_DECIMAL_SIZE;
        tokenType = IToken.ERROR;
    }
    return (new Token8080(lastToken,tokenType,yytext(),(Object)num,yyline,
        yycolumn,yychar,yychar+yytext().length(),true));
          }
        case 205: break;
        case 19: 
          { lastToken = Token8080.OPERATOR_ADD;
    String text = yytext();
    return (new Token8080(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 206: break;
        case 1: 
          { lastToken = Token8080.ERROR_UNKNOWN_TOKEN;
    String text = yytext();
    return (new Token8080(lastToken,IToken.ERROR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 207: break;
        case 118: 
          { lastToken = Token8080.RESERVED_PCHL;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 208: break;
        case 66: 
          { lastToken = Token8080.RESERVED_CMA;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 209: break;
        case 106: 
          { lastToken = Token8080.RESERVED_LDA;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 210: break;
        case 100: 
          { lastToken = Token8080.RESERVED_OUT;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 211: break;
        case 125: 
          { lastToken = Token8080.PREPROCESSOR_MACRO;
    String text = yytext();
    return (new Token8080(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 212: break;
        case 54: 
          { lastToken = Token8080.RESERVED_HLT;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 213: break;
        case 53: 
          { lastToken = Token8080.RESERVED_DAA;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 214: break;
        case 88: 
          { lastToken = Token8080.RESERVED_RLC;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 215: break;
        case 18: 
          { lastToken = Token8080.SEPARATOR_COMMA;
    String text = yytext();
    return (new Token8080(lastToken,IToken.SEPARATOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 216: break;
        case 47: 
          { lastToken = Token8080.RESERVED_JP;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 217: break;
        case 121: 
          { lastToken = Token8080.RESERVED_XCHG;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 218: break;
        case 119: 
          { lastToken = Token8080.RESERVED_PUSH;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 219: break;
        case 38: 
          { lastToken = Token8080.PREPROCESSOR_IF;
    String text = yytext();
    return (new Token8080(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 220: break;
        case 9: 
          { lastToken = Token8080.REGISTERS_B;
    String text = yytext();
    return (new Token8080(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 221: break;
        case 49: 
          { lastToken = Token8080.RESERVED_EI;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 222: break;
        case 108: 
          { lastToken = Token8080.RESERVED_JMP;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 223: break;
        case 17: 
          { lastToken = Token8080.SEPARATOR_RPAR;
    String text = yytext();
    return (new Token8080(lastToken,IToken.SEPARATOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 224: break;
        case 109: 
          { lastToken = Token8080.RESERVED_JNC;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 225: break;
        case 126: 
          { lastToken = Token8080.PREPROCESSOR_ENDIF;
    String text = yytext();
    return (new Token8080(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 226: break;
        case 117: 
          { lastToken = Token8080.RESERVED_CALL;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 227: break;
        case 20: 
          { lastToken = Token8080.OPERATOR_SUBTRACT;
    String text = yytext();
    return (new Token8080(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 228: break;
        case 113: 
          { lastToken = Token8080.PREPROCESSOR_EQU;
    String text = yytext();
    return (new Token8080(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 229: break;
        case 7: 
          { lastToken = Token8080.TIDENTIFIER;
    String text = yytext();
    Object val = text.toUpperCase();
    return (new Token8080(lastToken,IToken.IDENTIFIER,text,val,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 230: break;
        case 60: 
          { lastToken = Token8080.RESERVED_STC;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 231: break;
        case 120: 
          { lastToken = Token8080.RESERVED_XTHL;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 232: break;
        case 51: 
          { lastToken = Token8080.RESERVED_DCX;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 233: break;
        case 98: 
          { lastToken = Token8080.RESERVED_ORA;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 234: break;
        case 82: 
          { lastToken = Token8080.RESERVED_RNZ;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 235: break;
        case 111: 
          { lastToken = Token8080.RESERVED_JPO;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 236: break;
        case 55: 
          { String text = yytext();
    String val = text.substring(1,text.length()-1);
    if (val.length() > 2) {
        lastToken = Token8080.LITERAL_STRING;
        return (new Token8080(lastToken,IToken.LITERAL,text,val,yyline,yycolumn,
            yychar,yychar+text.length(),true));
    }
    else {
        byte[] b = val.getBytes();
        int numval = b[0];
        for (int i = 1; i < b.length; i++)
            numval = (numval <<8) + b[i];
        if (numval > 255) lastToken = Token8080.LITERAL_DECIMAL_16BIT;
        else lastToken = Token8080.LITERAL_DECIMAL_8BIT;
        return (new Token8080(lastToken,IToken.LITERAL,text,numval,yyline,yycolumn,
            yychar,yychar+text.length(),true));
    }
          }
        case 237: break;
        case 46: 
          { lastToken = Token8080.RESERVED_JM;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 238: break;
        case 44: 
          { lastToken = Token8080.OPERATOR_OR;
    String text = yytext();
    return (new Token8080(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 239: break;
        case 78: 
          { lastToken = Token8080.OPERATOR_NOT;
    String text = yytext();
    return (new Token8080(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 240: break;
        case 31: 
          { String text = yytext();
    int num=0;
    int tokenType=0;
    text = text.replaceFirst("[bB]","");
    try {
        num = Integer.parseInt(text,2);
        if (num > 65535) {
            lastToken = Token8080.ERROR_DECIMAL_SIZE;
            tokenType = IToken.ERROR;
        } else if (num > 255) {
            lastToken = Token8080.LITERAL_DECIMAL_16BIT;
            tokenType = IToken.LITERAL;
        } else {
            lastToken = Token8080.LITERAL_DECIMAL_8BIT;
            tokenType = IToken.LITERAL;
        }
    } catch (NumberFormatException e) {
        lastToken = Token8080.ERROR_DECIMAL_SIZE;
        tokenType = IToken.ERROR;
    }
    return (new Token8080(lastToken,tokenType,yytext(),(Object)num,yyline,
        yycolumn,yychar,yychar+yytext().length(),true));
          }
        case 241: break;
        case 16: 
          { lastToken = Token8080.SEPARATOR_LPAR;
    String text = yytext();
    return (new Token8080(lastToken,IToken.SEPARATOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 242: break;
        case 107: 
          { lastToken = Token8080.RESERVED_LXI;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 243: break;
        case 11: 
          { lastToken = Token8080.REGISTERS_M;
    String text = yytext();
    return (new Token8080(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 244: break;
        case 67: 
          { lastToken = Token8080.RESERVED_CMP;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 245: break;
        case 112: 
          { lastToken = Token8080.RESERVED_JPE;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 246: break;
        case 21: 
          { lastToken = Token8080.OPERATOR_MULTIPLY;
    String text = yytext();
    return (new Token8080(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 247: break;
        case 116: 
          { lastToken = Token8080.RESERVED_SPHL;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 248: break;
        case 37: 
          { lastToken = Token8080.RESERVED_CZ;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 249: break;
        case 90: 
          { lastToken = Token8080.RESERVED_ADD;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 250: break;
        case 28: 
          { lastToken = Token8080.RESERVED_DI;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 251: break;
        case 10: 
          { lastToken = Token8080.REGISTERS_C;
    String text = yytext();
    return (new Token8080(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length(),true));
          }
        case 252: break;
        case 75: 
          { lastToken = Token8080.RESERVED_MVI;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 253: break;
        case 43: 
          { lastToken = Token8080.RESERVED_RZ;
    String text = yytext();
    return (new Token8080(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length(),true));
          }
        case 254: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     lastToken = Token8080.EOF;
    String text = yytext();
    return (new Token8080(lastToken,lastToken,text,null,yyline,yycolumn,yychar,
        yychar+text.length(),true));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
