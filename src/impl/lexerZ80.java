/* The following code was generated by JFlex 1.4.2 on 12.8.2008 12:11 */

/*
 * lexerZ80.flex
 *
 * (c) Copyright 2008, vbmacher
 *
 * Lexical analyser for Z80 assembler
 *
 * KEEP IT SIMPLE STUPID
 * sometimes just: YOU AREN'T GONNA NEED IT
 *
 */

package assemblerZ80;

import plugins.compiler.*;
import java.io.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 12.8.2008 12:11 from the specification file
 * <tt>lexer.flex</tt>
 */
public class lexerZ80 implements java_cup.runtime.Scanner, ILexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CONDITION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\1\0\1\4\1\2\22\0\1\4\1\63\1\15"+
    "\1\0\1\43\1\62\1\64\1\45\1\46\1\47\1\55\1\53\1\52"+
    "\1\54\1\0\1\56\2\13\6\7\2\5\1\17\1\1\1\61\1\57"+
    "\1\60\2\16\1\20\1\14\1\21\1\6\1\11\1\26\1\35\1\12"+
    "\1\23\1\31\1\16\1\25\1\34\1\22\1\36\1\27\1\10\1\30"+
    "\1\40\1\24\1\37\1\41\1\42\1\33\1\44\1\32\1\50\1\0"+
    "\1\51\1\0\1\16\1\0\1\20\1\14\1\21\1\6\1\11\1\26"+
    "\1\35\1\12\1\23\1\31\1\16\1\25\1\34\1\22\1\36\1\27"+
    "\1\10\1\30\1\40\1\24\1\37\1\41\1\42\1\33\1\44\1\32"+
    "\1\0\1\65\1\0\1\66\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\6\1\5"+
    "\1\7\1\10\1\11\1\5\1\12\1\1\1\13\1\14"+
    "\1\7\1\15\1\16\10\7\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\7"+
    "\1\42\1\43\1\44\1\5\1\0\1\45\1\46\1\47"+
    "\1\50\1\7\1\51\1\7\1\52\1\53\1\54\2\7"+
    "\1\55\1\56\1\7\1\57\1\60\1\61\1\7\1\62"+
    "\2\7\1\63\2\7\1\64\2\7\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\3\7\1\73\1\74\1\7\1\75"+
    "\1\76\3\7\1\77\5\7\1\100\3\7\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\7\1\113\1\7\1\114\1\7\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\7\1\123\1\124\1\125\1\126"+
    "\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136"+
    "\1\7\1\137\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\1\146\1\147\1\150\3\7\1\151\1\152\1\153\1\154"+
    "\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\7"+
    "\1\164\1\165\1\166\1\167\1\170\1\171\1\7\1\172"+
    "\1\173\1\174\1\175\1\176\1\177\1\200\1\201\1\7"+
    "\1\202\1\203\1\204\1\205\1\206\1\7\1\207\1\7"+
    "\1\210";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\156\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\156\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\156\0\156\0\156\0\156"+
    "\0\u0604\0\u063b\0\156\0\156\0\156\0\156\0\156\0\u0370"+
    "\0\u0672\0\u06a9\0\u01ef\0\u0528\0\u06e0\0\u06e0\0\156\0\u0717"+
    "\0\u01ef\0\156\0\u074e\0\u01ef\0\u0785\0\u01ef\0\u01ef\0\156"+
    "\0\u07bc\0\u07f3\0\u01ef\0\u082a\0\u0861\0\u01ef\0\u06e0\0\u01ef"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u01ef\0\u01ef"+
    "\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0e2e\0\u01ef\0\u0e65\0\u0e9c\0\u0ed3\0\156\0\156\0\156"+
    "\0\156\0\u01ef\0\u01ef\0\u01ef\0\u0b2c\0\u01ef\0\u01ef\0\u0f0a"+
    "\0\u01ef\0\u0f41\0\u01ef\0\u0f78\0\u01ef\0\156\0\u01ef\0\u01ef"+
    "\0\u01ef\0\156\0\u0faf\0\u01ef\0\u0fe6\0\u101d\0\u01ef\0\u01ef"+
    "\0\u01ef\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u01ef\0\u1167"+
    "\0\u119e\0\u01ef\0\u01ef\0\u01ef\0\u11d5\0\u01ef\0\u01ef\0\u120c"+
    "\0\u01ef\0\u01ef\0\u1243\0\u127a\0\u12b1\0\u01ef\0\u12e8\0\u01ef"+
    "\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef"+
    "\0\u131f\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u1356"+
    "\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef"+
    "\0\u138d\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u13c4\0\u01ef"+
    "\0\u13fb\0\u01ef";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\13\1\3"+
    "\1\21\1\22\1\23\1\24\1\13\1\25\1\13\1\26"+
    "\1\27\1\30\1\13\1\31\1\32\1\13\1\33\1\13"+
    "\1\34\1\35\1\13\1\36\1\13\1\3\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\13\1\3\1\21"+
    "\1\60\1\61\1\24\1\13\1\25\1\13\1\62\1\27"+
    "\1\30\1\63\1\31\1\64\1\13\1\33\1\13\1\34"+
    "\1\35\1\13\1\36\1\13\1\3\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\67\0\2\4"+
    "\2\0\63\4\2\0\1\5\70\0\1\7\67\0\1\10"+
    "\1\65\1\10\1\0\1\66\1\67\1\10\1\66\3\0"+
    "\2\66\4\0\1\66\45\0\4\13\1\70\2\13\1\71"+
    "\1\0\1\13\1\72\1\73\2\13\1\74\5\13\1\75"+
    "\6\13\1\76\1\13\1\77\1\0\1\13\27\0\1\10"+
    "\1\65\1\12\1\100\1\66\1\67\1\12\1\66\3\0"+
    "\2\66\4\0\1\66\7\0\1\100\35\0\10\13\1\0"+
    "\1\13\1\72\23\13\1\0\1\13\27\0\3\13\1\101"+
    "\4\13\1\0\1\13\1\72\2\13\1\102\1\103\7\13"+
    "\1\104\7\13\1\0\1\13\27\0\10\13\1\0\1\13"+
    "\1\72\1\105\4\13\1\106\15\13\1\0\1\13\27\0"+
    "\1\10\1\65\1\12\1\100\1\66\1\67\1\16\1\107"+
    "\3\0\2\66\4\0\1\66\7\0\1\100\35\0\10\13"+
    "\1\0\1\13\1\72\1\13\1\110\1\13\1\111\17\13"+
    "\1\0\1\13\22\0\2\112\2\0\11\112\1\0\51\112"+
    "\5\0\1\13\1\113\6\13\1\0\1\13\1\72\2\13"+
    "\1\114\3\13\1\115\14\13\1\0\1\13\27\0\10\13"+
    "\1\0\1\13\1\72\1\116\1\117\5\13\1\120\13\13"+
    "\1\0\1\13\27\0\4\13\1\121\3\13\1\0\1\13"+
    "\1\72\16\13\1\122\4\13\1\0\1\13\27\0\10\13"+
    "\1\0\1\13\1\72\2\13\1\123\3\13\1\124\4\13"+
    "\1\125\1\126\6\13\1\0\1\127\27\0\1\13\1\130"+
    "\6\13\1\0\1\13\1\72\23\13\1\0\1\13\27\0"+
    "\10\13\1\0\1\13\1\72\16\13\1\131\1\132\3\13"+
    "\1\0\1\13\27\0\4\13\1\133\3\13\1\0\1\13"+
    "\1\72\5\13\1\134\2\13\1\135\7\13\1\136\2\13"+
    "\1\0\1\13\27\0\10\13\1\0\1\13\1\72\7\13"+
    "\1\137\1\140\12\13\1\0\1\13\27\0\10\13\1\0"+
    "\1\13\1\72\16\13\1\141\4\13\1\0\1\13\27\0"+
    "\10\13\1\0\1\13\1\72\1\142\22\13\1\0\1\13"+
    "\27\0\10\13\1\0\1\13\1\72\4\13\1\143\3\13"+
    "\1\144\6\13\1\145\3\13\1\0\1\13\27\0\4\13"+
    "\1\146\2\13\1\147\1\0\1\13\1\72\1\13\1\150"+
    "\3\13\1\151\1\13\1\152\1\153\6\13\1\154\3\13"+
    "\1\0\1\13\27\0\10\13\1\0\1\13\1\72\1\155"+
    "\22\13\1\0\1\13\101\0\1\156\1\157\65\0\1\160"+
    "\1\0\1\161\12\0\4\13\1\121\3\13\1\0\1\13"+
    "\1\72\1\13\1\162\10\13\1\163\3\13\1\122\4\13"+
    "\1\0\1\13\27\0\4\13\1\164\3\13\1\0\1\13"+
    "\1\72\16\13\1\165\1\132\3\13\1\0\1\13\27\0"+
    "\3\66\1\0\1\66\1\67\2\66\3\0\2\66\4\0"+
    "\1\66\45\0\10\13\1\0\1\13\1\72\1\13\1\166"+
    "\21\13\1\0\1\13\27\0\10\13\1\0\1\13\1\72"+
    "\1\167\22\13\1\0\1\13\27\0\10\13\1\0\1\13"+
    "\1\72\2\13\1\170\20\13\1\0\1\13\27\0\10\13"+
    "\1\0\1\13\1\72\17\13\1\171\3\13\1\0\1\13"+
    "\27\0\1\13\1\172\6\13\1\0\1\13\1\72\23\13"+
    "\1\0\1\13\27\0\10\13\1\0\1\13\1\72\13\13"+
    "\1\173\7\13\1\0\1\13\27\0\10\13\1\0\1\13"+
    "\1\72\5\13\1\174\15\13\1\0\1\13\27\0\10\13"+
    "\1\0\1\13\1\72\4\13\1\175\16\13\1\0\1\13"+
    "\22\0\2\112\2\0\11\112\1\176\51\112\5\0\1\13"+
    "\1\177\6\13\1\0\1\13\1\72\1\13\1\200\21\13"+
    "\1\0\1\13\27\0\1\13\1\201\6\13\1\0\1\13"+
    "\1\72\23\13\1\0\1\13\27\0\10\13\1\0\1\13"+
    "\1\72\23\13\1\0\1\13\1\202\26\0\10\13\1\0"+
    "\1\13\1\72\5\13\1\203\15\13\1\0\1\13\27\0"+
    "\10\13\1\0\1\13\1\72\6\13\1\204\14\13\1\0"+
    "\1\13\27\0\1\13\1\205\6\13\1\0\1\13\1\72"+
    "\3\13\1\206\1\13\1\207\15\13\1\0\1\13\27\0"+
    "\10\13\1\0\1\13\1\72\15\13\1\210\5\13\1\0"+
    "\1\13\27\0\10\13\1\0\1\13\1\72\7\13\1\211"+
    "\13\13\1\0\1\13\27\0\1\13\1\212\6\13\1\0"+
    "\1\13\1\72\1\13\1\213\1\13\1\214\17\13\1\0"+
    "\1\13\27\0\1\13\1\215\6\13\1\0\1\13\1\72"+
    "\3\13\1\216\17\13\1\0\1\13\27\0\10\13\1\0"+
    "\1\13\1\72\7\13\1\217\13\13\1\0\1\13\27\0"+
    "\10\13\1\0\1\13\1\72\20\13\1\220\2\13\1\0"+
    "\1\13\27\0\10\13\1\0\1\13\1\72\4\13\1\221"+
    "\13\13\1\222\2\13\1\0\1\13\27\0\1\13\1\223"+
    "\6\13\1\0\1\13\1\72\1\224\1\225\21\13\1\0"+
    "\1\13\27\0\1\13\1\226\6\13\1\0\1\13\1\72"+
    "\1\227\1\230\21\13\1\0\1\13\27\0\10\13\1\0"+
    "\1\13\1\72\4\13\1\231\16\13\1\0\1\13\27\0"+
    "\10\13\1\0\1\13\1\72\10\13\1\232\12\13\1\0"+
    "\1\13\27\0\10\13\1\0\1\13\1\72\1\13\1\233"+
    "\21\13\1\0\1\13\27\0\1\13\1\234\6\13\1\0"+
    "\1\13\1\72\3\13\1\235\17\13\1\0\1\13\27\0"+
    "\10\13\1\0\1\13\1\72\15\13\1\236\5\13\1\0"+
    "\1\13\27\0\10\13\1\0\1\13\1\72\4\13\1\237"+
    "\16\13\1\0\1\13\27\0\10\13\1\0\1\13\1\72"+
    "\4\13\1\240\16\13\1\0\1\13\27\0\10\13\1\0"+
    "\1\13\1\72\1\13\1\241\21\13\1\0\1\13\27\0"+
    "\10\13\1\0\1\13\1\72\6\13\1\242\14\13\1\0"+
    "\1\13\27\0\10\13\1\0\1\13\1\72\1\243\22\13"+
    "\1\0\1\13\27\0\10\13\1\0\1\13\1\72\1\244"+
    "\4\13\1\245\15\13\1\0\1\13\27\0\7\13\1\246"+
    "\1\0\1\13\1\72\23\13\1\0\1\13\27\0\10\13"+
    "\1\0\1\13\1\72\10\13\1\247\12\13\1\0\1\13"+
    "\27\0\10\13\1\0\1\13\1\72\12\13\1\250\10\13"+
    "\1\0\1\13\27\0\10\13\1\0\1\13\1\72\3\13"+
    "\1\251\10\13\1\252\6\13\1\0\1\13\27\0\10\13"+
    "\1\0\1\13\1\72\4\13\1\253\16\13\1\0\1\13"+
    "\27\0\10\13\1\0\1\13\1\72\5\13\1\254\15\13"+
    "\1\0\1\13\27\0\10\13\1\0\1\13\1\72\10\13"+
    "\1\255\12\13\1\0\1\13\27\0\10\13\1\0\1\13"+
    "\1\72\10\13\1\256\12\13\1\0\1\13\27\0\10\13"+
    "\1\0\1\13\1\72\10\13\1\257\12\13\1\0\1\13"+
    "\27\0\10\13\1\0\1\13\1\72\5\13\1\260\15\13"+
    "\1\0\1\13\27\0\10\13\1\0\1\13\1\72\10\13"+
    "\1\261\12\13\1\0\1\13\27\0\10\13\1\0\1\13"+
    "\1\72\10\13\1\262\12\13\1\0\1\13\27\0\10\13"+
    "\1\0\1\13\1\72\10\13\1\263\12\13\1\0\1\13"+
    "\27\0\5\13\1\264\2\13\1\0\1\13\1\72\23\13"+
    "\1\0\1\13\27\0\10\13\1\0\1\13\1\72\2\13"+
    "\1\265\1\266\17\13\1\0\1\13\27\0\10\13\1\0"+
    "\1\13\1\72\1\267\22\13\1\0\1\13\27\0\10\13"+
    "\1\0\1\13\1\72\1\270\22\13\1\0\1\13\27\0"+
    "\10\13\1\0\1\13\1\72\10\13\1\271\12\13\1\0"+
    "\1\13\27\0\10\13\1\0\1\13\1\72\10\13\1\272"+
    "\12\13\1\0\1\13\27\0\10\13\1\0\1\13\1\72"+
    "\10\13\1\273\12\13\1\0\1\13\27\0\1\13\1\274"+
    "\6\13\1\0\1\13\1\72\3\13\1\275\17\13\1\0"+
    "\1\13\27\0\10\13\1\0\1\13\1\72\6\13\1\276"+
    "\14\13\1\0\1\13\27\0\10\13\1\0\1\13\1\72"+
    "\17\13\1\277\3\13\1\0\1\13\27\0\10\13\1\0"+
    "\1\13\1\72\16\13\1\300\4\13\1\0\1\13\27\0"+
    "\1\13\1\301\6\13\1\0\1\13\1\72\23\13\1\0"+
    "\1\13\27\0\4\13\1\302\3\13\1\0\1\13\1\72"+
    "\23\13\1\0\1\13\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5170];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\30\1\13\11\2\1\5\11"+
    "\6\1\1\0\1\11\2\1\1\11\5\1\1\11\55\1"+
    "\4\11\14\1\1\11\3\1\1\11\100\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int lastToken;
    private String lastText; // token string holder

    public tokenZ80 getSymbol() throws IOException {
        return next_token();
    }

    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn)
            throws IOException {
        yyreset(reader);
        this.yyline = yyline;
	this.yychar = yychar;
	this.yycolumn = yycolumn;
    }
	
    public void reset() {
        this.yyline = 0;
        this.yychar = 0;
        this.yycolumn = 0;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexerZ80(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public lexerZ80(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public tokenZ80 next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { lastToken = tokenZ80.REGISTERS_H; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 137: break;
        case 4: 
          { /* ignore white spaces */
          }
        case 138: break;
        case 88: 
          { lastToken = tokenZ80.RESERVED_NOP; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 139: break;
        case 14: 
          { lastToken = tokenZ80.REGISTERS_L; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 140: break;
        case 31: 
          { lastToken = tokenZ80.OPERATOR_OR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 141: break;
        case 128: 
          { lastToken = tokenZ80.RESERVED_RLCA; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 142: break;
        case 26: 
          { lastToken = tokenZ80.OPERATOR_GREATER; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 143: break;
        case 99: 
          { lastToken = tokenZ80.RESERVED_RLC; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 144: break;
        case 74: 
          { lastToken = tokenZ80.RESERVED_DAA; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 145: break;
        case 91: 
          { lastToken = tokenZ80.RESERVED_INI; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 146: break;
        case 87: 
          { lastToken = tokenZ80.RESERVED_NEG; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 147: break;
        case 58: 
          { lastToken = tokenZ80.RESERVED_LD; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 148: break;
        case 123: 
          { lastToken = tokenZ80.RESERVED_LDDR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 149: break;
        case 106: 
          { lastToken = tokenZ80.RESERVED_OUT; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 150: break;
        case 22: 
          { lastToken = tokenZ80.OPERATOR_SUBTRACT; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 151: break;
        case 28: 
          { lastToken = tokenZ80.OPERATOR_MOD; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 152: break;
        case 136: 
          { lastToken = tokenZ80.PREPROCESSOR_INCLUDE; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 153: break;
        case 35: 
          { yybegin(YYINITIAL);
    lastToken = tokenZ80.RESERVED_Z; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 154: break;
        case 50: 
          { lastToken = tokenZ80.ERROR_UNCLOSED_STRING; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.ERROR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 155: break;
        case 33: 
          { yybegin(YYINITIAL);
    lastToken = tokenZ80.RESERVED_C; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 156: break;
        case 114: 
          { lastToken = tokenZ80.PREPROCESSOR_VAR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 157: break;
        case 65: 
          { lastToken = tokenZ80.OPERATOR_GE; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 158: break;
        case 15: 
          { lastToken = tokenZ80.PREPROCESSOR_ADDR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 159: break;
        case 122: 
          { lastToken = tokenZ80.RESERVED_INIR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 160: break;
        case 40: 
          { lastToken = tokenZ80.TLABEL; lastText = yytext();
    Object val = text.substring(0,text.length()-1).toUpperCase();
    return (new tokenZ80(lastToken,IToken.LABEL,text,val,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 161: break;
        case 72: 
          { yybegin(YYINITIAL);
    lastToken = tokenZ80.RESERVED_PO; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 162: break;
        case 69: 
          { yybegin(YYINITIAL);
    lastToken = tokenZ80.RESERVED_NC; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 163: break;
        case 55: 
          { lastToken = tokenZ80.REGISTERS_IX; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 164: break;
        case 102: 
          { lastToken = tokenZ80.RESERVED_RRC; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 165: break;
        case 12: 
          { lastToken = tokenZ80.REGISTERS_C; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 166: break;
        case 124: 
          { lastToken = tokenZ80.RESERVED_LDIR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 167: break;
        case 48: 
          { lastText = yytext();
    int num=0;
    int tokenType=0;
    text = text.replaceFirst("[bB]","");
    try {
        num = Integer.parseInt(text,2);
        if (num > 65535) {
            lastToken = tokenZ80.ERROR_DECIMAL_SIZE;
            tokenType = IToken.ERROR;
        } else if (num > 255) {
            lastToken = tokenZ80.LITERAL_DECIMAL_16BIT;
            tokenType = IToken.LITERAL;
        } else {
            lastToken = tokenZ80.LITERAL_DECIMAL_8BIT;
            tokenType = IToken.LITERAL;
        }
    } catch (NumberFormatException e) {
        lastToken = tokenZ80.ERROR_DECIMAL_SIZE;
        tokenType = IToken.ERROR;
    }
    return (new tokenZ80(lastToken,tokenType,yytext(),(Object)num,yyline,
        yycolumn,yychar,yychar+yytext().length()));
          }
        case 168: break;
        case 54: 
          { lastToken = tokenZ80.PREPROCESSOR_IF; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 169: break;
        case 61: 
          { yybegin(CONDITION);
    lastToken = tokenZ80.RESERVED_JP; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 170: break;
        case 47: 
          { lastToken = tokenZ80.REGISTERS_HL; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 171: break;
        case 67: 
          { lastToken = tokenZ80.OPERATOR_LE; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 172: break;
        case 117: 
          { lastToken = tokenZ80.RESERVED_HALT; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 173: break;
        case 59: 
          { lastToken = tokenZ80.RESERVED_RL; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 174: break;
        case 17: 
          { lastToken = tokenZ80.SEPARATOR_RPAR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.SEPARATOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 175: break;
        case 44: 
          { lastText = yytext();
    int num=0;
    int tokenType=0;
    text = text.replaceFirst("[oOqQ]","");
    try {

        num = Integer.parseInt(text,8);
        if (num > 65535) { // || num < -32768) {
            lastToken = tokenZ80.ERROR_DECIMAL_SIZE;
            tokenType = IToken.ERROR;
        } else if (num > 255) { // || num < -128) {
            lastToken = tokenZ80.LITERAL_DECIMAL_16BIT;
            tokenType = IToken.LITERAL;
        } else {
            lastToken = tokenZ80.LITERAL_DECIMAL_8BIT;
            tokenType = IToken.LITERAL;
        }
    } catch (NumberFormatException e) {
        lastToken = tokenZ80.ERROR_DECIMAL_SIZE;
        tokenType = IToken.ERROR;
    }
    return (new tokenZ80(lastToken,tokenType,yytext(),(Object)num,yyline,
        yycolumn,yychar,yychar+yytext().length()));
          }
        case 176: break;
        case 70: 
          { yybegin(YYINITIAL);
    lastToken = tokenZ80.RESERVED_NZ; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 177: break;
        case 105: 
          { lastToken = tokenZ80.PREPROCESSOR_ORG; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 178: break;
        case 75: 
          { lastToken = tokenZ80.PREPROCESSOR_EQU; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 179: break;
        case 134: 
          { lastToken = tokenZ80.PREPROCESSOR_ENDIF; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 180: break;
        case 116: 
          { lastToken = tokenZ80.PREPROCESSOR_ENDM; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 181: break;
        case 19: 
          { lastToken = tokenZ80.SEPARATOR_INDEXRPAR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.SEPARATOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 182: break;
        case 107: 
          { lastToken = tokenZ80.RESERVED_SET; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 183: break;
        case 133: 
          { lastToken = tokenZ80.RESERVED_OUTI; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 184: break;
        case 89: 
          { lastToken = tokenZ80.RESERVED_IND; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 185: break;
        case 49: 
          { lastToken = tokenZ80.REGISTERS_BC; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 186: break;
        case 16: 
          { lastToken = tokenZ80.SEPARATOR_LPAR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.SEPARATOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 187: break;
        case 1: 
          { lastToken = tokenZ80.ERROR_UNKNOWN_TOKEN; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.ERROR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 188: break;
        case 53: 
          { lastToken = tokenZ80.RESERVED_IN; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 189: break;
        case 37: 
          { lastText = yytext();
    int num=0;
    int tokenType=0;
    text = text.replaceFirst("[hH]","");
    try {
        num = Integer.parseInt(text,16);
        if (num > 65535) {
            lastToken = tokenZ80.ERROR_DECIMAL_SIZE;
            tokenType = IToken.ERROR;
        } else if (num > 255) {
            lastToken = tokenZ80.LITERAL_DECIMAL_16BIT;
            tokenType = IToken.LITERAL;
        } else {
            lastToken = tokenZ80.LITERAL_DECIMAL_8BIT;
            tokenType = IToken.LITERAL;
        }
    } catch (NumberFormatException e) {
        lastToken = tokenZ80.ERROR_DECIMAL_SIZE;
        tokenType = IToken.ERROR;
    }
    return (new tokenZ80(lastToken,tokenType,yytext(),(Object)num,yyline,
        yycolumn,yychar,yychar+yytext().length()));
          }
        case 190: break;
        case 21: 
          { lastToken = tokenZ80.OPERATOR_ADD; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 191: break;
        case 7: 
          { lastToken = tokenZ80.TIDENTIFIER; lastText = yytext();
    Object val = text.toUpperCase();
    return (new tokenZ80(lastToken,IToken.IDENTIFIER,text,val,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 192: break;
        case 113: 
          { lastToken = tokenZ80.RESERVED_SUB; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 193: break;
        case 110: 
          { lastToken = tokenZ80.RESERVED_SLA; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 194: break;
        case 27: 
          { lastToken = tokenZ80.OPERATOR_LESS; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 195: break;
        case 62: 
          { lastToken = tokenZ80.RESERVED_JR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 196: break;
        case 118: 
          { yybegin(CONDITION);
    lastToken = tokenZ80.RESERVED_CALL; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 197: break;
        case 18: 
          { lastToken = tokenZ80.SEPARATOR_INDEXLPAR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.SEPARATOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 198: break;
        case 79: 
          { lastToken = tokenZ80.RESERVED_ADD; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 199: break;
        case 77: 
          { lastToken = tokenZ80.RESERVED_BIT; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 200: break;
        case 68: 
          { lastToken = tokenZ80.OPERATOR_SHL; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 201: break;
        case 135: 
          { lastToken = tokenZ80.PREPROCESSOR_MACRO; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 202: break;
        case 5: 
          { lastText = yytext();
    text = text.replaceFirst("[dD]","");
    int num=0;
    int tokenType = 0;
    try {
        num = Integer.parseInt(text,10);
        if (num > 65535) { // || num < -32768) {
            lastToken = tokenZ80.ERROR_DECIMAL_SIZE;
            tokenType = IToken.ERROR;
        } else if (num > 255) { // || num < -128) {
            lastToken = tokenZ80.LITERAL_DECIMAL_16BIT;
            tokenType = IToken.LITERAL;
        } else {
            lastToken = tokenZ80.LITERAL_DECIMAL_8BIT;
            tokenType = IToken.LITERAL;
        }
    } catch (NumberFormatException e) {
        lastToken = tokenZ80.ERROR_DECIMAL_SIZE;
        tokenType = IToken.LITERAL;
    }
    return (new tokenZ80(lastToken,tokenType,yytext(),(Object)num,yyline,
        yycolumn,yychar,yychar+yytext().length()));
          }
        case 203: break;
        case 95: 
          { yybegin(CONDITION);
    lastToken = tokenZ80.RESERVED_RET; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 204: break;
        case 39: 
          { lastToken = tokenZ80.PREPROCESSOR_DB; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 205: break;
        case 41: 
          { lastToken = tokenZ80.RESERVED_DI; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 206: break;
        case 36: 
          { yybegin(YYINITIAL);
    lastToken = tokenZ80.RESERVED_M; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 207: break;
        case 98: 
          { lastToken = tokenZ80.RESERVED_RLA; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 208: break;
        case 23: 
          { lastToken = tokenZ80.OPERATOR_MULTIPLY; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 209: break;
        case 85: 
          { lastToken = tokenZ80.RESERVED_CPI; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 210: break;
        case 126: 
          { lastToken = tokenZ80.RESERVED_RETN; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 211: break;
        case 115: 
          { lastToken = tokenZ80.RESERVED_DJNZ; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 212: break;
        case 93: 
          { lastToken = tokenZ80.RESERVED_LDI; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 213: break;
        case 10: 
          { lastToken = tokenZ80.REGISTERS_B; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 214: break;
        case 82: 
          { lastToken = tokenZ80.REGISTERS_AFF; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 215: break;
        case 130: 
          { lastToken = tokenZ80.RESERVED_OTDR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 216: break;
        case 63: 
          { lastToken = tokenZ80.RESERVED_OR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 217: break;
        case 111: 
          { lastToken = tokenZ80.RESERVED_SRA; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 218: break;
        case 51: 
          { lastToken = tokenZ80.REGISTERS_AF; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 219: break;
        case 90: 
          { lastToken = tokenZ80.RESERVED_INC; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 220: break;
        case 64: 
          { lastToken = tokenZ80.REGISTERS_SP; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 221: break;
        case 25: 
          { lastToken = tokenZ80.OPERATOR_EQUAL; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 222: break;
        case 73: 
          { lastToken = tokenZ80.RESERVED_DEC; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 223: break;
        case 45: 
          { lastToken = tokenZ80.RESERVED_EI; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 224: break;
        case 34: 
          { yybegin(YYINITIAL);
    lastToken = tokenZ80.RESERVED_P; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 225: break;
        case 56: 
          { lastToken = tokenZ80.RESERVED_IM; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 226: break;
        case 60: 
          { lastToken = tokenZ80.RESERVED_RR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 227: break;
        case 86: 
          { lastToken = tokenZ80.RESERVED_CPL; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 228: break;
        case 129: 
          { lastToken = tokenZ80.RESERVED_RRCA; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 229: break;
        case 101: 
          { lastToken = tokenZ80.RESERVED_RRA; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 230: break;
        case 96: 
          { lastToken = tokenZ80.RESERVED_RES; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 231: break;
        case 108: 
          { lastToken = tokenZ80.RESERVED_SBC; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 232: break;
        case 30: 
          { lastToken = tokenZ80.OPERATOR_AND; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 233: break;
        case 8: 
          { lastToken = tokenZ80.REGISTERS_E; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 234: break;
        case 78: 
          { lastText = yytext();
    String val = text.substring(1,text.length()-1);
    if (val.length() > 2) {
        lastToken = tokenZ80.LITERAL_STRING;
        return (new tokenZ80(lastToken,IToken.LITERAL,text,val,yyline,yycolumn,
            yychar,yychar+text.length()));
    }
    else {
        byte[] b = val.getBytes();
        int numval = b[0];
        for (int i = 1; i < b.length; i++)
            numval = (numval <<8) + b[i];
        if (numval > 255) lastToken = tokenZ80.LITERAL_DECIMAL_16BIT;
        else lastToken = tokenZ80.LITERAL_DECIMAL_8BIT;
        return (new tokenZ80(lastToken,IToken.LITERAL,text,numval,yyline,yycolumn,
            yychar,yychar+text.length()));
    }
          }
        case 235: break;
        case 132: 
          { lastToken = tokenZ80.RESERVED_OUTD; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 236: break;
        case 13: 
          { lastToken = tokenZ80.REGISTERS_I; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 237: break;
        case 80: 
          { lastToken = tokenZ80.RESERVED_ADC; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 238: break;
        case 119: 
          { lastToken = tokenZ80.RESERVED_CPDR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 239: break;
        case 71: 
          { yybegin(YYINITIAL);
    lastToken = tokenZ80.RESERVED_PE; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 240: break;
        case 46: 
          { lastToken = tokenZ80.RESERVED_EX; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 241: break;
        case 24: 
          { lastToken = tokenZ80.OPERATOR_DIVIDE; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 242: break;
        case 84: 
          { lastToken = tokenZ80.RESERVED_CPD; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 243: break;
        case 52: 
          { lastToken = tokenZ80.RESERVED_CP; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 244: break;
        case 125: 
          { lastToken = tokenZ80.RESERVED_PUSH; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 245: break;
        case 112: 
          { lastToken = tokenZ80.RESERVED_SRL; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 246: break;
        case 97: 
          { lastToken = tokenZ80.RESERVED_RLD; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 247: break;
        case 76: 
          { lastToken = tokenZ80.RESERVED_EXX; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 248: break;
        case 103: 
          { lastToken = tokenZ80.RESERVED_RST; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 249: break;
        case 11: 
          { lastToken = tokenZ80.REGISTERS_A; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 250: break;
        case 2: 
          { lastToken = tokenZ80.TCOMMENT; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.COMMENT,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 251: break;
        case 83: 
          { lastToken = tokenZ80.RESERVED_CCF; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 252: break;
        case 32: 
          { lastToken = tokenZ80.OPERATOR_XOR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 253: break;
        case 131: 
          { lastToken = tokenZ80.RESERVED_OTIR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 254: break;
        case 94: 
          { lastToken = tokenZ80.RESERVED_POP; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 255: break;
        case 43: 
          { lastToken = tokenZ80.PREPROCESSOR_DW; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 256: break;
        case 42: 
          { lastToken = tokenZ80.PREPROCESSOR_DS; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.PREPROCESSOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 257: break;
        case 81: 
          { lastToken = tokenZ80.RESERVED_AND; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 258: break;
        case 120: 
          { lastToken = tokenZ80.RESERVED_CPIR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 259: break;
        case 104: 
          { lastToken = tokenZ80.RESERVED_XOR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 260: break;
        case 109: 
          { lastToken = tokenZ80.RESERVED_SCF; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 261: break;
        case 127: 
          { lastToken = tokenZ80.RESERVED_RETI; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 262: break;
        case 121: 
          { lastToken = tokenZ80.RESERVED_INDR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 263: break;
        case 66: 
          { lastToken = tokenZ80.OPERATOR_SHR; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 264: break;
        case 92: 
          { lastToken = tokenZ80.RESERVED_LDD; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 265: break;
        case 20: 
          { lastToken = tokenZ80.SEPARATOR_COMMA; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.SEPARATOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 266: break;
        case 57: 
          { lastToken = tokenZ80.REGISTERS_IY; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 267: break;
        case 100: 
          { lastToken = tokenZ80.RESERVED_RRD; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.RESERVED,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 268: break;
        case 3: 
          { lastToken = tokenZ80.SEPARATOR_EOL; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.SEPARATOR,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 269: break;
        case 29: 
          { lastToken = tokenZ80.OPERATOR_NOT; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.OPERATOR,text,null,yyline,yycolumn,
        yychar,yychar+text.length()));
          }
        case 270: break;
        case 6: 
          { lastToken = tokenZ80.REGISTERS_D; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 271: break;
        case 38: 
          { lastToken = tokenZ80.REGISTERS_DE; lastText = yytext();
    return (new tokenZ80(lastToken,IToken.REGISTER,text,null,yyline,
        yycolumn,yychar,yychar+text.length()));
          }
        case 272: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     lastToken = tokenZ80.EOF; text = yytext();
    return (new tokenZ80(lastToken,lastToken,text,null,yyline,yycolumn,yychar,
        yychar+text.length()));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
