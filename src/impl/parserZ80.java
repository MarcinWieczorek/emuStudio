
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Aug 17 11:48:52 CEST 2008
//----------------------------------------------------

package impl;

import java.util.Vector;
import java_cup.runtime.Symbol;
import plugins.compiler.IMessageReporter;
import plugins.compiler.IToken;
import treeZ80.*;
import treeZ80Abstract.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Aug 17 11:48:52 CEST 2008
  */
public class parserZ80 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserZ80() {super();}

  /** Constructor which sets the default scanner. */
  public parserZ80(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserZ80(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\004\000\002\003\005\000\002\004\003" +
    "\000\002\004\002\000\002\015\003\000\002\015\002\000" +
    "\002\005\003\000\002\005\003\000\002\005\002\000\002" +
    "\016\003\000\002\016\003\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\007\003\000\002\007\005" +
    "\000\002\010\003\000\002\010\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\003\000\002" +
    "\017\005\000\002\017\003\000\002\020\005\000\002\020" +
    "\004\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\012\004\000\002\012\005\000\002\012\005\000\002\012" +
    "\011\000\002\012\011\000\002\012\004\000\002\012\004" +
    "\000\002\023\003\000\002\023\002\000\002\026\003\000" +
    "\002\026\005\000\002\024\003\000\002\024\002\000\002" +
    "\025\003\000\002\025\005\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\010\000\002\011\012\000\002\011\012\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\010\000\002\011\012\000\002\011\012\000\002\011\006" +
    "\000\002\011\006\000\002\011\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\006\000\002\011\010\000\002" +
    "\011\010\000\002\011\004\000\002\011\004\000\002\011" +
    "\010\000\002\011\012\000\002\011\006\000\002\011\006" +
    "\000\002\011\004\000\002\011\006\000\002\011\010\000" +
    "\002\011\010\000\002\011\004\000\002\011\004\000\002" +
    "\011\006\000\002\011\010\000\002\011\010\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\010\000" +
    "\002\011\010\000\002\011\010\000\002\011\010\000\002" +
    "\011\006\000\002\011\004\000\002\011\010\000\002\011" +
    "\010\000\002\011\010\000\002\011\006\000\002\011\010" +
    "\000\002\011\010\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\011\004\000\002\011\006\000\002\011\010" +
    "\000\002\011\010\000\002\011\010\000\002\011\010\000" +
    "\002\011\012\000\002\011\012\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\011\010\000\002\011\010\000\002\011\006" +
    "\000\002\011\006\000\002\011\010\000\002\011\010\000" +
    "\002\011\006\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\010\000\002\011\010\000\002\011" +
    "\006\000\002\011\006\000\002\011\010\000\002\011\010" +
    "\000\002\011\012\000\002\011\012\000\002\011\012\000" +
    "\002\011\012\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\011\010" +
    "\000\002\011\010\000\002\011\004\000\002\011\004\000" +
    "\002\011\010\000\002\011\010\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\010\000\002\011\012" +
    "\000\002\011\006\000\002\011\003\000\002\011\004\000" +
    "\002\011\006\000\002\011\010\000\002\011\010\000\002" +
    "\011\004\000\002\011\006\000\002\011\010\000\002\011" +
    "\010\000\002\011\004\000\002\011\006\000\002\011\010" +
    "\000\002\011\010\000\002\011\004\000\002\011\006\000" +
    "\002\011\010\000\002\011\010\000\002\011\004\000\002" +
    "\011\004\000\002\011\010\000\002\011\012\000\002\011" +
    "\012\000\002\011\006\000\002\011\006\000\002\011\006" +
    "\000\002\011\010\000\002\011\012\000\002\011\006\000" +
    "\002\011\006\000\002\011\010\000\002\011\010\000\002" +
    "\011\004\000\002\011\006\000\002\011\010\000\002\011" +
    "\010\000\002\011\004\000\002\011\006\000\002\011\010" +
    "\000\002\011\010\000\002\011\004\000\002\011\006\000" +
    "\002\011\010\000\002\011\010\000\002\011\004\000\002" +
    "\011\004\000\002\011\006\000\002\011\010\000\002\011" +
    "\010\000\002\011\004\000\002\011\004\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\032\003" +
    "\000\002\032\003\000\002\031\003\000\002\031\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u027d\000\240\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb" +
    "\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072" +
    "\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb" +
    "\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb\106\ufffb\117" +
    "\ufffb\122\ufffb\126\ufffb\127\ufffb\130\ufffb\132\ufffb\157\ufffb" +
    "\204\007\205\ufffb\206\ufffb\001\002\000\010\002\u027f\003" +
    "\174\157\u0229\001\002\000\012\002\000\003\000\125\000" +
    "\157\000\001\002\000\240\002\ufff6\003\ufff6\004\015\005" +
    "\014\006\057\007\025\010\074\011\026\012\047\013\011" +
    "\014\060\015\126\016\071\017\124\020\061\021\107\022" +
    "\024\023\123\024\121\025\117\026\065\027\103\030\055" +
    "\031\054\032\033\033\032\034\075\035\027\036\115\037" +
    "\023\040\022\041\116\042\077\043\013\044\076\045\043" +
    "\046\062\047\106\050\056\051\070\052\112\053\105\054" +
    "\020\055\012\056\102\057\045\060\053\061\052\062\072" +
    "\063\066\064\114\065\042\066\040\067\036\070\037\071" +
    "\110\072\051\073\050\074\010\075\046\076\125\077\111" +
    "\100\073\101\044\102\035\103\041\104\031\105\104\106" +
    "\063\117\034\122\122\125\ufff6\126\113\127\100\130\101" +
    "\132\021\157\ufff6\205\030\206\ufff6\001\002\000\240\002" +
    "\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc" +
    "\075\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\103" +
    "\ufffc\104\ufffc\105\ufffc\106\ufffc\117\ufffc\122\ufffc\125\ufffc" +
    "\126\ufffc\127\ufffc\130\ufffc\132\ufffc\157\ufffc\205\ufffc\206" +
    "\ufffc\001\002\000\016\002\uffa0\003\uffa0\125\uffa0\156\uffa0" +
    "\157\uffa0\206\uffa0\001\002\000\016\002\uffbe\003\uffbe\125" +
    "\uffbe\156\uffbe\157\uffbe\206\uffbe\001\002\000\016\002\uffa7" +
    "\003\uffa7\125\uffa7\156\uffa7\157\uffa7\206\uffa7\001\002\000" +
    "\016\002\uffaf\003\uffaf\125\uffaf\156\uffaf\157\uffaf\206\uffaf" +
    "\001\002\000\012\133\u025f\142\u0262\143\u0260\147\u0261\001" +
    "\002\000\006\133\u024d\147\u024e\001\002\000\014\002\ufff4" +
    "\003\ufff4\125\ufff4\157\ufff4\206\ufff4\001\002\000\014\002" +
    "\ufff9\003\ufff9\125\ufff9\157\ufff9\206\170\001\002\000\016" +
    "\002\uffa8\003\uffa8\125\uffa8\156\uffa8\157\uffa8\206\uffa8\001" +
    "\002\000\004\203\u024b\001\002\000\032\107\u0248\110\u0243" +
    "\111\u0247\112\u0244\131\140\154\127\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\042\107\u0170" +
    "\110\u0171\111\u016a\112\u016c\113\u016f\114\u016e\115\u016d\116" +
    "\u0169\131\140\154\u0239\161\133\162\135\170\141\201\131" +
    "\202\136\205\137\001\002\000\016\002\uffb8\003\uffb8\125" +
    "\uffb8\156\uffb8\157\uffb8\206\uffb8\001\002\000\022\131\140" +
    "\154\127\161\133\162\135\170\141\201\131\202\136\205" +
    "\137\001\002\000\016\002\uffbf\003\uffbf\125\uffbf\156\uffbf" +
    "\157\uffbf\206\uffbf\001\002\000\016\002\uffb2\003\uffb2\125" +
    "\uffb2\156\uffb2\157\uffb2\206\uffb2\001\002\000\042\002\uffc2" +
    "\003\uffc2\120\u021d\121\u021a\124\u021f\125\uffc2\131\140\154" +
    "\127\157\uffc2\161\133\162\135\170\141\201\131\202\136" +
    "\205\137\206\uffc2\001\002\000\022\133\251\134\250\135" +
    "\247\136\246\137\245\140\244\141\243\154\u020e\001\002" +
    "\000\016\002\uffb4\003\uffb4\125\uffb4\156\uffb4\157\uffb4\206" +
    "\uffb4\001\002\000\036\133\251\134\250\135\247\136\246" +
    "\137\245\140\244\141\243\142\u0202\143\u0201\144\352\145" +
    "\222\146\237\147\216\154\u01ff\001\002\000\022\131\140" +
    "\154\127\161\133\162\135\170\141\201\131\202\136\205" +
    "\137\001\002\000\022\133\251\134\250\135\247\136\246" +
    "\137\245\140\244\141\243\154\u01f2\001\002\000\016\002" +
    "\uffa3\003\uffa3\125\uffa3\156\uffa3\157\uffa3\206\uffa3\001\002" +
    "\000\016\002\uffa2\003\uffa2\125\uffa2\156\uffa2\157\uffa2\206" +
    "\uffa2\001\002\000\022\133\251\134\250\135\247\136\246" +
    "\137\245\140\244\141\243\154\u01e6\001\002\000\022\133" +
    "\251\134\250\135\247\136\246\137\245\140\244\141\243" +
    "\154\u01da\001\002\000\016\002\uffa4\003\uffa4\125\uffa4\156" +
    "\uffa4\157\uffa4\206\uffa4\001\002\000\016\002\uffad\003\uffad" +
    "\125\uffad\156\uffad\157\uffad\206\uffad\001\002\000\022\131" +
    "\140\154\127\161\133\162\135\170\141\201\131\202\136" +
    "\205\137\001\002\000\016\142\u01cf\143\u01ce\145\u015d\146" +
    "\u015e\147\u015f\150\u0162\001\002\000\016\002\uff9f\003\uff9f" +
    "\125\uff9f\156\uff9f\157\uff9f\206\uff9f\001\002\000\040\131" +
    "\140\133\251\134\250\135\247\136\246\137\245\140\244" +
    "\141\243\154\u01c0\161\133\162\135\170\141\201\131\202" +
    "\136\205\137\001\002\000\022\133\251\134\250\135\247" +
    "\136\246\137\245\140\244\141\243\154\u01b4\001\002\000" +
    "\016\002\uffa1\003\uffa1\125\uffa1\156\uffa1\157\uffa1\206\uffa1" +
    "\001\002\000\036\002\uff2a\003\uff2a\107\u0170\110\u0171\111" +
    "\u016a\112\u016c\113\u016f\114\u016e\115\u016d\116\u0169\125\uff2a" +
    "\156\uff2a\157\uff2a\206\uff2a\001\002\000\022\131\140\154" +
    "\127\161\133\162\135\170\141\201\131\202\136\205\137" +
    "\001\002\000\020\133\u019d\134\233\135\232\136\231\137" +
    "\230\140\227\141\224\001\002\000\022\131\140\154\127" +
    "\161\133\162\135\170\141\201\131\202\136\205\137\001" +
    "\002\000\040\131\140\133\251\134\250\135\247\136\246" +
    "\137\245\140\244\141\243\154\u018f\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\040\131\140" +
    "\133\251\134\250\135\247\136\246\137\245\140\244\141" +
    "\243\154\u0182\161\133\162\135\170\141\201\131\202\136" +
    "\205\137\001\002\000\016\002\uffbd\003\uffbd\125\uffbd\156" +
    "\uffbd\157\uffbd\206\uffbd\001\002\000\016\002\uffb9\003\uffb9" +
    "\125\uffb9\156\uffb9\157\uffb9\206\uffb9\001\002\000\016\002" +
    "\uffac\003\uffac\125\uffac\156\uffac\157\uffac\206\uffac\001\002" +
    "\000\040\131\140\133\251\134\250\135\247\136\246\137" +
    "\245\140\244\141\243\154\u0175\161\133\162\135\170\141" +
    "\201\131\202\136\205\137\001\002\000\014\002\ufff8\003" +
    "\ufff8\125\ufff8\157\ufff8\206\ufff8\001\002\000\016\002\uffb6" +
    "\003\uffb6\125\uffb6\156\uffb6\157\uffb6\206\uffb6\001\002\000" +
    "\016\002\uffa5\003\uffa5\125\uffa5\156\uffa5\157\uffa5\206\uffa5" +
    "\001\002\000\014\002\ufff5\003\ufff5\125\ufff5\157\ufff5\206" +
    "\ufff5\001\002\000\016\002\uffaa\003\uffaa\125\uffaa\156\uffaa" +
    "\157\uffaa\206\uffaa\001\002\000\016\002\uffbb\003\uffbb\125" +
    "\uffbb\156\uffbb\157\uffbb\206\uffbb\001\002\000\016\002\uffa6" +
    "\003\uffa6\125\uffa6\156\uffa6\157\uffa6\206\uffa6\001\002\000" +
    "\016\002\uff9e\003\uff9e\125\uff9e\156\uff9e\157\uff9e\206\uff9e" +
    "\001\002\000\042\107\u0170\110\u0171\111\u016a\112\u016c\113" +
    "\u016f\114\u016e\115\u016d\116\u0169\131\140\154\127\161\133" +
    "\162\135\170\141\201\131\202\136\205\137\001\002\000" +
    "\016\002\uffb3\003\uffb3\125\uffb3\156\uffb3\157\uffb3\206\uffb3" +
    "\001\002\000\016\002\uffae\003\uffae\125\uffae\156\uffae\157" +
    "\uffae\206\uffae\001\002\000\016\002\uffb0\003\uffb0\125\uffb0" +
    "\156\uffb0\157\uffb0\206\uffb0\001\002\000\022\131\140\154" +
    "\127\161\133\162\135\170\141\201\131\202\136\205\137" +
    "\001\002\000\022\131\140\154\127\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\016\142\u0161" +
    "\143\u0160\145\u015d\146\u015e\147\u015f\150\u0162\001\002\000" +
    "\016\002\uffb5\003\uffb5\125\uffb5\156\uffb5\157\uffb5\206\uffb5" +
    "\001\002\000\040\131\140\133\251\134\250\135\247\136" +
    "\246\137\245\140\244\141\243\154\u014f\161\133\162\135" +
    "\170\141\201\131\202\136\205\137\001\002\000\004\154" +
    "\u0146\001\002\000\016\002\uffab\003\uffab\125\uffab\156\uffab" +
    "\157\uffab\206\uffab\001\002\000\036\133\u0137\134\233\135" +
    "\232\136\231\137\230\140\227\141\224\142\u0139\143\u0138" +
    "\144\352\145\222\146\237\147\216\154\u0136\001\002\000" +
    "\022\133\251\134\250\135\247\136\246\137\245\140\244" +
    "\141\243\154\u012a\001\002\000\006\133\u0118\147\u0119\001" +
    "\002\000\016\002\uffa9\003\uffa9\125\uffa9\156\uffa9\157\uffa9" +
    "\206\uffa9\001\002\000\232\004\015\005\014\006\057\007" +
    "\025\010\074\011\026\012\047\013\011\014\060\015\126" +
    "\016\071\017\124\020\061\021\107\022\024\023\123\024" +
    "\121\025\117\026\065\027\103\030\055\031\054\032\033" +
    "\033\032\034\075\035\027\036\115\037\023\040\022\041" +
    "\116\042\077\043\013\044\076\045\043\046\062\047\106" +
    "\050\056\051\070\052\112\053\105\054\020\055\012\056" +
    "\102\057\045\060\053\061\052\062\072\063\066\064\114" +
    "\065\042\066\040\067\036\070\037\071\110\072\051\073" +
    "\050\074\010\075\046\076\125\077\111\100\073\101\044" +
    "\102\035\103\041\104\031\105\104\106\063\131\140\154" +
    "\127\161\133\162\135\170\141\201\131\202\136\203\u0112" +
    "\205\137\001\002\000\022\133\251\134\250\135\247\136" +
    "\246\137\245\140\244\141\243\154\u0105\001\002\000\016" +
    "\002\uffb1\003\uffb1\125\uffb1\156\uffb1\157\uffb1\206\uffb1\001" +
    "\002\000\042\133\234\134\233\135\232\136\231\137\230" +
    "\140\227\141\224\142\220\143\217\144\235\145\222\146" +
    "\237\147\216\152\226\153\223\154\221\001\002\000\006" +
    "\150\201\154\200\001\002\000\014\002\ufff7\003\ufff7\125" +
    "\ufff7\157\ufff7\206\ufff7\001\002\000\016\002\uffb7\003\uffb7" +
    "\125\uffb7\156\uffb7\157\uffb7\206\uffb7\001\002\000\022\131" +
    "\140\154\127\161\133\162\135\170\141\201\131\202\136" +
    "\205\137\001\002\000\022\131\140\154\127\161\133\162" +
    "\135\170\141\201\131\202\136\205\137\001\002\000\016" +
    "\002\uffba\003\uffba\125\uffba\156\uffba\157\uffba\206\uffba\001" +
    "\002\000\022\131\140\154\127\161\133\162\135\170\141" +
    "\201\131\202\136\205\137\001\002\000\016\002\uffbc\003" +
    "\uffbc\125\uffbc\156\uffbc\157\uffbc\206\uffbc\001\002\000\022" +
    "\131\140\154\127\161\133\162\135\170\141\201\131\202" +
    "\136\205\137\001\002\000\056\002\uffe7\003\uffe7\125\uffe7" +
    "\155\uffe7\156\uffe7\157\uffe7\161\uffe7\162\uffe7\163\uffe7\164" +
    "\uffe7\165\uffe7\166\uffe7\167\uffe7\171\uffe7\172\uffe7\173\uffe7" +
    "\174\uffe7\175\uffe7\176\uffe7\177\uffe7\200\uffe7\206\uffe7\001" +
    "\002\000\056\002\uffe4\003\uffe4\125\uffe4\155\uffe4\156\uffe4" +
    "\157\uffe4\161\uffe4\162\uffe4\163\uffe4\164\uffe4\165\uffe4\166" +
    "\uffe4\167\uffe4\171\uffe4\172\uffe4\173\uffe4\174\uffe4\175\uffe4" +
    "\176\uffe4\177\uffe4\200\uffe4\206\uffe4\001\002\000\054\002" +
    "\uff18\003\uff18\125\uff18\156\uff18\157\uff18\161\153\162\160" +
    "\163\150\164\156\165\151\166\152\167\157\171\144\172" +
    "\155\173\145\174\161\175\162\176\154\177\147\200\143" +
    "\206\uff18\001\002\000\022\131\uffdf\154\uffdf\161\uffdf\162" +
    "\uffdf\170\uffdf\201\uffdf\202\uffdf\205\uffdf\001\002\000\022" +
    "\131\140\154\127\161\133\162\135\170\141\201\131\202" +
    "\136\205\137\001\002\000\022\131\uffde\154\uffde\161\uffde" +
    "\162\uffde\170\uffde\201\uffde\202\uffde\205\uffde\001\002\000" +
    "\056\002\uffe3\003\uffe3\125\uffe3\155\uffe3\156\uffe3\157\uffe3" +
    "\161\uffe3\162\uffe3\163\uffe3\164\uffe3\165\uffe3\166\uffe3\167" +
    "\uffe3\171\uffe3\172\uffe3\173\uffe3\174\uffe3\175\uffe3\176\uffe3" +
    "\177\uffe3\200\uffe3\206\uffe3\001\002\000\056\002\uffe1\003" +
    "\uffe1\125\uffe1\155\uffe1\156\uffe1\157\uffe1\161\uffe1\162\uffe1" +
    "\163\uffe1\164\uffe1\165\uffe1\166\uffe1\167\uffe1\171\uffe1\172" +
    "\uffe1\173\uffe1\174\uffe1\175\uffe1\176\uffe1\177\uffe1\200\uffe1" +
    "\206\uffe1\001\002\000\056\002\uffe2\003\uffe2\125\uffe2\155" +
    "\uffe2\156\uffe2\157\uffe2\161\uffe2\162\uffe2\163\uffe2\164\uffe2" +
    "\165\uffe2\166\uffe2\167\uffe2\171\uffe2\172\uffe2\173\uffe2\174" +
    "\uffe2\175\uffe2\176\uffe2\177\uffe2\200\uffe2\206\uffe2\001\002" +
    "\000\022\131\uffe0\154\uffe0\161\uffe0\162\uffe0\170\uffe0\201" +
    "\uffe0\202\uffe0\205\uffe0\001\002\000\056\002\uffe5\003\uffe5" +
    "\125\uffe5\155\uffe5\156\uffe5\157\uffe5\161\153\162\160\163" +
    "\150\164\156\165\151\166\152\167\157\171\144\172\155" +
    "\173\145\174\161\175\162\176\154\177\147\200\143\206" +
    "\uffe5\001\002\000\022\131\uffd6\154\uffd6\161\uffd6\162\uffd6" +
    "\170\uffd6\201\uffd6\202\uffd6\205\uffd6\001\002\000\022\131" +
    "\uffdb\154\uffdb\161\uffdb\162\uffdb\170\uffdb\201\uffdb\202\uffdb" +
    "\205\uffdb\001\002\000\022\131\uffdc\154\uffdc\161\uffdc\162" +
    "\uffdc\170\uffdc\201\uffdc\202\uffdc\205\uffdc\001\002\000\022" +
    "\131\140\154\127\161\133\162\135\170\141\201\131\202" +
    "\136\205\137\001\002\000\022\131\uffd7\154\uffd7\161\uffd7" +
    "\162\uffd7\170\uffd7\201\uffd7\202\uffd7\205\uffd7\001\002\000" +
    "\022\131\uffd3\154\uffd3\161\uffd3\162\uffd3\170\uffd3\201\uffd3" +
    "\202\uffd3\205\uffd3\001\002\000\022\131\uffd1\154\uffd1\161" +
    "\uffd1\162\uffd1\170\uffd1\201\uffd1\202\uffd1\205\uffd1\001\002" +
    "\000\022\131\uffd0\154\uffd0\161\uffd0\162\uffd0\170\uffd0\201" +
    "\uffd0\202\uffd0\205\uffd0\001\002\000\022\131\uffd5\154\uffd5" +
    "\161\uffd5\162\uffd5\170\uffd5\201\uffd5\202\uffd5\205\uffd5\001" +
    "\002\000\022\131\uffd8\154\uffd8\161\uffd8\162\uffd8\170\uffd8" +
    "\201\uffd8\202\uffd8\205\uffd8\001\002\000\022\131\uffdd\154" +
    "\uffdd\161\uffdd\162\uffdd\170\uffdd\201\uffdd\202\uffdd\205\uffdd" +
    "\001\002\000\022\131\uffd2\154\uffd2\161\uffd2\162\uffd2\170" +
    "\uffd2\201\uffd2\202\uffd2\205\uffd2\001\002\000\022\131\uffcf" +
    "\154\uffcf\161\uffcf\162\uffcf\170\uffcf\201\uffcf\202\uffcf\205" +
    "\uffcf\001\002\000\022\131\uffd4\154\uffd4\161\uffd4\162\uffd4" +
    "\170\uffd4\201\uffd4\202\uffd4\205\uffd4\001\002\000\022\131" +
    "\uffda\154\uffda\161\uffda\162\uffda\170\uffda\201\uffda\202\uffda" +
    "\205\uffda\001\002\000\022\131\uffd9\154\uffd9\161\uffd9\162" +
    "\uffd9\170\uffd9\201\uffd9\202\uffd9\205\uffd9\001\002\000\056" +
    "\002\uffe6\003\uffe6\125\uffe6\155\uffe6\156\uffe6\157\uffe6\161" +
    "\153\162\160\163\150\164\156\165\151\166\152\167\157" +
    "\171\144\172\155\173\145\174\161\175\162\176\154\177" +
    "\147\200\143\206\uffe6\001\002\000\042\155\165\161\153" +
    "\162\160\163\150\164\156\165\151\166\152\167\157\171" +
    "\144\172\155\173\145\174\161\175\162\176\154\177\147" +
    "\200\143\001\002\000\056\002\uffe8\003\uffe8\125\uffe8\155" +
    "\uffe8\156\uffe8\157\uffe8\161\uffe8\162\uffe8\163\uffe8\164\uffe8" +
    "\165\uffe8\166\uffe8\167\uffe8\171\uffe8\172\uffe8\173\uffe8\174" +
    "\uffe8\175\uffe8\176\uffe8\177\uffe8\200\uffe8\206\uffe8\001\002" +
    "\000\054\002\uff78\003\uff78\125\uff78\156\uff78\157\uff78\161" +
    "\153\162\160\163\150\164\156\165\151\166\152\167\157" +
    "\171\144\172\155\173\145\174\161\175\162\176\154\177" +
    "\147\200\143\206\uff78\001\002\000\044\157\ufff9\161\153" +
    "\162\160\163\150\164\156\165\151\166\152\167\157\171" +
    "\144\172\155\173\145\174\161\175\162\176\154\177\147" +
    "\200\143\206\170\001\002\000\012\002\ufffa\003\ufffa\125" +
    "\ufffa\157\ufffa\001\002\000\004\157\172\001\002\000\236" +
    "\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060" +
    "\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075" +
    "\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb" +
    "\104\ufffb\105\ufffb\106\ufffb\117\ufffb\122\ufffb\126\ufffb\127" +
    "\ufffb\130\ufffb\132\ufffb\157\ufffb\204\007\205\ufffb\206\ufffb" +
    "\001\002\000\006\003\174\157\175\001\002\000\012\002" +
    "\ufffe\003\ufffe\125\ufffe\157\ufffe\001\002\000\240\003\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb" +
    "\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076" +
    "\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb" +
    "\105\ufffb\106\ufffb\117\ufffb\122\ufffb\123\177\126\ufffb\127" +
    "\ufffb\130\ufffb\132\ufffb\157\ufffb\204\007\205\ufffb\206\ufffb" +
    "\001\002\000\012\002\uffff\003\uffff\125\uffff\157\uffff\001" +
    "\002\000\014\002\uffcb\003\uffcb\125\uffcb\157\uffcb\206\uffcb" +
    "\001\002\000\006\144\204\146\205\001\002\000\004\156" +
    "\202\001\002\000\004\151\203\001\002\000\016\002\uff73" +
    "\003\uff73\125\uff73\156\uff73\157\uff73\206\uff73\001\002\000" +
    "\004\155\211\001\002\000\004\155\206\001\002\000\004" +
    "\156\207\001\002\000\004\147\210\001\002\000\016\002" +
    "\uff74\003\uff74\125\uff74\156\uff74\157\uff74\206\uff74\001\002" +
    "\000\004\156\212\001\002\000\010\142\215\143\213\147" +
    "\214\001\002\000\016\002\uff75\003\uff75\125\uff75\156\uff75" +
    "\157\uff75\206\uff75\001\002\000\016\002\uff77\003\uff77\125" +
    "\uff77\156\uff77\157\uff77\206\uff77\001\002\000\016\002\uff76" +
    "\003\uff76\125\uff76\156\uff76\157\uff76\206\uff76\001\002\000" +
    "\016\002\ufee5\003\ufee5\125\ufee5\156\ufee5\157\ufee5\206\ufee5" +
    "\001\002\000\004\156\u0100\001\002\000\004\156\373\001" +
    "\002\000\034\131\140\142\342\143\341\145\334\146\335" +
    "\147\340\154\127\161\133\162\135\170\141\201\131\202" +
    "\136\205\137\001\002\000\016\002\ufee7\003\ufee7\125\ufee7" +
    "\156\ufee7\157\ufee7\206\ufee7\001\002\000\004\156\332\001" +
    "\002\000\016\002\ufeec\003\ufeec\125\ufeec\156\ufeec\157\ufeec" +
    "\206\ufeec\001\002\000\004\156\325\001\002\000\004\156" +
    "\323\001\002\000\016\002\ufeed\003\ufeed\125\ufeed\156\ufeed" +
    "\157\ufeed\206\ufeed\001\002\000\016\002\ufeee\003\ufeee\125" +
    "\ufeee\156\ufeee\157\ufeee\206\ufeee\001\002\000\016\002\ufeef" +
    "\003\ufeef\125\ufeef\156\ufeef\157\ufeef\206\ufeef\001\002\000" +
    "\016\002\ufef0\003\ufef0\125\ufef0\156\ufef0\157\ufef0\206\ufef0" +
    "\001\002\000\016\002\ufef1\003\ufef1\125\ufef1\156\ufef1\157" +
    "\ufef1\206\ufef1\001\002\000\004\156\275\001\002\000\004" +
    "\156\265\001\002\000\004\156\240\001\002\000\016\002" +
    "\ufee6\003\ufee6\125\ufee6\156\ufee6\157\ufee6\206\ufee6\001\002" +
    "\000\040\131\140\133\251\134\250\135\247\136\246\137" +
    "\245\140\244\141\243\154\241\161\133\162\135\170\141" +
    "\201\131\202\136\205\137\001\002\000\030\131\140\142" +
    "\255\143\254\147\253\154\127\161\133\162\135\170\141" +
    "\201\131\202\136\205\137\001\002\000\016\002\uff40\003" +
    "\uff40\125\uff40\156\uff40\157\uff40\206\uff40\001\002\000\016" +
    "\002\ufef2\003\ufef2\125\ufef2\156\ufef2\157\ufef2\206\ufef2\001" +
    "\002\000\016\002\ufef3\003\ufef3\125\ufef3\156\ufef3\157\ufef3" +
    "\206\ufef3\001\002\000\016\002\ufef4\003\ufef4\125\ufef4\156" +
    "\ufef4\157\ufef4\206\ufef4\001\002\000\016\002\ufef5\003\ufef5" +
    "\125\ufef5\156\ufef5\157\ufef5\206\ufef5\001\002\000\016\002" +
    "\ufef6\003\ufef6\125\ufef6\156\ufef6\157\ufef6\206\ufef6\001\002" +
    "\000\016\002\ufef7\003\ufef7\125\ufef7\156\ufef7\157\ufef7\206" +
    "\ufef7\001\002\000\016\002\ufef8\003\ufef8\125\ufef8\156\ufef8" +
    "\157\ufef8\206\ufef8\001\002\000\054\002\uff3f\003\uff3f\125" +
    "\uff3f\156\uff3f\157\uff3f\161\153\162\160\163\150\164\156" +
    "\165\151\166\152\167\157\171\144\172\155\173\145\174" +
    "\161\175\162\176\154\177\147\200\143\206\uff3f\001\002" +
    "\000\004\155\264\001\002\000\004\161\261\001\002\000" +
    "\004\161\256\001\002\000\022\131\140\154\127\161\133" +
    "\162\135\170\141\201\131\202\136\205\137\001\002\000" +
    "\042\155\260\161\153\162\160\163\150\164\156\165\151" +
    "\166\152\167\157\171\144\172\155\173\145\174\161\175" +
    "\162\176\154\177\147\200\143\001\002\000\016\002\uff45" +
    "\003\uff45\125\uff45\156\uff45\157\uff45\206\uff45\001\002\000" +
    "\022\131\140\154\127\161\133\162\135\170\141\201\131" +
    "\202\136\205\137\001\002\000\042\155\263\161\153\162" +
    "\160\163\150\164\156\165\151\166\152\167\157\171\144" +
    "\172\155\173\145\174\161\175\162\176\154\177\147\200" +
    "\143\001\002\000\016\002\uff44\003\uff44\125\uff44\156\uff44" +
    "\157\uff44\206\uff44\001\002\000\016\002\uff47\003\uff47\125" +
    "\uff47\156\uff47\157\uff47\206\uff47\001\002\000\032\131\140" +
    "\142\272\143\271\147\267\154\127\160\270\161\133\162" +
    "\135\170\141\201\131\202\136\205\137\001\002\000\054" +
    "\002\uff4e\003\uff4e\125\uff4e\156\uff4e\157\uff4e\161\153\162" +
    "\160\163\150\164\156\165\151\166\152\167\157\171\144" +
    "\172\155\173\145\174\161\175\162\176\154\177\147\200" +
    "\143\206\uff4e\001\002\000\016\002\uff3d\003\uff3d\125\uff3d" +
    "\156\uff3d\157\uff3d\206\uff3d\001\002\000\022\131\140\154" +
    "\127\161\133\162\135\170\141\201\131\202\136\205\137" +
    "\001\002\000\016\002\uff3b\003\uff3b\125\uff3b\156\uff3b\157" +
    "\uff3b\206\uff3b\001\002\000\016\002\uff3c\003\uff3c\125\uff3c" +
    "\156\uff3c\157\uff3c\206\uff3c\001\002\000\042\155\274\161" +
    "\153\162\160\163\150\164\156\165\151\166\152\167\157" +
    "\171\144\172\155\173\145\174\161\175\162\176\154\177" +
    "\147\200\143\001\002\000\016\002\uff50\003\uff50\125\uff50" +
    "\156\uff50\157\uff50\206\uff50\001\002\000\046\131\140\133" +
    "\251\134\250\135\247\136\246\137\245\140\244\141\243" +
    "\152\301\153\277\154\127\160\276\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\034\131\140" +
    "\142\310\143\307\145\303\146\304\147\306\154\127\161" +
    "\133\162\135\170\141\201\131\202\136\205\137\001\002" +
    "\000\016\002\uff52\003\uff52\125\uff52\156\uff52\157\uff52\206" +
    "\uff52\001\002\000\016\002\uff41\003\uff41\125\uff41\156\uff41" +
    "\157\uff41\206\uff41\001\002\000\016\002\uff53\003\uff53\125" +
    "\uff53\156\uff53\157\uff53\206\uff53\001\002\000\054\002\uff3e" +
    "\003\uff3e\125\uff3e\156\uff3e\157\uff3e\161\153\162\160\163" +
    "\150\164\156\165\151\166\152\167\157\171\144\172\155" +
    "\173\145\174\161\175\162\176\154\177\147\200\143\206" +
    "\uff3e\001\002\000\004\155\322\001\002\000\004\155\321" +
    "\001\002\000\042\155\320\161\153\162\160\163\150\164" +
    "\156\165\151\166\152\167\157\171\144\172\155\173\145" +
    "\174\161\175\162\176\154\177\147\200\143\001\002\000" +
    "\004\155\317\001\002\000\004\161\314\001\002\000\004" +
    "\161\311\001\002\000\022\131\140\154\127\161\133\162" +
    "\135\170\141\201\131\202\136\205\137\001\002\000\042" +
    "\155\313\161\153\162\160\163\150\164\156\165\151\166" +
    "\152\167\157\171\144\172\155\173\145\174\161\175\162" +
    "\176\154\177\147\200\143\001\002\000\016\002\uff43\003" +
    "\uff43\125\uff43\156\uff43\157\uff43\206\uff43\001\002\000\022" +
    "\131\140\154\127\161\133\162\135\170\141\201\131\202" +
    "\136\205\137\001\002\000\042\155\316\161\153\162\160" +
    "\163\150\164\156\165\151\166\152\167\157\171\144\172" +
    "\155\173\145\174\161\175\162\176\154\177\147\200\143" +
    "\001\002\000\016\002\uff42\003\uff42\125\uff42\156\uff42\157" +
    "\uff42\206\uff42\001\002\000\016\002\uff46\003\uff46\125\uff46" +
    "\156\uff46\157\uff46\206\uff46\001\002\000\016\002\uff54\003" +
    "\uff54\125\uff54\156\uff54\157\uff54\206\uff54\001\002\000\016" +
    "\002\uff55\003\uff55\125\uff55\156\uff55\157\uff55\206\uff55\001" +
    "\002\000\016\002\uff56\003\uff56\125\uff56\156\uff56\157\uff56" +
    "\206\uff56\001\002\000\004\133\324\001\002\000\016\002" +
    "\uff4d\003\uff4d\125\uff4d\156\uff4d\157\uff4d\206\uff4d\001\002" +
    "\000\024\131\140\154\127\160\327\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\054\002\uff4f" +
    "\003\uff4f\125\uff4f\156\uff4f\157\uff4f\161\153\162\160\163" +
    "\150\164\156\165\151\166\152\167\157\171\144\172\155" +
    "\173\145\174\161\175\162\176\154\177\147\200\143\206" +
    "\uff4f\001\002\000\022\131\140\154\127\161\133\162\135" +
    "\170\141\201\131\202\136\205\137\001\002\000\042\155" +
    "\331\161\153\162\160\163\150\164\156\165\151\166\152" +
    "\167\157\171\144\172\155\173\145\174\161\175\162\176" +
    "\154\177\147\200\143\001\002\000\016\002\uff51\003\uff51" +
    "\125\uff51\156\uff51\157\uff51\206\uff51\001\002\000\004\133" +
    "\333\001\002\000\016\002\uff4c\003\uff4c\125\uff4c\156\uff4c" +
    "\157\uff4c\206\uff4c\001\002\000\004\155\370\001\002\000" +
    "\004\155\365\001\002\000\004\161\357\001\002\000\042" +
    "\155\347\161\153\162\160\163\150\164\156\165\151\166" +
    "\152\167\157\171\144\172\155\173\145\174\161\175\162" +
    "\176\154\177\147\200\143\001\002\000\004\155\343\001" +
    "\002\000\004\161\ufeea\001\002\000\004\161\ufeeb\001\002" +
    "\000\004\156\344\001\002\000\040\131\140\133\251\134" +
    "\250\135\247\136\246\137\245\140\244\141\243\154\127" +
    "\161\133\162\135\170\141\201\131\202\136\205\137\001" +
    "\002\000\016\002\uff5d\003\uff5d\125\uff5d\156\uff5d\157\uff5d" +
    "\206\uff5d\001\002\000\054\002\uff5e\003\uff5e\125\uff5e\156" +
    "\uff5e\157\uff5e\161\153\162\160\163\150\164\156\165\151" +
    "\166\152\167\157\171\144\172\155\173\145\174\161\175" +
    "\162\176\154\177\147\200\143\206\uff5e\001\002\000\004" +
    "\156\350\001\002\000\020\133\351\142\354\143\353\144" +
    "\352\145\222\146\237\147\216\001\002\000\016\002\uff5a" +
    "\003\uff5a\125\uff5a\156\uff5a\157\uff5a\206\uff5a\001\002\000" +
    "\016\002\ufee9\003\ufee9\125\ufee9\156\ufee9\157\ufee9\206\ufee9" +
    "\001\002\000\016\002\uff57\003\uff57\125\uff57\156\uff57\157" +
    "\uff57\206\uff57\001\002\000\016\002\uff58\003\uff58\125\uff58" +
    "\156\uff58\157\uff58\206\uff58\001\002\000\016\002\uff59\003" +
    "\uff59\125\uff59\156\uff59\157\uff59\206\uff59\001\002\000\016" +
    "\002\ufee8\003\ufee8\125\ufee8\156\ufee8\157\ufee8\206\ufee8\001" +
    "\002\000\022\131\140\154\127\161\133\162\135\170\141" +
    "\201\131\202\136\205\137\001\002\000\042\155\361\161" +
    "\153\162\160\163\150\164\156\165\151\166\152\167\157" +
    "\171\144\172\155\173\145\174\161\175\162\176\154\177" +
    "\147\200\143\001\002\000\004\156\362\001\002\000\040" +
    "\131\140\133\251\134\250\135\247\136\246\137\245\140" +
    "\244\141\243\154\127\161\133\162\135\170\141\201\131" +
    "\202\136\205\137\001\002\000\016\002\uff5b\003\uff5b\125" +
    "\uff5b\156\uff5b\157\uff5b\206\uff5b\001\002\000\054\002\uff5c" +
    "\003\uff5c\125\uff5c\156\uff5c\157\uff5c\161\153\162\160\163" +
    "\150\164\156\165\151\166\152\167\157\171\144\172\155" +
    "\173\145\174\161\175\162\176\154\177\147\200\143\206" +
    "\uff5c\001\002\000\004\156\366\001\002\000\004\133\367" +
    "\001\002\000\016\002\uff5f\003\uff5f\125\uff5f\156\uff5f\157" +
    "\uff5f\206\uff5f\001\002\000\004\156\371\001\002\000\004" +
    "\133\372\001\002\000\016\002\uff60\003\uff60\125\uff60\156" +
    "\uff60\157\uff60\206\uff60\001\002\000\024\131\140\154\127" +
    "\160\375\161\133\162\135\170\141\201\131\202\136\205" +
    "\137\001\002\000\054\002\uff49\003\uff49\125\uff49\156\uff49" +
    "\157\uff49\161\153\162\160\163\150\164\156\165\151\166" +
    "\152\167\157\171\144\172\155\173\145\174\161\175\162" +
    "\176\154\177\147\200\143\206\uff49\001\002\000\022\131" +
    "\140\154\127\161\133\162\135\170\141\201\131\202\136" +
    "\205\137\001\002\000\042\155\377\161\153\162\160\163" +
    "\150\164\156\165\151\166\152\167\157\171\144\172\155" +
    "\173\145\174\161\175\162\176\154\177\147\200\143\001" +
    "\002\000\016\002\uff4b\003\uff4b\125\uff4b\156\uff4b\157\uff4b" +
    "\206\uff4b\001\002\000\024\131\140\154\127\160\u0102\161" +
    "\133\162\135\170\141\201\131\202\136\205\137\001\002" +
    "\000\054\002\uff48\003\uff48\125\uff48\156\uff48\157\uff48\161" +
    "\153\162\160\163\150\164\156\165\151\166\152\167\157" +
    "\171\144\172\155\173\145\174\161\175\162\176\154\177" +
    "\147\200\143\206\uff48\001\002\000\022\131\140\154\127" +
    "\161\133\162\135\170\141\201\131\202\136\205\137\001" +
    "\002\000\042\155\u0104\161\153\162\160\163\150\164\156" +
    "\165\151\166\152\167\157\171\144\172\155\173\145\174" +
    "\161\175\162\176\154\177\147\200\143\001\002\000\016" +
    "\002\uff4a\003\uff4a\125\uff4a\156\uff4a\157\uff4a\206\uff4a\001" +
    "\002\000\010\142\u0109\143\u0108\147\u0107\001\002\000\016" +
    "\002\uff25\003\uff25\125\uff25\156\uff25\157\uff25\206\uff25\001" +
    "\002\000\004\155\u0110\001\002\000\004\161\u010d\001\002" +
    "\000\004\161\u010a\001\002\000\022\131\140\154\127\161" +
    "\133\162\135\170\141\201\131\202\136\205\137\001\002" +
    "\000\042\155\u010c\161\153\162\160\163\150\164\156\165" +
    "\151\166\152\167\157\171\144\172\155\173\145\174\161" +
    "\175\162\176\154\177\147\200\143\001\002\000\016\002" +
    "\uff27\003\uff27\125\uff27\156\uff27\157\uff27\206\uff27\001\002" +
    "\000\022\131\140\154\127\161\133\162\135\170\141\201" +
    "\131\202\136\205\137\001\002\000\042\155\u010f\161\153" +
    "\162\160\163\150\164\156\165\151\166\152\167\157\171" +
    "\144\172\155\173\145\174\161\175\162\176\154\177\147" +
    "\200\143\001\002\000\016\002\uff26\003\uff26\125\uff26\156" +
    "\uff26\157\uff26\206\uff26\001\002\000\016\002\uff28\003\uff28" +
    "\125\uff28\156\uff28\157\uff28\206\uff28\001\002\000\016\002" +
    "\uffea\003\uffea\125\uffea\156\uffea\157\uffea\206\uffea\001\002" +
    "\000\016\002\uffeb\003\uffeb\125\uffeb\156\uffeb\157\uffeb\206" +
    "\uffeb\001\002\000\016\002\ufff0\003\ufff0\125\ufff0\156\ufff0" +
    "\157\ufff0\206\ufff0\001\002\000\016\002\ufff3\003\ufff3\125" +
    "\ufff3\156\u0116\157\ufff3\206\ufff3\001\002\000\054\002\uffec" +
    "\003\uffec\125\uffec\156\uffec\157\uffec\161\153\162\160\163" +
    "\150\164\156\165\151\166\152\167\157\171\144\172\155" +
    "\173\145\174\161\175\162\176\154\177\147\200\143\206" +
    "\uffec\001\002\000\232\004\015\005\014\006\057\007\025" +
    "\010\074\011\026\012\047\013\011\014\060\015\126\016" +
    "\071\017\124\020\061\021\107\022\024\023\123\024\121" +
    "\025\117\026\065\027\103\030\055\031\054\032\033\033" +
    "\032\034\075\035\027\036\115\037\023\040\022\041\116" +
    "\042\077\043\013\044\076\045\043\046\062\047\106\050" +
    "\056\051\070\052\112\053\105\054\020\055\012\056\102" +
    "\057\045\060\053\061\052\062\072\063\066\064\114\065" +
    "\042\066\040\067\036\070\037\071\110\072\051\073\050" +
    "\074\010\075\046\076\125\077\111\100\073\101\044\102" +
    "\035\103\041\104\031\105\104\106\063\131\140\154\127" +
    "\161\133\162\135\170\141\201\131\202\136\203\u0112\205" +
    "\137\001\002\000\016\002\uffef\003\uffef\125\uffef\156\uffef" +
    "\157\uffef\206\uffef\001\002\000\004\156\u011c\001\002\000" +
    "\004\156\u011a\001\002\000\012\144\352\145\222\146\237" +
    "\147\216\001\002\000\016\002\uff12\003\uff12\125\uff12\156" +
    "\uff12\157\uff12\206\uff12\001\002\000\040\131\140\133\251" +
    "\134\250\135\247\136\246\137\245\140\244\141\243\154" +
    "\u011d\161\133\162\135\170\141\201\131\202\136\205\137" +
    "\001\002\000\030\131\140\142\u0122\143\u0121\147\u0120\154" +
    "\127\161\133\162\135\170\141\201\131\202\136\205\137" +
    "\001\002\000\016\002\uff13\003\uff13\125\uff13\156\uff13\157" +
    "\uff13\206\uff13\001\002\000\054\002\uff14\003\uff14\125\uff14" +
    "\156\uff14\157\uff14\161\153\162\160\163\150\164\156\165" +
    "\151\166\152\167\157\171\144\172\155\173\145\174\161" +
    "\175\162\176\154\177\147\200\143\206\uff14\001\002\000" +
    "\004\155\u0129\001\002\000\004\161\u0126\001\002\000\004" +
    "\161\u0123\001\002\000\022\131\140\154\127\161\133\162" +
    "\135\170\141\201\131\202\136\205\137\001\002\000\042" +
    "\155\u0125\161\153\162\160\163\150\164\156\165\151\166" +
    "\152\167\157\171\144\172\155\173\145\174\161\175\162" +
    "\176\154\177\147\200\143\001\002\000\016\002\uff16\003" +
    "\uff16\125\uff16\156\uff16\157\uff16\206\uff16\001\002\000\022" +
    "\131\140\154\127\161\133\162\135\170\141\201\131\202" +
    "\136\205\137\001\002\000\042\155\u0128\161\153\162\160" +
    "\163\150\164\156\165\151\166\152\167\157\171\144\172" +
    "\155\173\145\174\161\175\162\176\154\177\147\200\143" +
    "\001\002\000\016\002\uff15\003\uff15\125\uff15\156\uff15\157" +
    "\uff15\206\uff15\001\002\000\016\002\uff17\003\uff17\125\uff17" +
    "\156\uff17\157\uff17\206\uff17\001\002\000\010\142\u012e\143" +
    "\u012d\147\u012c\001\002\000\016\002\uff1d\003\uff1d\125\uff1d" +
    "\156\uff1d\157\uff1d\206\uff1d\001\002\000\004\155\u0135\001" +
    "\002\000\004\161\u0132\001\002\000\004\161\u012f\001\002" +
    "\000\022\131\140\154\127\161\133\162\135\170\141\201" +
    "\131\202\136\205\137\001\002\000\042\155\u0131\161\153" +
    "\162\160\163\150\164\156\165\151\166\152\167\157\171" +
    "\144\172\155\173\145\174\161\175\162\176\154\177\147" +
    "\200\143\001\002\000\016\002\uff1f\003\uff1f\125\uff1f\156" +
    "\uff1f\157\uff1f\206\uff1f\001\002\000\022\131\140\154\127" +
    "\161\133\162\135\170\141\201\131\202\136\205\137\001" +
    "\002\000\042\155\u0134\161\153\162\160\163\150\164\156" +
    "\165\151\166\152\167\157\171\144\172\155\173\145\174" +
    "\161\175\162\176\154\177\147\200\143\001\002\000\016" +
    "\002\uff1e\003\uff1e\125\uff1e\156\uff1e\157\uff1e\206\uff1e\001" +
    "\002\000\016\002\uff20\003\uff20\125\uff20\156\uff20\157\uff20" +
    "\206\uff20\001\002\000\010\142\u013e\143\u013d\147\u013c\001" +
    "\002\000\016\002\uff7d\003\uff7d\125\uff7d\156\uff7d\157\uff7d" +
    "\206\uff7d\001\002\000\016\002\uff79\003\uff79\125\uff79\156" +
    "\uff79\157\uff79\206\uff79\001\002\000\016\002\uff7a\003\uff7a" +
    "\125\uff7a\156\uff7a\157\uff7a\206\uff7a\001\002\000\016\002" +
    "\uff7c\003\uff7c\125\uff7c\156\uff7c\157\uff7c\206\uff7c\001\002" +
    "\000\016\002\uff7b\003\uff7b\125\uff7b\156\uff7b\157\uff7b\206" +
    "\uff7b\001\002\000\004\155\u0145\001\002\000\004\161\u0142" +
    "\001\002\000\004\161\u013f\001\002\000\022\131\140\154" +
    "\127\161\133\162\135\170\141\201\131\202\136\205\137" +
    "\001\002\000\042\155\u0141\161\153\162\160\163\150\164" +
    "\156\165\151\166\152\167\157\171\144\172\155\173\145" +
    "\174\161\175\162\176\154\177\147\200\143\001\002\000" +
    "\016\002\uff7f\003\uff7f\125\uff7f\156\uff7f\157\uff7f\206\uff7f" +
    "\001\002\000\022\131\140\154\127\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\042\155\u0144" +
    "\161\153\162\160\163\150\164\156\165\151\166\152\167" +
    "\157\171\144\172\155\173\145\174\161\175\162\176\154" +
    "\177\147\200\143\001\002\000\016\002\uff7e\003\uff7e\125" +
    "\uff7e\156\uff7e\157\uff7e\206\uff7e\001\002\000\016\002\uff80" +
    "\003\uff80\125\uff80\156\uff80\157\uff80\206\uff80\001\002\000" +
    "\024\131\140\135\u0147\154\127\161\133\162\135\170\141" +
    "\201\131\202\136\205\137\001\002\000\004\155\u014c\001" +
    "\002\000\042\155\u0149\161\153\162\160\163\150\164\156" +
    "\165\151\166\152\167\157\171\144\172\155\173\145\174" +
    "\161\175\162\176\154\177\147\200\143\001\002\000\004" +
    "\156\u014a\001\002\000\004\133\u014b\001\002\000\016\002" +
    "\uff35\003\uff35\125\uff35\156\uff35\157\uff35\206\uff35\001\002" +
    "\000\004\156\u014d\001\002\000\020\133\251\134\250\135" +
    "\247\136\246\137\245\140\244\141\243\001\002\000\016" +
    "\002\uff34\003\uff34\125\uff34\156\uff34\157\uff34\206\uff34\001" +
    "\002\000\030\131\140\142\u0154\143\u0153\147\u0152\154\127" +
    "\161\133\162\135\170\141\201\131\202\136\205\137\001" +
    "\002\000\016\002\ufeff\003\ufeff\125\ufeff\156\ufeff\157\ufeff" +
    "\206\ufeff\001\002\000\054\002\ufefe\003\ufefe\125\ufefe\156" +
    "\ufefe\157\ufefe\161\153\162\160\163\150\164\156\165\151" +
    "\166\152\167\157\171\144\172\155\173\145\174\161\175" +
    "\162\176\154\177\147\200\143\206\ufefe\001\002\000\004" +
    "\155\u015b\001\002\000\004\161\u0158\001\002\000\004\161" +
    "\u0155\001\002\000\022\131\140\154\127\161\133\162\135" +
    "\170\141\201\131\202\136\205\137\001\002\000\042\155" +
    "\u0157\161\153\162\160\163\150\164\156\165\151\166\152" +
    "\167\157\171\144\172\155\173\145\174\161\175\162\176" +
    "\154\177\147\200\143\001\002\000\016\002\uff01\003\uff01" +
    "\125\uff01\156\uff01\157\uff01\206\uff01\001\002\000\022\131" +
    "\140\154\127\161\133\162\135\170\141\201\131\202\136" +
    "\205\137\001\002\000\042\155\u015a\161\153\162\160\163" +
    "\150\164\156\165\151\166\152\167\157\171\144\172\155" +
    "\173\145\174\161\175\162\176\154\177\147\200\143\001" +
    "\002\000\016\002\uff00\003\uff00\125\uff00\156\uff00\157\uff00" +
    "\206\uff00\001\002\000\016\002\uff02\003\uff02\125\uff02\156" +
    "\uff02\157\uff02\206\uff02\001\002\000\016\002\uff33\003\uff33" +
    "\125\uff33\156\uff33\157\uff33\206\uff33\001\002\000\016\002" +
    "\ufecf\003\ufecf\125\ufecf\156\ufecf\157\ufecf\206\ufecf\001\002" +
    "\000\016\002\ufece\003\ufece\125\ufece\156\ufece\157\ufece\206" +
    "\ufece\001\002\000\016\002\ufecd\003\ufecd\125\ufecd\156\ufecd" +
    "\157\ufecd\206\ufecd\001\002\000\016\002\uff31\003\uff31\125" +
    "\uff31\156\uff31\157\uff31\206\uff31\001\002\000\016\002\uff32" +
    "\003\uff32\125\uff32\156\uff32\157\uff32\206\uff32\001\002\000" +
    "\016\002\ufed0\003\ufed0\125\ufed0\156\ufed0\157\ufed0\206\ufed0" +
    "\001\002\000\052\002\ufff1\003\ufff1\125\ufff1\157\ufff1\161" +
    "\153\162\160\163\150\164\156\165\151\166\152\167\157" +
    "\171\144\172\155\173\145\174\161\175\162\176\154\177" +
    "\147\200\143\206\ufff1\001\002\000\016\002\ufff2\003\ufff2" +
    "\125\ufff2\156\u0167\157\ufff2\206\ufff2\001\002\000\054\002" +
    "\uffe9\003\uffe9\125\uffe9\156\uffe9\157\uffe9\161\153\162\160" +
    "\163\150\164\156\165\151\166\152\167\157\171\144\172" +
    "\155\173\145\174\161\175\162\176\154\177\147\200\143" +
    "\206\uffe9\001\002\000\016\002\uffee\003\uffee\125\uffee\156" +
    "\uffee\157\uffee\206\uffee\001\002\000\022\131\140\154\127" +
    "\161\133\162\135\170\141\201\131\202\136\205\137\001" +
    "\002\000\016\002\uffed\003\uffed\125\uffed\156\uffed\157\uffed" +
    "\206\uffed\001\002\000\016\002\ufed5\003\ufed5\125\ufed5\156" +
    "\ufed5\157\ufed5\206\ufed5\001\002\000\016\002\ufeda\003\ufeda" +
    "\125\ufeda\156\ufeda\157\ufeda\206\ufeda\001\002\000\004\156" +
    "\u0173\001\002\000\016\002\ufed9\003\ufed9\125\ufed9\156\ufed9" +
    "\157\ufed9\206\ufed9\001\002\000\016\002\ufed6\003\ufed6\125" +
    "\ufed6\156\ufed6\157\ufed6\206\ufed6\001\002\000\016\002\ufed7" +
    "\003\ufed7\125\ufed7\156\ufed7\157\ufed7\206\ufed7\001\002\000" +
    "\016\002\ufed8\003\ufed8\125\ufed8\156\ufed8\157\ufed8\206\ufed8" +
    "\001\002\000\016\002\ufedc\003\ufedc\125\ufedc\156\ufedc\157" +
    "\ufedc\206\ufedc\001\002\000\016\002\ufedb\003\ufedb\125\ufedb" +
    "\156\ufedb\157\ufedb\206\ufedb\001\002\000\054\002\uff86\003" +
    "\uff86\125\uff86\156\uff86\157\uff86\161\153\162\160\163\150" +
    "\164\156\165\151\166\152\167\157\171\144\172\155\173" +
    "\145\174\161\175\162\176\154\177\147\200\143\206\uff86" +
    "\001\002\000\022\131\140\154\127\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\054\002\uff87" +
    "\003\uff87\125\uff87\156\uff87\157\uff87\161\153\162\160\163" +
    "\150\164\156\165\151\166\152\167\157\171\144\172\155" +
    "\173\145\174\161\175\162\176\154\177\147\200\143\206" +
    "\uff87\001\002\000\030\131\140\142\u017a\143\u0179\147\u0178" +
    "\154\127\161\133\162\135\170\141\201\131\202\136\205" +
    "\137\001\002\000\016\002\ufefa\003\ufefa\125\ufefa\156\ufefa" +
    "\157\ufefa\206\ufefa\001\002\000\054\002\ufef9\003\ufef9\125" +
    "\ufef9\156\ufef9\157\ufef9\161\153\162\160\163\150\164\156" +
    "\165\151\166\152\167\157\171\144\172\155\173\145\174" +
    "\161\175\162\176\154\177\147\200\143\206\ufef9\001\002" +
    "\000\004\155\u0181\001\002\000\004\161\u017e\001\002\000" +
    "\004\161\u017b\001\002\000\022\131\140\154\127\161\133" +
    "\162\135\170\141\201\131\202\136\205\137\001\002\000" +
    "\042\155\u017d\161\153\162\160\163\150\164\156\165\151" +
    "\166\152\167\157\171\144\172\155\173\145\174\161\175" +
    "\162\176\154\177\147\200\143\001\002\000\016\002\ufefc" +
    "\003\ufefc\125\ufefc\156\ufefc\157\ufefc\206\ufefc\001\002\000" +
    "\022\131\140\154\127\161\133\162\135\170\141\201\131" +
    "\202\136\205\137\001\002\000\042\155\u0180\161\153\162" +
    "\160\163\150\164\156\165\151\166\152\167\157\171\144" +
    "\172\155\173\145\174\161\175\162\176\154\177\147\200" +
    "\143\001\002\000\016\002\ufefb\003\ufefb\125\ufefb\156\ufefb" +
    "\157\ufefb\206\ufefb\001\002\000\016\002\ufefd\003\ufefd\125" +
    "\ufefd\156\ufefd\157\ufefd\206\ufefd\001\002\000\030\131\140" +
    "\142\u0187\143\u0186\147\u0185\154\127\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\016\002\uff8c" +
    "\003\uff8c\125\uff8c\156\uff8c\157\uff8c\206\uff8c\001\002\000" +
    "\054\002\uff8b\003\uff8b\125\uff8b\156\uff8b\157\uff8b\161\153" +
    "\162\160\163\150\164\156\165\151\166\152\167\157\171" +
    "\144\172\155\173\145\174\161\175\162\176\154\177\147" +
    "\200\143\206\uff8b\001\002\000\004\155\u018e\001\002\000" +
    "\004\161\u018b\001\002\000\004\161\u0188\001\002\000\022" +
    "\131\140\154\127\161\133\162\135\170\141\201\131\202" +
    "\136\205\137\001\002\000\042\155\u018a\161\153\162\160" +
    "\163\150\164\156\165\151\166\152\167\157\171\144\172" +
    "\155\173\145\174\161\175\162\176\154\177\147\200\143" +
    "\001\002\000\016\002\uff8e\003\uff8e\125\uff8e\156\uff8e\157" +
    "\uff8e\206\uff8e\001\002\000\022\131\140\154\127\161\133" +
    "\162\135\170\141\201\131\202\136\205\137\001\002\000" +
    "\042\155\u018d\161\153\162\160\163\150\164\156\165\151" +
    "\166\152\167\157\171\144\172\155\173\145\174\161\175" +
    "\162\176\154\177\147\200\143\001\002\000\016\002\uff8d" +
    "\003\uff8d\125\uff8d\156\uff8d\157\uff8d\206\uff8d\001\002\000" +
    "\016\002\uff8f\003\uff8f\125\uff8f\156\uff8f\157\uff8f\206\uff8f" +
    "\001\002\000\030\131\140\142\u0194\143\u0193\147\u0192\154" +
    "\127\161\133\162\135\170\141\201\131\202\136\205\137" +
    "\001\002\000\016\002\uff37\003\uff37\125\uff37\156\uff37\157" +
    "\uff37\206\uff37\001\002\000\054\002\uff36\003\uff36\125\uff36" +
    "\156\uff36\157\uff36\161\153\162\160\163\150\164\156\165" +
    "\151\166\152\167\157\171\144\172\155\173\145\174\161" +
    "\175\162\176\154\177\147\200\143\206\uff36\001\002\000" +
    "\004\155\u019b\001\002\000\004\161\u0198\001\002\000\004" +
    "\161\u0195\001\002\000\022\131\140\154\127\161\133\162" +
    "\135\170\141\201\131\202\136\205\137\001\002\000\042" +
    "\155\u0197\161\153\162\160\163\150\164\156\165\151\166" +
    "\152\167\157\171\144\172\155\173\145\174\161\175\162" +
    "\176\154\177\147\200\143\001\002\000\016\002\uff39\003" +
    "\uff39\125\uff39\156\uff39\157\uff39\206\uff39\001\002\000\022" +
    "\131\140\154\127\161\133\162\135\170\141\201\131\202" +
    "\136\205\137\001\002\000\042\155\u019a\161\153\162\160" +
    "\163\150\164\156\165\151\166\152\167\157\171\144\172" +
    "\155\173\145\174\161\175\162\176\154\177\147\200\143" +
    "\001\002\000\016\002\uff38\003\uff38\125\uff38\156\uff38\157" +
    "\uff38\206\uff38\001\002\000\016\002\uff3a\003\uff3a\125\uff3a" +
    "\156\uff3a\157\uff3a\206\uff3a\001\002\000\054\002\uff72\003" +
    "\uff72\125\uff72\156\uff72\157\uff72\161\153\162\160\163\150" +
    "\164\156\165\151\166\152\167\157\171\144\172\155\173" +
    "\145\174\161\175\162\176\154\177\147\200\143\206\uff72" +
    "\001\002\000\004\156\u01a3\001\002\000\004\156\u019f\001" +
    "\002\000\004\154\u01a0\001\002\000\004\135\u01a1\001\002" +
    "\000\004\155\u01a2\001\002\000\016\002\uff6f\003\uff6f\125" +
    "\uff6f\156\uff6f\157\uff6f\206\uff6f\001\002\000\004\154\u01a4" +
    "\001\002\000\024\131\140\135\u01a5\154\127\161\133\162" +
    "\135\170\141\201\131\202\136\205\137\001\002\000\004" +
    "\155\u01a8\001\002\000\042\155\u01a7\161\153\162\160\163" +
    "\150\164\156\165\151\166\152\167\157\171\144\172\155" +
    "\173\145\174\161\175\162\176\154\177\147\200\143\001" +
    "\002\000\016\002\uff71\003\uff71\125\uff71\156\uff71\157\uff71" +
    "\206\uff71\001\002\000\016\002\uff70\003\uff70\125\uff70\156" +
    "\uff70\157\uff70\206\uff70\001\002\000\042\156\u01aa\161\153" +
    "\162\160\163\150\164\156\165\151\166\152\167\157\171" +
    "\144\172\155\173\145\174\161\175\162\176\154\177\147" +
    "\200\143\001\002\000\022\133\251\134\250\135\247\136" +
    "\246\137\245\140\244\141\243\154\u01ab\001\002\000\010" +
    "\142\342\143\341\147\u01ae\001\002\000\016\002\uff2b\003" +
    "\uff2b\125\uff2b\156\uff2b\157\uff2b\206\uff2b\001\002\000\004" +
    "\161\u01b0\001\002\000\004\155\u01af\001\002\000\016\002" +
    "\uff2d\003\uff2d\125\uff2d\156\uff2d\157\uff2d\206\uff2d\001\002" +
    "\000\022\131\140\154\127\161\133\162\135\170\141\201" +
    "\131\202\136\205\137\001\002\000\042\155\u01b2\161\153" +
    "\162\160\163\150\164\156\165\151\166\152\167\157\171" +
    "\144\172\155\173\145\174\161\175\162\176\154\177\147" +
    "\200\143\001\002\000\016\002\uff2c\003\uff2c\125\uff2c\156" +
    "\uff2c\157\uff2c\206\uff2c\001\002\000\016\002\uff29\003\uff29" +
    "\125\uff29\156\uff29\157\uff29\206\uff29\001\002\000\010\142" +
    "\u01b8\143\u01b6\147\u01b7\001\002\000\016\002\uff19\003\uff19" +
    "\125\uff19\156\uff19\157\uff19\206\uff19\001\002\000\004\161" +
    "\u01bd\001\002\000\004\155\u01bc\001\002\000\004\161\u01b9" +
    "\001\002\000\022\131\140\154\127\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\042\155\u01bb" +
    "\161\153\162\160\163\150\164\156\165\151\166\152\167" +
    "\157\171\144\172\155\173\145\174\161\175\162\176\154" +
    "\177\147\200\143\001\002\000\016\002\uff1b\003\uff1b\125" +
    "\uff1b\156\uff1b\157\uff1b\206\uff1b\001\002\000\016\002\uff1c" +
    "\003\uff1c\125\uff1c\156\uff1c\157\uff1c\206\uff1c\001\002\000" +
    "\022\131\140\154\127\161\133\162\135\170\141\201\131" +
    "\202\136\205\137\001\002\000\042\155\u01bf\161\153\162" +
    "\160\163\150\164\156\165\151\166\152\167\157\171\144" +
    "\172\155\173\145\174\161\175\162\176\154\177\147\200" +
    "\143\001\002\000\016\002\uff1a\003\uff1a\125\uff1a\156\uff1a" +
    "\157\uff1a\206\uff1a\001\002\000\030\131\140\142\u01c5\143" +
    "\u01c4\147\u01c3\154\127\161\133\162\135\170\141\201\131" +
    "\202\136\205\137\001\002\000\016\002\uff82\003\uff82\125" +
    "\uff82\156\uff82\157\uff82\206\uff82\001\002\000\054\002\uff81" +
    "\003\uff81\125\uff81\156\uff81\157\uff81\161\153\162\160\163" +
    "\150\164\156\165\151\166\152\167\157\171\144\172\155" +
    "\173\145\174\161\175\162\176\154\177\147\200\143\206" +
    "\uff81\001\002\000\004\155\u01cc\001\002\000\004\161\u01c9" +
    "\001\002\000\004\161\u01c6\001\002\000\022\131\140\154" +
    "\127\161\133\162\135\170\141\201\131\202\136\205\137" +
    "\001\002\000\042\155\u01c8\161\153\162\160\163\150\164" +
    "\156\165\151\166\152\167\157\171\144\172\155\173\145" +
    "\174\161\175\162\176\154\177\147\200\143\001\002\000" +
    "\016\002\uff84\003\uff84\125\uff84\156\uff84\157\uff84\206\uff84" +
    "\001\002\000\022\131\140\154\127\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\042\155\u01cb" +
    "\161\153\162\160\163\150\164\156\165\151\166\152\167" +
    "\157\171\144\172\155\173\145\174\161\175\162\176\154" +
    "\177\147\200\143\001\002\000\016\002\uff83\003\uff83\125" +
    "\uff83\156\uff83\157\uff83\206\uff83\001\002\000\016\002\uff85" +
    "\003\uff85\125\uff85\156\uff85\157\uff85\206\uff85\001\002\000" +
    "\016\002\uff30\003\uff30\125\uff30\156\uff30\157\uff30\206\uff30" +
    "\001\002\000\016\002\uff2e\003\uff2e\125\uff2e\156\uff2e\157" +
    "\uff2e\206\uff2e\001\002\000\016\002\uff2f\003\uff2f\125\uff2f" +
    "\156\uff2f\157\uff2f\206\uff2f\001\002\000\042\156\u01d1\161" +
    "\153\162\160\163\150\164\156\165\151\166\152\167\157" +
    "\171\144\172\155\173\145\174\161\175\162\176\154\177" +
    "\147\200\143\001\002\000\022\133\251\134\250\135\247" +
    "\136\246\137\245\140\244\141\243\154\u01d2\001\002\000" +
    "\010\142\342\143\341\147\u01d5\001\002\000\016\002\uff0f" +
    "\003\uff0f\125\uff0f\156\uff0f\157\uff0f\206\uff0f\001\002\000" +
    "\004\161\u01d7\001\002\000\004\155\u01d6\001\002\000\016" +
    "\002\uff11\003\uff11\125\uff11\156\uff11\157\uff11\206\uff11\001" +
    "\002\000\022\131\140\154\127\161\133\162\135\170\141" +
    "\201\131\202\136\205\137\001\002\000\042\155\u01d9\161" +
    "\153\162\160\163\150\164\156\165\151\166\152\167\157" +
    "\171\144\172\155\173\145\174\161\175\162\176\154\177" +
    "\147\200\143\001\002\000\016\002\uff10\003\uff10\125\uff10" +
    "\156\uff10\157\uff10\206\uff10\001\002\000\010\142\u01de\143" +
    "\u01dd\147\u01dc\001\002\000\016\002\uff07\003\uff07\125\uff07" +
    "\156\uff07\157\uff07\206\uff07\001\002\000\004\155\u01e5\001" +
    "\002\000\004\161\u01e2\001\002\000\004\161\u01df\001\002" +
    "\000\022\131\140\154\127\161\133\162\135\170\141\201" +
    "\131\202\136\205\137\001\002\000\042\155\u01e1\161\153" +
    "\162\160\163\150\164\156\165\151\166\152\167\157\171" +
    "\144\172\155\173\145\174\161\175\162\176\154\177\147" +
    "\200\143\001\002\000\016\002\uff09\003\uff09\125\uff09\156" +
    "\uff09\157\uff09\206\uff09\001\002\000\022\131\140\154\127" +
    "\161\133\162\135\170\141\201\131\202\136\205\137\001" +
    "\002\000\042\155\u01e4\161\153\162\160\163\150\164\156" +
    "\165\151\166\152\167\157\171\144\172\155\173\145\174" +
    "\161\175\162\176\154\177\147\200\143\001\002\000\016" +
    "\002\uff08\003\uff08\125\uff08\156\uff08\157\uff08\206\uff08\001" +
    "\002\000\016\002\uff0a\003\uff0a\125\uff0a\156\uff0a\157\uff0a" +
    "\206\uff0a\001\002\000\010\142\u01ea\143\u01e8\147\u01e9\001" +
    "\002\000\016\002\uff21\003\uff21\125\uff21\156\uff21\157\uff21" +
    "\206\uff21\001\002\000\004\161\u01ef\001\002\000\004\155" +
    "\u01ee\001\002\000\004\161\u01eb\001\002\000\022\131\140" +
    "\154\127\161\133\162\135\170\141\201\131\202\136\205" +
    "\137\001\002\000\042\155\u01ed\161\153\162\160\163\150" +
    "\164\156\165\151\166\152\167\157\171\144\172\155\173" +
    "\145\174\161\175\162\176\154\177\147\200\143\001\002" +
    "\000\016\002\uff23\003\uff23\125\uff23\156\uff23\157\uff23\206" +
    "\uff23\001\002\000\016\002\uff24\003\uff24\125\uff24\156\uff24" +
    "\157\uff24\206\uff24\001\002\000\022\131\140\154\127\161" +
    "\133\162\135\170\141\201\131\202\136\205\137\001\002" +
    "\000\042\155\u01f1\161\153\162\160\163\150\164\156\165" +
    "\151\166\152\167\157\171\144\172\155\173\145\174\161" +
    "\175\162\176\154\177\147\200\143\001\002\000\016\002" +
    "\uff22\003\uff22\125\uff22\156\uff22\157\uff22\206\uff22\001\002" +
    "\000\010\142\u01f6\143\u01f4\147\u01f5\001\002\000\016\002" +
    "\uff0b\003\uff0b\125\uff0b\156\uff0b\157\uff0b\206\uff0b\001\002" +
    "\000\004\161\u01fb\001\002\000\004\155\u01fa\001\002\000" +
    "\004\161\u01f7\001\002\000\022\131\140\154\127\161\133" +
    "\162\135\170\141\201\131\202\136\205\137\001\002\000" +
    "\042\155\u01f9\161\153\162\160\163\150\164\156\165\151" +
    "\166\152\167\157\171\144\172\155\173\145\174\161\175" +
    "\162\176\154\177\147\200\143\001\002\000\016\002\uff0d" +
    "\003\uff0d\125\uff0d\156\uff0d\157\uff0d\206\uff0d\001\002\000" +
    "\016\002\uff0e\003\uff0e\125\uff0e\156\uff0e\157\uff0e\206\uff0e" +
    "\001\002\000\022\131\140\154\127\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\042\155\u01fd" +
    "\161\153\162\160\163\150\164\156\165\151\166\152\167" +
    "\157\171\144\172\155\173\145\174\161\175\162\176\154" +
    "\177\147\200\143\001\002\000\016\002\uff0c\003\uff0c\125" +
    "\uff0c\156\uff0c\157\uff0c\206\uff0c\001\002\000\052\002\uffce" +
    "\003\uffce\125\uffce\157\uffce\161\153\162\160\163\150\164" +
    "\156\165\151\166\152\167\157\171\144\172\155\173\145" +
    "\174\161\175\162\176\154\177\147\200\143\206\uffce\001" +
    "\002\000\010\142\u0206\143\u0204\147\u0205\001\002\000\016" +
    "\002\uff6b\003\uff6b\125\uff6b\156\uff6b\157\uff6b\206\uff6b\001" +
    "\002\000\016\002\uff68\003\uff68\125\uff68\156\uff68\157\uff68" +
    "\206\uff68\001\002\000\016\002\uff69\003\uff69\125\uff69\156" +
    "\uff69\157\uff69\206\uff69\001\002\000\016\002\uff6a\003\uff6a" +
    "\125\uff6a\156\uff6a\157\uff6a\206\uff6a\001\002\000\004\161" +
    "\u020b\001\002\000\004\155\u020a\001\002\000\004\161\u0207" +
    "\001\002\000\022\131\140\154\127\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\042\155\u0209" +
    "\161\153\162\160\163\150\164\156\165\151\166\152\167" +
    "\157\171\144\172\155\173\145\174\161\175\162\176\154" +
    "\177\147\200\143\001\002\000\016\002\uff6d\003\uff6d\125" +
    "\uff6d\156\uff6d\157\uff6d\206\uff6d\001\002\000\016\002\uff6e" +
    "\003\uff6e\125\uff6e\156\uff6e\157\uff6e\206\uff6e\001\002\000" +
    "\022\131\140\154\127\161\133\162\135\170\141\201\131" +
    "\202\136\205\137\001\002\000\042\155\u020d\161\153\162" +
    "\160\163\150\164\156\165\151\166\152\167\157\171\144" +
    "\172\155\173\145\174\161\175\162\176\154\177\147\200" +
    "\143\001\002\000\016\002\uff6c\003\uff6c\125\uff6c\156\uff6c" +
    "\157\uff6c\206\uff6c\001\002\000\010\142\u0212\143\u0210\147" +
    "\u0211\001\002\000\016\002\uff03\003\uff03\125\uff03\156\uff03" +
    "\157\uff03\206\uff03\001\002\000\004\161\u0217\001\002\000" +
    "\004\155\u0216\001\002\000\004\161\u0213\001\002\000\022" +
    "\131\140\154\127\161\133\162\135\170\141\201\131\202" +
    "\136\205\137\001\002\000\042\155\u0215\161\153\162\160" +
    "\163\150\164\156\165\151\166\152\167\157\171\144\172" +
    "\155\173\145\174\161\175\162\176\154\177\147\200\143" +
    "\001\002\000\016\002\uff05\003\uff05\125\uff05\156\uff05\157" +
    "\uff05\206\uff05\001\002\000\016\002\uff06\003\uff06\125\uff06" +
    "\156\uff06\157\uff06\206\uff06\001\002\000\022\131\140\154" +
    "\127\161\133\162\135\170\141\201\131\202\136\205\137" +
    "\001\002\000\042\155\u0219\161\153\162\160\163\150\164" +
    "\156\165\151\166\152\167\157\171\144\172\155\173\145" +
    "\174\161\175\162\176\154\177\147\200\143\001\002\000" +
    "\016\002\uff04\003\uff04\125\uff04\156\uff04\157\uff04\206\uff04" +
    "\001\002\000\022\131\140\154\127\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\016\002\uffc3" +
    "\003\uffc3\125\uffc3\156\u022b\157\uffc3\206\uffc3\001\002\000" +
    "\054\002\uffc1\003\uffc1\125\uffc1\156\uffc1\157\uffc1\161\153" +
    "\162\160\163\150\164\156\165\151\166\152\167\157\171" +
    "\144\172\155\173\145\174\161\175\162\176\154\177\147" +
    "\200\143\206\uffc1\001\002\000\022\131\140\154\127\161" +
    "\133\162\135\170\141\201\131\202\136\205\137\001\002" +
    "\000\014\002\uffc9\003\uffc9\125\uffc9\157\uffc9\206\uffc9\001" +
    "\002\000\010\157\uffc6\205\u0220\206\uffc6\001\002\000\010" +
    "\156\uffc5\157\uffc5\206\uffc5\001\002\000\006\157\ufff9\206" +
    "\170\001\002\000\010\156\u0223\157\uffc7\206\uffc7\001\002" +
    "\000\004\205\u0224\001\002\000\010\156\uffc4\157\uffc4\206" +
    "\uffc4\001\002\000\004\157\u0226\001\002\000\240\003\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb" +
    "\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076" +
    "\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb" +
    "\105\ufffb\106\ufffb\117\ufffb\122\ufffb\125\ufffb\126\ufffb\127" +
    "\ufffb\130\ufffb\132\ufffb\157\ufffb\204\007\205\ufffb\206\ufffb" +
    "\001\002\000\010\003\174\125\u0228\157\u0229\001\002\000" +
    "\014\002\uffca\003\uffca\125\uffca\157\uffca\206\uffca\001\002" +
    "\000\242\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073" +
    "\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb" +
    "\102\ufffb\103\ufffb\104\ufffb\105\ufffb\106\ufffb\117\ufffb\122" +
    "\ufffb\125\ufffb\126\ufffb\127\ufffb\130\ufffb\132\ufffb\157\ufffb" +
    "\204\007\205\ufffb\206\ufffb\001\002\000\052\002\uffcd\003" +
    "\uffcd\125\uffcd\157\uffcd\161\153\162\160\163\150\164\156" +
    "\165\151\166\152\167\157\171\144\172\155\173\145\174" +
    "\161\175\162\176\154\177\147\200\143\206\uffcd\001\002" +
    "\000\022\131\140\154\127\161\133\162\135\170\141\201" +
    "\131\202\136\205\137\001\002\000\054\002\uffc0\003\uffc0" +
    "\125\uffc0\156\uffc0\157\uffc0\161\153\162\160\163\150\164" +
    "\156\165\151\166\152\167\157\171\144\172\155\173\145" +
    "\174\161\175\162\176\154\177\147\200\143\206\uffc0\001" +
    "\002\000\052\002\uffcc\003\uffcc\125\uffcc\157\uffcc\161\153" +
    "\162\160\163\150\164\156\165\151\166\152\167\157\171" +
    "\144\172\155\173\145\174\161\175\162\176\154\177\147" +
    "\200\143\206\uffcc\001\002\000\042\156\u022f\161\153\162" +
    "\160\163\150\164\156\165\151\166\152\167\157\171\144" +
    "\172\155\173\145\174\161\175\162\176\154\177\147\200" +
    "\143\001\002\000\022\133\251\134\250\135\247\136\246" +
    "\137\245\140\244\141\243\154\u0230\001\002\000\010\142" +
    "\342\143\341\147\u0233\001\002\000\016\002\uff88\003\uff88" +
    "\125\uff88\156\uff88\157\uff88\206\uff88\001\002\000\004\161" +
    "\u0235\001\002\000\004\155\u0234\001\002\000\016\002\uff8a" +
    "\003\uff8a\125\uff8a\156\uff8a\157\uff8a\206\uff8a\001\002\000" +
    "\022\131\140\154\127\161\133\162\135\170\141\201\131" +
    "\202\136\205\137\001\002\000\042\155\u0237\161\153\162" +
    "\160\163\150\164\156\165\151\166\152\167\157\171\144" +
    "\172\155\173\145\174\161\175\162\176\154\177\147\200" +
    "\143\001\002\000\016\002\uff89\003\uff89\125\uff89\156\uff89" +
    "\157\uff89\206\uff89\001\002\000\004\156\u0241\001\002\000" +
    "\030\131\140\142\u023d\143\u023c\147\u023b\154\127\161\133" +
    "\162\135\170\141\201\131\202\136\205\137\001\002\000" +
    "\054\002\uff67\003\uff67\125\uff67\156\uff67\157\uff67\161\153" +
    "\162\160\163\150\164\156\165\151\166\152\167\157\171" +
    "\144\172\155\173\145\174\161\175\162\176\154\177\147" +
    "\200\143\206\uff67\001\002\000\004\155\u0240\001\002\000" +
    "\004\155\u023f\001\002\000\004\155\u023e\001\002\000\016" +
    "\002\uff65\003\uff65\125\uff65\156\uff65\157\uff65\206\uff65\001" +
    "\002\000\016\002\uff64\003\uff64\125\uff64\156\uff64\157\uff64" +
    "\206\uff64\001\002\000\016\002\uff66\003\uff66\125\uff66\156" +
    "\uff66\157\uff66\206\uff66\001\002\000\022\131\140\154\127" +
    "\161\133\162\135\170\141\201\131\202\136\205\137\001" +
    "\002\000\054\002\uff63\003\uff63\125\uff63\156\uff63\157\uff63" +
    "\161\153\162\160\163\150\164\156\165\151\166\152\167" +
    "\157\171\144\172\155\173\145\174\161\175\162\176\154" +
    "\177\147\200\143\206\uff63\001\002\000\004\156\ufed3\001" +
    "\002\000\004\156\ufed1\001\002\000\004\156\u0249\001\002" +
    "\000\054\002\uff62\003\uff62\125\uff62\156\uff62\157\uff62\161" +
    "\153\162\160\163\150\164\156\165\151\166\152\167\157" +
    "\171\144\172\155\173\145\174\161\175\162\176\154\177" +
    "\147\200\143\206\uff62\001\002\000\004\156\ufed2\001\002" +
    "\000\004\156\ufed4\001\002\000\022\131\140\154\127\161" +
    "\133\162\135\170\141\201\131\202\136\205\137\001\002" +
    "\000\054\002\uff61\003\uff61\125\uff61\156\uff61\157\uff61\161" +
    "\153\162\160\163\150\164\156\165\151\166\152\167\157" +
    "\171\144\172\155\173\145\174\161\175\162\176\154\177" +
    "\147\200\143\206\uff61\001\002\000\014\002\uffc8\003\uffc8" +
    "\125\uffc8\157\uffc8\206\uffc8\001\002\000\012\002\ufffd\003" +
    "\ufffd\125\ufffd\157\ufffd\001\002\000\004\156\u0251\001\002" +
    "\000\004\156\u024f\001\002\000\012\144\352\145\222\146" +
    "\237\147\216\001\002\000\016\002\uff98\003\uff98\125\uff98" +
    "\156\uff98\157\uff98\206\uff98\001\002\000\040\131\140\133" +
    "\251\134\250\135\247\136\246\137\245\140\244\141\243" +
    "\154\u0252\161\133\162\135\170\141\201\131\202\136\205" +
    "\137\001\002\000\030\131\140\142\u0257\143\u0256\147\u0255" +
    "\154\127\161\133\162\135\170\141\201\131\202\136\205" +
    "\137\001\002\000\016\002\uff9a\003\uff9a\125\uff9a\156\uff9a" +
    "\157\uff9a\206\uff9a\001\002\000\054\002\uff99\003\uff99\125" +
    "\uff99\156\uff99\157\uff99\161\153\162\160\163\150\164\156" +
    "\165\151\166\152\167\157\171\144\172\155\173\145\174" +
    "\161\175\162\176\154\177\147\200\143\206\uff99\001\002" +
    "\000\004\155\u025e\001\002\000\004\161\u025b\001\002\000" +
    "\004\161\u0258\001\002\000\022\131\140\154\127\161\133" +
    "\162\135\170\141\201\131\202\136\205\137\001\002\000" +
    "\042\155\u025a\161\153\162\160\163\150\164\156\165\151" +
    "\166\152\167\157\171\144\172\155\173\145\174\161\175" +
    "\162\176\154\177\147\200\143\001\002\000\016\002\uff9c" +
    "\003\uff9c\125\uff9c\156\uff9c\157\uff9c\206\uff9c\001\002\000" +
    "\022\131\140\154\127\161\133\162\135\170\141\201\131" +
    "\202\136\205\137\001\002\000\042\155\u025d\161\153\162" +
    "\160\163\150\164\156\165\151\166\152\167\157\171\144" +
    "\172\155\173\145\174\161\175\162\176\154\177\147\200" +
    "\143\001\002\000\016\002\uff9b\003\uff9b\125\uff9b\156\uff9b" +
    "\157\uff9b\206\uff9b\001\002\000\016\002\uff9d\003\uff9d\125" +
    "\uff9d\156\uff9d\157\uff9d\206\uff9d\001\002\000\004\156\u0271" +
    "\001\002\000\004\156\u026b\001\002\000\004\156\u0269\001" +
    "\002\000\004\156\u0263\001\002\000\012\142\u0268\144\u0264" +
    "\145\u0265\146\u0266\001\002\000\016\002\ufee2\003\ufee2\125" +
    "\ufee2\156\ufee2\157\ufee2\206\ufee2\001\002\000\016\002\ufee4" +
    "\003\ufee4\125\ufee4\156\ufee4\157\ufee4\206\ufee4\001\002\000" +
    "\016\002\ufee3\003\ufee3\125\ufee3\156\ufee3\157\ufee3\206\ufee3" +
    "\001\002\000\016\002\uff91\003\uff91\125\uff91\156\uff91\157" +
    "\uff91\206\uff91\001\002\000\016\002\ufee1\003\ufee1\125\ufee1" +
    "\156\ufee1\157\ufee1\206\ufee1\001\002\000\012\144\352\145" +
    "\222\146\237\147\216\001\002\000\016\002\uff92\003\uff92" +
    "\125\uff92\156\uff92\157\uff92\206\uff92\001\002\000\012\143" +
    "\u0270\144\u026c\145\u026d\146\u026f\001\002\000\016\002\ufede" +
    "\003\ufede\125\ufede\156\ufede\157\ufede\206\ufede\001\002\000" +
    "\016\002\ufee0\003\ufee0\125\ufee0\156\ufee0\157\ufee0\206\ufee0" +
    "\001\002\000\016\002\uff90\003\uff90\125\uff90\156\uff90\157" +
    "\uff90\206\uff90\001\002\000\016\002\ufedf\003\ufedf\125\ufedf" +
    "\156\ufedf\157\ufedf\206\ufedf\001\002\000\016\002\ufedd\003" +
    "\ufedd\125\ufedd\156\ufedd\157\ufedd\206\ufedd\001\002\000\040" +
    "\131\140\133\251\134\250\135\247\136\246\137\245\140" +
    "\244\141\243\154\u0272\161\133\162\135\170\141\201\131" +
    "\202\136\205\137\001\002\000\030\131\140\142\u0277\143" +
    "\u0276\147\u0275\154\127\161\133\162\135\170\141\201\131" +
    "\202\136\205\137\001\002\000\016\002\uff94\003\uff94\125" +
    "\uff94\156\uff94\157\uff94\206\uff94\001\002\000\054\002\uff93" +
    "\003\uff93\125\uff93\156\uff93\157\uff93\161\153\162\160\163" +
    "\150\164\156\165\151\166\152\167\157\171\144\172\155" +
    "\173\145\174\161\175\162\176\154\177\147\200\143\206" +
    "\uff93\001\002\000\004\155\u027e\001\002\000\004\161\u027b" +
    "\001\002\000\004\161\u0278\001\002\000\022\131\140\154" +
    "\127\161\133\162\135\170\141\201\131\202\136\205\137" +
    "\001\002\000\042\155\u027a\161\153\162\160\163\150\164" +
    "\156\165\151\166\152\167\157\171\144\172\155\173\145" +
    "\174\161\175\162\176\154\177\147\200\143\001\002\000" +
    "\016\002\uff96\003\uff96\125\uff96\156\uff96\157\uff96\206\uff96" +
    "\001\002\000\022\131\140\154\127\161\133\162\135\170" +
    "\141\201\131\202\136\205\137\001\002\000\042\155\u027d" +
    "\161\153\162\160\163\150\164\156\165\151\166\152\167" +
    "\157\171\144\172\155\173\145\174\161\175\162\176\154" +
    "\177\147\200\143\001\002\000\016\002\uff95\003\uff95\125" +
    "\uff95\156\uff95\157\uff95\206\uff95\001\002\000\016\002\uff97" +
    "\003\uff97\125\uff97\156\uff97\157\uff97\206\uff97\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u027d\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\016\006\066" +
    "\011\015\012\117\016\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u024b\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\u0245\020\127\022\133\036\u0244\001" +
    "\001\000\012\017\u0239\020\127\022\133\035\u0237\001\001" +
    "\000\002\001\001\000\010\017\u022d\020\127\022\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\u021b" +
    "\020\127\022\133\024\u021d\025\u021a\001\001\000\004\027" +
    "\u020e\001\001\000\002\001\001\000\010\027\u01ff\031\u0202" +
    "\040\355\001\001\000\010\017\u01fd\020\127\022\133\001" +
    "\001\000\004\027\u01f2\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\u01e6\001\001\000\004\027\u01da\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\u01cf" +
    "\020\127\022\133\001\001\000\004\037\u01cc\001\001\000" +
    "\002\001\001\000\012\017\u01c1\020\127\022\133\027\u01c0" +
    "\001\001\000\004\027\u01b4\001\001\000\002\001\001\000" +
    "\004\035\u01b2\001\001\000\010\017\u01a8\020\127\022\133" +
    "\001\001\000\004\030\u019d\001\001\000\010\017\u019b\020" +
    "\127\022\133\001\001\000\012\017\u0190\020\127\022\133" +
    "\027\u018f\001\001\000\012\017\u0183\020\127\022\133\027" +
    "\u0182\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\u0176\020\127\022\133\027\u0175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\u0171\020\127" +
    "\022\133\035\u016a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\u0163\014\u0165\017\u0164" +
    "\020\127\022\133\001\001\000\010\017\u0162\020\127\022" +
    "\133\001\001\000\004\037\u015b\001\001\000\002\001\001" +
    "\000\012\017\u0150\020\127\022\133\027\u014f\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\u0139\031\u013a" +
    "\040\355\001\001\000\004\027\u012a\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\u0113\011\u0110\013\u0112" +
    "\017\u0114\020\127\022\133\001\001\000\004\027\u0105\001" +
    "\001\000\002\001\001\000\006\030\235\040\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\166\020\127\022\133\001\001\000\010\017\165" +
    "\020\127\022\133\001\001\000\002\001\001\000\010\017" +
    "\131\020\127\022\133\001\001\000\002\001\001\000\010" +
    "\017\163\020\127\022\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\145\001\001\000\002\001\001" +
    "\000\010\017\141\020\127\022\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\162" +
    "\020\127\022\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\145\001\001\000\004\021\145\001" +
    "\001\000\002\001\001\000\004\021\145\001\001\000\006" +
    "\015\170\021\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\172\003\004\004\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\175\004\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\336\020\127\022\133\032\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\251\020\127\022\133\027\241\001" +
    "\001\000\010\017\163\020\127\022\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\256" +
    "\020\127\022\133\001\001\000\004\021\145\001\001\000" +
    "\002\001\001\000\010\017\261\020\127\022\133\001\001" +
    "\000\004\021\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\265\020\127\022\133\001\001\000\004" +
    "\021\145\001\001\000\002\001\001\000\010\017\272\020" +
    "\127\022\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\145\001\001\000\002\001\001\000\012\017" +
    "\301\020\127\022\133\027\277\001\001\000\010\017\304" +
    "\020\127\022\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\311\020\127\022\133\001\001\000\004\021\145\001" +
    "\001\000\002\001\001\000\010\017\314\020\127\022\133" +
    "\001\001\000\004\021\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\325\020\127\022\133\001\001\000\004\021\145\001\001" +
    "\000\010\017\327\020\127\022\133\001\001\000\004\021" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\345\020\127\022\133\027\344\001\001\000\002\001\001" +
    "\000\004\021\145\001\001\000\002\001\001\000\006\031" +
    "\354\040\355\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\357\020\127\022\133\001\001" +
    "\000\004\021\145\001\001\000\002\001\001\000\012\017" +
    "\363\020\127\022\133\027\362\001\001\000\002\001\001" +
    "\000\004\021\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\373\020\127\022\133\001" +
    "\001\000\004\021\145\001\001\000\010\017\375\020\127" +
    "\022\133\001\001\000\004\021\145\001\001\000\002\001" +
    "\001\000\010\017\u0100\020\127\022\133\001\001\000\004" +
    "\021\145\001\001\000\010\017\u0102\020\127\022\133\001" +
    "\001\000\004\021\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\u010a\020\127\022\133" +
    "\001\001\000\004\021\145\001\001\000\002\001\001\000" +
    "\010\017\u010d\020\127\022\133\001\001\000\004\021\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\145\001\001\000\014\011\u0110\013\u0116\017" +
    "\u0114\020\127\022\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\u011a\040\355\001" +
    "\001\000\002\001\001\000\012\017\u011e\020\127\022\133" +
    "\027\u011d\001\001\000\010\017\163\020\127\022\133\001" +
    "\001\000\002\001\001\000\004\021\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\u0123\020\127\022\133\001\001\000\004\021\145\001\001" +
    "\000\002\001\001\000\010\017\u0126\020\127\022\133\001" +
    "\001\000\004\021\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\u012f" +
    "\020\127\022\133\001\001\000\004\021\145\001\001\000" +
    "\002\001\001\000\010\017\u0132\020\127\022\133\001\001" +
    "\000\004\021\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\u013f\020\127\022\133\001\001\000\004\021\145\001" +
    "\001\000\002\001\001\000\010\017\u0142\020\127\022\133" +
    "\001\001\000\004\021\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\u0147\020\127\022\133\001\001" +
    "\000\002\001\001\000\004\021\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\u014d\001\001\000\002\001\001\000\010\017" +
    "\163\020\127\022\133\001\001\000\002\001\001\000\004" +
    "\021\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\u0155\020\127\022\133\001\001" +
    "\000\004\021\145\001\001\000\002\001\001\000\010\017" +
    "\u0158\020\127\022\133\001\001\000\004\021\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\145\001\001\000\002\001\001\000\004\021\145\001\001" +
    "\000\002\001\001\000\012\014\u0167\017\u0164\020\127\022" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\145\001\001\000\010\017" +
    "\u0173\020\127\022\133\001\001\000\004\021\145\001\001" +
    "\000\010\017\163\020\127\022\133\001\001\000\002\001" +
    "\001\000\004\021\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\u017b\020\127\022" +
    "\133\001\001\000\004\021\145\001\001\000\002\001\001" +
    "\000\010\017\u017e\020\127\022\133\001\001\000\004\021" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\163\020\127\022\133\001\001\000\002\001\001\000" +
    "\004\021\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\u0188\020\127\022\133\001" +
    "\001\000\004\021\145\001\001\000\002\001\001\000\010" +
    "\017\u018b\020\127\022\133\001\001\000\004\021\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\163" +
    "\020\127\022\133\001\001\000\002\001\001\000\004\021" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\u0195\020\127\022\133\001\001\000" +
    "\004\021\145\001\001\000\002\001\001\000\010\017\u0198" +
    "\020\127\022\133\001\001\000\004\021\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\u01a5\020\127\022\133\001\001\000" +
    "\002\001\001\000\004\021\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\145\001\001\000\004\027" +
    "\u01ab\001\001\000\004\032\u01ac\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\u01b0\020\127\022\133\001\001\000\004\021\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\u01b9\020\127\022\133\001" +
    "\001\000\004\021\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\u01bd\020\127\022\133\001\001\000" +
    "\004\021\145\001\001\000\002\001\001\000\010\017\163" +
    "\020\127\022\133\001\001\000\002\001\001\000\004\021" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\u01c6\020\127\022\133\001\001\000" +
    "\004\021\145\001\001\000\002\001\001\000\010\017\u01c9" +
    "\020\127\022\133\001\001\000\004\021\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\145\001\001\000" +
    "\004\027\u01d2\001\001\000\004\032\u01d3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\u01d7\020\127\022\133\001\001\000\004" +
    "\021\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\u01df\020\127\022\133\001\001\000" +
    "\004\021\145\001\001\000\002\001\001\000\010\017\u01e2" +
    "\020\127\022\133\001\001\000\004\021\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\u01eb\020\127\022\133\001\001\000\004" +
    "\021\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\u01ef\020\127\022\133\001\001\000\004\021\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\u01f7\020\127\022\133\001\001\000\004\021" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\u01fb\020\127\022\133\001\001\000\004\021\145\001" +
    "\001\000\002\001\001\000\004\021\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\u0207\020\127\022\133\001" +
    "\001\000\004\021\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\u020b\020\127\022\133\001\001\000" +
    "\004\021\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\u0213\020\127\022\133\001\001" +
    "\000\004\021\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\u0217\020\127\022\133\001\001\000\004" +
    "\021\145\001\001\000\002\001\001\000\010\017\u022c\020" +
    "\127\022\133\001\001\000\002\001\001\000\004\021\145" +
    "\001\001\000\010\017\u0229\020\127\022\133\001\001\000" +
    "\002\001\001\000\006\023\u0220\026\u0221\001\001\000\002" +
    "\001\001\000\004\015\u0224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\u0226\003\004\004\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\175\004\005\001\001\000\004" +
    "\021\145\001\001\000\010\017\u022b\020\127\022\133\001" +
    "\001\000\004\021\145\001\001\000\004\021\145\001\001" +
    "\000\004\021\145\001\001\000\004\027\u0230\001\001\000" +
    "\004\032\u0231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\u0235\020" +
    "\127\022\133\001\001\000\004\021\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\163\020\127\022" +
    "\133\001\001\000\004\021\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\u0241\020\127" +
    "\022\133\001\001\000\004\021\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\u0249\020\127\022\133\001\001\000\004\021\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\u024f\040\355\001\001\000\002" +
    "\001\001\000\012\017\u0253\020\127\022\133\027\u0252\001" +
    "\001\000\010\017\163\020\127\022\133\001\001\000\002" +
    "\001\001\000\004\021\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\u0258\020\127" +
    "\022\133\001\001\000\004\021\145\001\001\000\002\001" +
    "\001\000\010\017\u025b\020\127\022\133\001\001\000\004" +
    "\021\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\u0266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\u0269\040\355\001\001\000\002\001" +
    "\001\000\004\033\u026d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\u0273\020\127\022\133\027\u0272\001\001" +
    "\000\010\017\163\020\127\022\133\001\001\000\002\001" +
    "\001\000\004\021\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\u0278\020\127\022" +
    "\133\001\001\000\004\021\145\001\001\000\002\001\001" +
    "\000\010\017\u027b\020\127\022\133\001\001\000\004\021" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserZ80$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserZ80$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserZ80$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 errorCount = 0; lastLine = 0; lastColumn = 0; 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    IToken t = (IToken)this.getScanner().next_token();
    this.lastLine = t.getLine()+1;
    this.lastColumn = t.getColumn()+1;
    return (Symbol)t;
 
    }


    private IMessageReporter reporter = null;
    public int lastLine;
    public int lastColumn;
    public static int errorCount = 0;
    
    public parserZ80(java_cup.runtime.Scanner s, IMessageReporter reporter) {
        this(s);
        this.reporter = reporter;
    }
    	
    public void syntax_error(Symbol current) {
        report_error("Syntax error: ",current);
    }

    public void unrecovered_syntax_error(Symbol current) {
        report_error("Fatal syntax error: ", current);
        done_parsing();
    }

    public void report_error(String message, Symbol current) {
        String mes;
        String location="";
        if (current instanceof IToken) {
            IToken t = (IToken)current;
            location = (t.getLine()+1)+","+t.getColumn();
            mes = message + t.getErrorString() + " ('"+t.getText()+"')";
        } else mes = message + "symbol " + current.sym;
        if (reporter != null) {
            if (!location.equals("")) reporter.report(location,mes);
            else reporter.report(mes);
        } else System.err.println(mes);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserZ80$actions {
  private final parserZ80 parser;

  /** Constructor */
  CUP$parserZ80$actions(parserZ80 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserZ80$do_action(
    int                        CUP$parserZ80$act_num,
    java_cup.runtime.lr_parser CUP$parserZ80$parser,
    java.util.Stack            CUP$parserZ80$stack,
    int                        CUP$parserZ80$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserZ80$result;

      /* select the action based on the action number */
      switch (CUP$parserZ80$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // RegQQ ::= REGISTERS_HL 
            {
              Integer RESULT =null;
		 RESULT = 0x20; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegQQ",29, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // RegQQ ::= REGISTERS_DE 
            {
              Integer RESULT =null;
		 RESULT = 0x10; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegQQ",29, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // RegQQ ::= REGISTERS_BC 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegQQ",29, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // RegQQ ::= REGISTERS_AF 
            {
              Integer RESULT =null;
		 RESULT = 0x30; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegQQ",29, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // CondCond ::= RESERVED_NZ 
            {
              Integer RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCond",28, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // CondCond ::= RESERVED_Z 
            {
              Integer RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCond",28, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // CondCond ::= RESERVED_NC 
            {
              Integer RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCond",28, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // CondCond ::= RESERVED_C 
            {
              Integer RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCond",28, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // CondCC ::= RESERVED_PO 
            {
              Integer RESULT =null;
		 RESULT = 0x20; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",27, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // CondCC ::= RESERVED_PE 
            {
              Integer RESULT =null;
		 RESULT = 0x28; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",27, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // CondCC ::= RESERVED_P 
            {
              Integer RESULT =null;
		 RESULT = 0x30; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",27, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // CondCC ::= RESERVED_M 
            {
              Integer RESULT =null;
		 RESULT = 0x38; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",27, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // CondCC ::= RESERVED_NZ 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",27, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // CondCC ::= RESERVED_Z 
            {
              Integer RESULT =null;
		 RESULT = 0x8; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",27, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // CondCC ::= RESERVED_NC 
            {
              Integer RESULT =null;
		 RESULT = 0x10; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",27, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // CondCC ::= RESERVED_C 
            {
              Integer RESULT =null;
		 RESULT = 0x18; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",27, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // RegRY ::= REGISTERS_IY 
            {
              Integer RESULT =null;
		 RESULT = 0x20; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRY",25, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // RegRY ::= REGISTERS_SP 
            {
              Integer RESULT =null;
		 RESULT = 0x30; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRY",25, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // RegRY ::= REGISTERS_DE 
            {
              Integer RESULT =null;
		 RESULT = 0x10; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRY",25, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // RegRY ::= REGISTERS_BC 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRY",25, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // RegRX ::= REGISTERS_IX 
            {
              Integer RESULT =null;
		 RESULT = 0x20; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRX",26, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // RegRX ::= REGISTERS_SP 
            {
              Integer RESULT =null;
		 RESULT = 0x30; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRX",26, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // RegRX ::= REGISTERS_DE 
            {
              Integer RESULT =null;
		 RESULT = 0x10; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRX",26, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // RegRX ::= REGISTERS_BC 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRX",26, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // RegRR_WSP ::= REGISTERS_HL 
            {
              Integer RESULT =null;
		 RESULT = 0x20; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRR_WSP",30, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // RegRR_WSP ::= REGISTERS_DE 
            {
              Integer RESULT =null;
		 RESULT = 0x10; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRR_WSP",30, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // RegRR_WSP ::= REGISTERS_BC 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRR_WSP",30, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // RegRR ::= RegRR_WSP 
            {
              Integer RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = r; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRR",23, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // RegRR ::= REGISTERS_SP 
            {
              Integer RESULT =null;
		 RESULT = 0x30; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRR",23, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // RegII ::= REGISTERS_IY 
            {
              Integer RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegII",24, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // RegII ::= REGISTERS_IX 
            {
              Integer RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegII",24, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // RegWA ::= REGISTERS_L 
            {
              Integer RESULT =null;
		 RESULT = 5; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegWA",22, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // RegWA ::= REGISTERS_H 
            {
              Integer RESULT =null;
		 RESULT = 4; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegWA",22, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // RegWA ::= REGISTERS_E 
            {
              Integer RESULT =null;
		 RESULT = 3; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegWA",22, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // RegWA ::= REGISTERS_D 
            {
              Integer RESULT =null;
		 RESULT = 2; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegWA",22, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // RegWA ::= REGISTERS_C 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegWA",22, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // RegWA ::= REGISTERS_B 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegWA",22, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // Reg ::= REGISTERS_L 
            {
              Integer RESULT =null;
		 RESULT = 5; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Reg ::= REGISTERS_H 
            {
              Integer RESULT =null;
		 RESULT = 4; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Reg ::= REGISTERS_E 
            {
              Integer RESULT =null;
		 RESULT = 3; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Reg ::= REGISTERS_D 
            {
              Integer RESULT =null;
		 RESULT = 2; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Reg ::= REGISTERS_C 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Reg ::= REGISTERS_B 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Reg ::= REGISTERS_A 
            {
              Integer RESULT =null;
		 RESULT = 7; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Codedef ::= RESERVED_XOR Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.XOR,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Codedef ::= RESERVED_XOR Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.XOR,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Codedef ::= RESERVED_XOR SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.XOR_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Codedef ::= RESERVED_XOR SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.XOR_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Codedef ::= RESERVED_XOR SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.XOR_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Codedef ::= RESERVED_SUB Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.SUB,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Codedef ::= RESERVED_SUB Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SUB,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // Codedef ::= RESERVED_SUB SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SUB_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // Codedef ::= RESERVED_SUB SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SUB_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // Codedef ::= RESERVED_SUB SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SUB_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Codedef ::= RESERVED_SRL Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SRL,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Codedef ::= RESERVED_SRL SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SRL_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Codedef ::= RESERVED_SRL SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SRL_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Codedef ::= RESERVED_SRL SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SRL_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // Codedef ::= RESERVED_SRA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SRA,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // Codedef ::= RESERVED_SRA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SRA_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Codedef ::= RESERVED_SRA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SRA_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Codedef ::= RESERVED_SRA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SRA_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Codedef ::= RESERVED_SLA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SRL,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Codedef ::= RESERVED_SLA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SLA_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Codedef ::= RESERVED_SLA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SLA_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Codedef ::= RESERVED_SLA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SLA_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Codedef ::= RESERVED_SET Expression SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Codedef ::= RESERVED_SET Expression SEPARATOR_COMMA SEPARATOR_LPAR RegII OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Codedef ::= RESERVED_SET Expression SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Codedef ::= RESERVED_SBC REGISTERS_HL SEPARATOR_COMMA RegRR 
            {
              Instruction RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer rr = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SBC_HL,rr,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Codedef ::= RESERVED_SBC REGISTERS_A SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SBC,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Codedef ::= RESERVED_SBC REGISTERS_A SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.SBC,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Codedef ::= RESERVED_SBC REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SBC_A_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Codedef ::= RESERVED_SBC REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SBC_A_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // Codedef ::= RESERVED_SBC REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SBC_A_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // Codedef ::= RESERVED_RST Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.RST,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // Codedef ::= RESERVED_RRC Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.RRC,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // Codedef ::= RESERVED_RRC SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RRC_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // Codedef ::= RESERVED_RRC SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RRC_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Codedef ::= RESERVED_RRC SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RRC_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Codedef ::= RESERVED_RR Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.RR,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Codedef ::= RESERVED_RR SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RR_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Codedef ::= RESERVED_RR SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RR_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Codedef ::= RESERVED_RR SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RR_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Codedef ::= RESERVED_RLC Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.RLC,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Codedef ::= RESERVED_RLC SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RLC_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Codedef ::= RESERVED_RLC SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RLC_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Codedef ::= RESERVED_RLC SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RLC_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Codedef ::= RESERVED_RL Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.RL,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Codedef ::= RESERVED_RL SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RL_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Codedef ::= RESERVED_RL SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RL_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // Codedef ::= RESERVED_RL SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RL_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Codedef ::= RESERVED_RET CondCC 
            {
              Instruction RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer cc = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.RET,cc,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Codedef ::= RESERVED_RET 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RET,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Codedef ::= RESERVED_RES Expression SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Codedef ::= RESERVED_RES Expression SEPARATOR_COMMA SEPARATOR_LPAR RegII OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Codedef ::= RESERVED_RES Expression SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Codedef ::= RESERVED_PUSH REGISTERS_IY 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.PUSH_IY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Codedef ::= RESERVED_PUSH REGISTERS_IX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.PUSH_IX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Codedef ::= RESERVED_PUSH RegQQ 
            {
              Instruction RESULT =null;
		int qqleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int qqright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer qq = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.PUSH,qq,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Codedef ::= RESERVED_POP REGISTERS_IY 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.POP_IY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Codedef ::= RESERVED_POP REGISTERS_IX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.POP_IX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Codedef ::= RESERVED_POP RegQQ 
            {
              Instruction RESULT =null;
		int qqleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int qqright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer qq = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.POP,qq,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Codedef ::= RESERVED_OUT SEPARATOR_LPAR REGISTERS_C SEPARATOR_RPAR SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_NoParams.OUT_B; break;
                    case 1: opcode = OC_NoParams.OUT_C; break;
                    case 2: opcode = OC_NoParams.OUT_D; break;
                    case 3: opcode = OC_NoParams.OUT_E; break;
                    case 4: opcode = OC_NoParams.OUT_H; break;
                    case 5: opcode = OC_NoParams.OUT_L; break;
                    case 7: opcode = OC_NoParams.OUT_A; break;
                }
                RESULT = new OC_NoParams(opcode,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Codedef ::= RESERVED_OUT SEPARATOR_LPAR Expression SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_A 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		 RESULT = new OC_Expr(OC_Expr.OUT,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Codedef ::= RESERVED_OR Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.OR,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Codedef ::= RESERVED_OR Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.OR,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Codedef ::= RESERVED_OR SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.OR_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Codedef ::= RESERVED_OR SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.OR_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Codedef ::= RESERVED_OR SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.OR_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Codedef ::= RESERVED_LD REGISTERS_SP SEPARATOR_COMMA REGISTERS_IY 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_SP_IY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Codedef ::= RESERVED_LD REGISTERS_SP SEPARATOR_COMMA REGISTERS_IX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_SP_IX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Codedef ::= RESERVED_LD REGISTERS_SP SEPARATOR_COMMA REGISTERS_HL 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_SP_HL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.LD_A,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Codedef ::= RESERVED_LD RegWA SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_Expr.LD_B; break;
                    case 1: opcode = OC_Expr.LD_C; break;
                    case 2: opcode = OC_Expr.LD_D; break;
                    case 3: opcode = OC_Expr.LD_E; break;
                    case 4: opcode = OC_Expr.LD_H; break;
                    case 5: opcode = OC_Expr.LD_L; break;
                }
                RESULT = new OC_Expr(opcode,e,true,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Codedef ::= RESERVED_LD RegWA SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Integer r1 = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                int opcode = 0;
                switch(r1) {
                    case 0: opcode = OC_Reg.LD_B; break;
                    case 1: opcode = OC_Reg.LD_C; break;
                    case 2: opcode = OC_Reg.LD_D; break;
                    case 3: opcode = OC_Reg.LD_E; break;
                    case 4: opcode = OC_Reg.LD_H; break;
                    case 5: opcode = OC_Reg.LD_L; break;
                }
                RESULT = new OC_Reg(opcode,r,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.LD_A,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA SEPARATOR_INDEXLPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_A_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA SEPARATOR_INDEXLPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_A_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Codedef ::= RESERVED_LD RegWA SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_Expr.LD_B_IIY_NN; break;
                    case 1: opcode = OC_Expr.LD_C_IIY_NN; break;
                    case 2: opcode = OC_Expr.LD_D_IIY_NN; break;
                    case 3: opcode = OC_Expr.LD_E_IIY_NN; break;
                    case 4: opcode = OC_Expr.LD_H_IIY_NN; break;
                    case 5: opcode = OC_Expr.LD_L_IIY_NN; break;
                }
                RESULT = new OC_Expr(opcode,e,true,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Codedef ::= RESERVED_LD RegWA SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_Expr.LD_B_IIX_NN; break;
                    case 1: opcode = OC_Expr.LD_C_IIX_NN; break;
                    case 2: opcode = OC_Expr.LD_D_IIX_NN; break;
                    case 3: opcode = OC_Expr.LD_E_IIX_NN; break;
                    case 4: opcode = OC_Expr.LD_H_IIX_NN; break;
                    case 5: opcode = OC_Expr.LD_L_IIX_NN; break;
                }
                RESULT = new OC_Expr(opcode,e,true,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA SEPARATOR_INDEXLPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_A_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Codedef ::= RESERVED_LD RegWA SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_NoParams.LD_B_HHLL; break;
                    case 1: opcode = OC_NoParams.LD_C_HHLL; break;
                    case 2: opcode = OC_NoParams.LD_D_HHLL; break;
                    case 3: opcode = OC_NoParams.LD_E_HHLL; break;
                    case 4: opcode = OC_NoParams.LD_H_HHLL; break;
                    case 5: opcode = OC_NoParams.LD_L_HHLL; break;
                }
                RESULT = new OC_NoParams(opcode,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Codedef ::= RESERVED_LD REGISTERS_IY SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.LD_IY,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Codedef ::= RESERVED_LD REGISTERS_IX SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.LD_IX,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Codedef ::= RESERVED_LD REGISTERS_IY SEPARATOR_COMMA SEPARATOR_INDEXLPAR Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_IY_NN,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Codedef ::= RESERVED_LD REGISTERS_IX SEPARATOR_COMMA SEPARATOR_INDEXLPAR Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_IX_NN,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Codedef ::= RESERVED_LD REGISTERS_R SEPARATOR_COMMA REGISTERS_A 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_R,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Codedef ::= RESERVED_LD REGISTERS_I SEPARATOR_COMMA REGISTERS_A 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_I,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Codedef ::= RESERVED_LD REGISTERS_SP SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Codedef ::= RESERVED_LD RegRR_WSP SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Codedef ::= RESERVED_LD REGISTERS_SP SEPARATOR_COMMA SEPARATOR_INDEXLPAR Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_SP_NN,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Codedef ::= RESERVED_LD RegRR_WSP SEPARATOR_COMMA SEPARATOR_INDEXLPAR Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).right;
		Integer rr = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		
                int opcode = 0;
                switch(rr) {
                    case 0: opcode = OC_Expr.LD_BC_NN; break;
                    case 0x10: opcode = OC_Expr.LD_DE_NN; break;
                    case 0x20: opcode = OC_Expr.LD_HL_NN; break;
                }
                RESULT = new OC_Expr(opcode,e,false,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA REGISTERS_R 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_A_R,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA REGISTERS_I 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_A_I,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA SEPARATOR_INDEXLPAR Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_A_NN,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA SEPARATOR_INDEXLPAR REGISTERS_DE SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_A_DDEE,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA SEPARATOR_INDEXLPAR REGISTERS_BC SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_A_BBCC,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Codedef ::= RESERVED_LD SEPARATOR_LPAR Expression SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_IY 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_NN_IY,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Codedef ::= RESERVED_LD SEPARATOR_LPAR Expression SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_IX 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_NN_IX,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Codedef ::= RESERVED_LD SEPARATOR_LPAR Expression SEPARATOR_RPAR SEPARATOR_COMMA RegRR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		int rrleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer rr = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                int opcode = 0;
                switch(rr) {
                    case 0: opcode = OC_Expr.LD_NN_BC; break;
                    case 0x10: opcode = OC_Expr.LD_NN_DE; break;
                    case 0x20: opcode = OC_Expr.LD_NN_HL; break;
                    case 0x30: opcode = OC_Expr.LD_NN_SP; break;
                }
                RESULT = new OC_Expr(opcode,e,false,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Codedef ::= RESERVED_LD SEPARATOR_LPAR Expression SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_A 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_NN_A,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Codedef ::= RESERVED_LD SEPARATOR_LPAR RegII OPERATOR_ADD Expression SEPARATOR_RPAR SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Codedef ::= RESERVED_LD SEPARATOR_LPAR RegII OPERATOR_ADD Expression SEPARATOR_RPAR SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Codedef ::= RESERVED_LD SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.LD_HHLL_r,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Codedef ::= RESERVED_LD SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.LD_HHLL,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Codedef ::= RESERVED_LD SEPARATOR_LPAR REGISTERS_DE SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_A 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_DDEE_A,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Codedef ::= RESERVED_LD SEPARATOR_LPAR REGISTERS_BC SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_A 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_BBCC_A,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Codedef ::= RESERVED_JR CondCond SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Codedef ::= RESERVED_JR Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.JR,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Codedef ::= RESERVED_JP CondCC SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Codedef ::= RESERVED_JP SEPARATOR_LPAR REGISTERS_IY SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.JP_IIYY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Codedef ::= RESERVED_JP SEPARATOR_LPAR REGISTERS_IX SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.JP_IIXX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Codedef ::= RESERVED_JP SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.JP_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Codedef ::= RESERVED_JP Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.JP,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Codedef ::= RESERVED_INC REGISTERS_IY 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.INC_IY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Codedef ::= RESERVED_INC REGISTERS_IX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.INC_IX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Codedef ::= RESERVED_INC RegRR 
            {
              Instruction RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer rr = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.INC,rr,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Codedef ::= RESERVED_INC Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_NoParams.INC_B; break;
                    case 1: opcode = OC_NoParams.INC_C; break;
                    case 2: opcode = OC_NoParams.INC_D; break;
                    case 3: opcode = OC_NoParams.INC_E; break;
                    case 4: opcode = OC_NoParams.INC_H; break;
                    case 5: opcode = OC_NoParams.INC_L; break;
                    case 7: opcode = OC_NoParams.INC_A; break;
                }
                RESULT = new OC_NoParams(opcode,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Codedef ::= RESERVED_INC SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.INC_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Codedef ::= RESERVED_INC SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.INC_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Codedef ::= RESERVED_INC SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.INC_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Codedef ::= RESERVED_IN RegWA SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_C SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_NoParams.IN_B; break;
                    case 1: opcode = OC_NoParams.IN_C; break;
                    case 2: opcode = OC_NoParams.IN_D; break;
                    case 3: opcode = OC_NoParams.IN_E; break;
                    case 4: opcode = OC_NoParams.IN_H; break;
                    case 5: opcode = OC_NoParams.IN_L; break;
                }
                RESULT = new OC_NoParams(opcode,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Codedef ::= RESERVED_IN REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_C SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.IN_A,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Codedef ::= RESERVED_IN REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.IN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Codedef ::= RESERVED_IM Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.IM,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Codedef ::= RESERVED_EX REGISTERS_AF SEPARATOR_COMMA REGISTERS_AFF 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EX_AF_AFF,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Codedef ::= RESERVED_EX SEPARATOR_LPAR REGISTERS_DE SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_HL 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EX_DDEE_HL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Codedef ::= RESERVED_EX SEPARATOR_LPAR REGISTERS_SP SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_IY 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EX_SSPP_IY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Codedef ::= RESERVED_EX SEPARATOR_LPAR REGISTERS_SP SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_IX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EX_SSPP_IX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Codedef ::= RESERVED_EX SEPARATOR_LPAR REGISTERS_SP SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_HL 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EX_SSPP_HL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Codedef ::= RESERVED_DJNZ Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.DJNZ,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Codedef ::= RESERVED_DEC REGISTERS_IY 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.DEC_IY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Codedef ::= RESERVED_DEC REGISTERS_IX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.DEC_IX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Codedef ::= RESERVED_DEC RegRR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.DEC,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Codedef ::= RESERVED_DEC RegWA 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_NoParams.DEC_B; break;
                    case 1: opcode = OC_NoParams.DEC_C; break;
                    case 2: opcode = OC_NoParams.DEC_D; break;
                    case 3: opcode = OC_NoParams.DEC_E; break;
                    case 4: opcode = OC_NoParams.DEC_H; break;
                    case 5: opcode = OC_NoParams.DEC_L; break;
                }
                RESULT = new OC_NoParams(opcode,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Codedef ::= RESERVED_DEC REGISTERS_A 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.DEC_A,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Codedef ::= RESERVED_DEC SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.DEC_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Codedef ::= RESERVED_DEC SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.DEC_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Codedef ::= RESERVED_DEC SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.DEC_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Codedef ::= RESERVED_CP Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.CP,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Codedef ::= RESERVED_CP Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.CP,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Codedef ::= RESERVED_CP SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.CP_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Codedef ::= RESERVED_CP SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.CP_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Codedef ::= RESERVED_CP SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CP_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Codedef ::= RESERVED_CALL Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.CALL,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Codedef ::= RESERVED_CALL CondCC SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Codedef ::= RESERVED_BIT Expression SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Codedef ::= RESERVED_BIT Expression SEPARATOR_COMMA SEPARATOR_LPAR RegII OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Codedef ::= RESERVED_BIT Expression SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Codedef ::= RESERVED_AND Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.AND,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Codedef ::= RESERVED_AND Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.AND,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Codedef ::= RESERVED_AND SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.ADD_A_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Codedef ::= RESERVED_AND SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.ADD_A_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Codedef ::= RESERVED_AND SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.AND_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Codedef ::= RESERVED_ADD REGISTERS_IY SEPARATOR_COMMA RegRY 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.ADD_IY,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Codedef ::= RESERVED_ADD REGISTERS_IX SEPARATOR_COMMA RegRX 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.ADD_IX,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Codedef ::= RESERVED_ADD REGISTERS_HL SEPARATOR_COMMA RegRR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.ADD_HL,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Codedef ::= RESERVED_ADD REGISTERS_A SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.ADD,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Codedef ::= RESERVED_ADD REGISTERS_A SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.ADD,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Codedef ::= RESERVED_ADD REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.ADD_A_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Codedef ::= RESERVED_ADD REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.ADD_A_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Codedef ::= RESERVED_ADD REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.ADD_A_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Codedef ::= RESERVED_ADC REGISTERS_HL SEPARATOR_COMMA RegRR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.ADC_HL,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Codedef ::= RESERVED_ADC REGISTERS_A SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.ADC,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Codedef ::= RESERVED_ADC REGISTERS_A SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.ADC,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Codedef ::= RESERVED_ADC REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.ADC_A_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Codedef ::= RESERVED_ADC REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.ADC_A_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Codedef ::= RESERVED_ADC REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.ADC_A_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Codedef ::= RESERVED_SCF 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SCF,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Codedef ::= RESERVED_RRD 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RRD,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Codedef ::= RESERVED_RRCA 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RRCA,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Codedef ::= RESERVED_RRA 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RRA,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Codedef ::= RESERVED_RLD 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RLD,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Codedef ::= RESERVED_RLCA 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RLCA,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Codedef ::= RESERVED_RLA 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RLA,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Codedef ::= RESERVED_RETN 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RETN,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Codedef ::= RESERVED_RETI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RETI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Codedef ::= RESERVED_OUTI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.OUTI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Codedef ::= RESERVED_OUTD 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.OUTD,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Codedef ::= RESERVED_OTIR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.OTIR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Codedef ::= RESERVED_OTDR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.OTDR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Codedef ::= RESERVED_NOP 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.NOP,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Codedef ::= RESERVED_NEG 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.NEG,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Codedef ::= RESERVED_LDIR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LDIR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Codedef ::= RESERVED_LDI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LDI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Codedef ::= RESERVED_LDDR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LDDR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Codedef ::= RESERVED_LDD 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LDD,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Codedef ::= RESERVED_INIR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.INIR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Codedef ::= RESERVED_INI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.INI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Codedef ::= RESERVED_INDR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.INDR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Codedef ::= RESERVED_IND 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.IND,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Codedef ::= RESERVED_HALT 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.HALT,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Codedef ::= RESERVED_EXX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EXX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Codedef ::= RESERVED_EI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Codedef ::= RESERVED_DI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.DI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Codedef ::= RESERVED_DAA 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.DAA,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Codedef ::= RESERVED_CPL 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CPL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Codedef ::= RESERVED_CPIR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CPIR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Codedef ::= RESERVED_CPI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CPI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Codedef ::= RESERVED_CPDR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CPDR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Codedef ::= RESERVED_CPD 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CPD,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Codedef ::= RESERVED_CCF 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CCF,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MacroParamsList ::= MacroParamsList SEPARATOR_COMMA Expression 
            {
              Vector RESULT =null;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Vector parameters = (Vector)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 parameters.addElement(e); RESULT = parameters; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroParamsList",19, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MacroParamsList ::= Expression 
            {
              Vector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                        Vector vec = new Vector();
                        vec.addElement(e);
                        RESULT = vec;
                    
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroParamsList",19, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MacroParameters ::= 
            {
              Vector RESULT =null;
		 RESULT = null; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroParameters",18, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MacroParameters ::= MacroParamsList 
            {
              Vector RESULT =null;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Vector parameters = (Vector)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = parameters; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroParameters",18, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MacroOperList ::= MacroOperList SEPARATOR_COMMA TIDENTIFIER 
            {
              Vector RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Vector operands = (Vector)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 operands.addElement(name); RESULT = operands; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroOperList",20, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MacroOperList ::= TIDENTIFIER 
            {
              Vector RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                      Vector vec = new Vector();
                      vec.addElement(name);
                      RESULT = vec;
                  
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroOperList",20, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MacroOperands ::= 
            {
              Vector RESULT =null;
		 RESULT = null; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroOperands",17, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MacroOperands ::= MacroOperList 
            {
              Vector RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Vector operands = (Vector)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = operands; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroOperands",17, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Pseudo ::= PREPROCESSOR_INCLUDE LITERAL_STRING 
            {
              Pseudo RESULT =null;
		int filenameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int filenameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		String filename = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new PseudoINCLUDE(filename,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Pseudo ::= TIDENTIFIER MacroParameters 
            {
              Pseudo RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Vector params = (Vector)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new PseudoMACROCall(name,params,parser.lastLine, parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Pseudo ::= TIDENTIFIER PREPROCESSOR_MACRO MacroOperands Comment SEPARATOR_EOL Program PREPROCESSOR_ENDM 
            {
              Pseudo RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).value;
		int opersleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).left;
		int opersright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).right;
		Vector opers = (Vector)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Program s = (Program)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new PseudoMACRO(name,opers,s,parser.lastLine, parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Pseudo ::= PREPROCESSOR_IF Expression Comment SEPARATOR_EOL Program SEPARATOR_EOL PREPROCESSOR_ENDIF 
            {
              Pseudo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Program s = (Program)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		 RESULT = new PseudoIF(e,s,parser.lastLine, parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Pseudo ::= TIDENTIFIER PREPROCESSOR_VAR Expression 
            {
              Pseudo RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new PseudoVAR(name,e,parser.lastLine, parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Pseudo ::= TIDENTIFIER PREPROCESSOR_EQU Expression 
            {
              Pseudo RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new PseudoEQU(name,e,parser.lastLine, parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Pseudo ::= PREPROCESSOR_ORG Expression 
            {
              Pseudo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new PseudoORG(e,parser.lastLine, parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BinaryOperator ::= OPERATOR_SHL 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.SHL; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BinaryOperator ::= OPERATOR_SHR 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.SHR; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BinaryOperator ::= OPERATOR_MOD 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.MOD; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BinaryOperator ::= OPERATOR_DIVIDE 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.DIV; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BinaryOperator ::= OPERATOR_MULTIPLY 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.MUL; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BinaryOperator ::= OPERATOR_SUBTRACT 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.MINUS; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BinaryOperator ::= OPERATOR_ADD 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.ADD; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BinaryOperator ::= OPERATOR_GE 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.GE; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BinaryOperator ::= OPERATOR_LE 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.LE; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BinaryOperator ::= OPERATOR_GREATER 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.GREATER; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BinaryOperator ::= OPERATOR_LESS 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.LESS; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BinaryOperator ::= OPERATOR_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.EQ; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BinaryOperator ::= OPERATOR_AND 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.AND; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BinaryOperator ::= OPERATOR_XOR 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.XOR; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BinaryOperator ::= OPERATOR_OR 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.OR; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // UnaryOperator ::= OPERATOR_SUBTRACT 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.MINUS; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("UnaryOperator",16, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // UnaryOperator ::= OPERATOR_ADD 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.ADD; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("UnaryOperator",16, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // UnaryOperator ::= OPERATOR_NOT 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.NOT; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("UnaryOperator",16, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Primarny ::= TIDENTIFIER 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new Identifier(name); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Primarny",14, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Primarny ::= PREPROCESSOR_ADDR 
            {
              Expression RESULT =null;
		 RESULT = new Address(); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Primarny",14, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Primarny ::= LITERAL_DECIMAL_16BIT 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new DecimalExpr(n); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Primarny",14, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Primarny ::= LITERAL_DECIMAL_8BIT 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new DecimalExpr(n); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Primarny",14, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Primarny ::= UnaryOperator Expression 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new Arithmetic(e,null,op); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Primarny",14, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Primarny ::= Expression BinaryOperator Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new Arithmetic(e1,e2,op); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Primarny",14, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expression ::= Primarny 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = e; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expression ::= SEPARATOR_LPAR Expression SEPARATOR_RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = e; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DWData ::= Expression 
            {
              DataDW RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new DataDW(e,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DWData",10, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DBData ::= Codedef 
            {
              DataDB RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Instruction code = (Instruction)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new DataDB(code,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DBData",9, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DBData ::= LITERAL_STRING 
            {
              DataDB RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new DataDB(str,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DBData",9, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DBData ::= Expression 
            {
              DataDB RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new DataDB(e,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DBData",9, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DWList ::= DWList SEPARATOR_COMMA DWData 
            {
              DataNode RESULT =null;
		int dwlistleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int dwlistright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		DataNode dwlist = (DataNode)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int dwdataleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dwdataright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataDW dwdata = (DataDW)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 dwlist.addElement(dwdata); RESULT = dwlist; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DWList",6, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DWList ::= DWData 
            {
              DataNode RESULT =null;
		int dwdataleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dwdataright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataDW dwdata = (DataDW)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
               DataNode dn = new DataNode(parser.lastLine,parser.lastColumn);
               dn.addElement(dwdata);
               RESULT = dn;
           
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DWList",6, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DBList ::= DBList SEPARATOR_COMMA DBData 
            {
              DataNode RESULT =null;
		int dblistleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int dblistright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		DataNode dblist = (DataNode)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int dbdataleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dbdataright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataDB dbdata = (DataDB)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 dblist.addElement(dbdata); RESULT = dblist; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DBList",5, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DBList ::= DBData 
            {
              DataNode RESULT =null;
		int dbdataleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dbdataright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataDB dbdata = (DataDB)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
               DataNode dn = new DataNode(parser.lastLine,parser.lastColumn);
               dn.addElement(dbdata);
               RESULT = dn;
           
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DBList",5, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Datadef ::= PREPROCESSOR_DS Expression 
            {
              DataNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                DataNode dn = new DataNode(parser.lastLine,parser.lastColumn);
                dn.addElement(new DataDS(e,parser.lastLine,parser.lastColumn));
                RESULT= dn;
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Datadef",4, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Datadef ::= PREPROCESSOR_DW DWList 
            {
              DataNode RESULT =null;
		int dwlistleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dwlistright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataNode dwlist = (DataNode)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = dwlist; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Datadef",4, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Datadef ::= PREPROCESSOR_DB DBList 
            {
              DataNode RESULT =null;
		int dblistleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dblistright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataNode dblist = (DataNode)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = dblist; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Datadef",4, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruction ::= Codedef 
            {
              InstrData RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Instruction code = (Instruction)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = code; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Instruction",12, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruction ::= Datadef 
            {
              InstrData RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataNode data = (DataNode)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = data; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Instruction",12, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= 
            {
              Statement RESULT =null;
		 RESULT = null; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= Pseudo 
            {
              Statement RESULT =null;
		int pseudoleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int pseudoright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Pseudo pseudo = (Pseudo)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = pseudo; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= Instruction 
            {
              Statement RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		InstrData instr = (InstrData)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = instr; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Comment ::= 
            {
              Object RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Comment",11, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Comment ::= TCOMMENT 
            {
              Object RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Comment",11, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Label ::= 
            {
              Label RESULT =null;
		 RESULT = null; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Label",2, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Label ::= TLABEL 
            {
              Label RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new Label(name,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Label",2, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Row ::= Label Statement Comment 
            {
              Row RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Label label = (Label)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		
            if ((label == null) && (stmt == null)) RESULT = null;
            else RESULT = new Row(label,stmt);
        
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Row",1, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= Program error 
            {
              Program RESULT =null;
		int programleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Program program = (Program)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 parser.errorCount++; RESULT = program; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Program SEPARATOR_EOL Row 
            {
              Program RESULT =null;
		int programleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Program program = (Program)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int rowleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Row row = (Row)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                if (row != null) program.addRow(row);
                RESULT = program;
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Row 
            {
              Program RESULT =null;
		int rowleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Row row = (Row)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                Program program = new Program();
                if (row != null) program.addRow(row);
                RESULT = program;
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		RESULT = start_val;
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserZ80$parser.done_parsing();
          return CUP$parserZ80$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

