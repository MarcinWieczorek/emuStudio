
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 18 10:39:43 CEST 2008
//----------------------------------------------------

package impl;

import java.util.Vector;
import java_cup.runtime.Symbol;
import plugins.compiler.IMessageReporter;
import plugins.compiler.IToken;
import treeZ80.*;
import treeZ80Abstract.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 18 10:39:43 CEST 2008
  */
public class parserZ80 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserZ80() {super();}

  /** Constructor which sets the default scanner. */
  public parserZ80(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserZ80(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\004\000\002\003\005\000\002\004\003" +
    "\000\002\004\002\000\002\015\003\000\002\015\002\000" +
    "\002\005\003\000\002\005\003\000\002\005\002\000\002" +
    "\016\003\000\002\016\003\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\007\003\000\002\007\005" +
    "\000\002\010\003\000\002\010\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\003\000\002" +
    "\017\005\000\002\017\003\000\002\020\005\000\002\020" +
    "\004\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\012\004\000\002\012\005\000\002\012\005\000\002\012" +
    "\011\000\002\012\011\000\002\012\004\000\002\012\004" +
    "\000\002\023\003\000\002\023\002\000\002\026\003\000" +
    "\002\026\005\000\002\024\003\000\002\024\002\000\002" +
    "\025\003\000\002\025\005\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\010\000\002\011\012\000\002\011\012\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\010\000\002\011\012\000\002\011\012\000\002\011\006" +
    "\000\002\011\006\000\002\011\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\006\000\002\011\010\000\002" +
    "\011\010\000\002\011\004\000\002\011\004\000\002\011" +
    "\010\000\002\011\012\000\002\011\012\000\002\011\006" +
    "\000\002\011\006\000\002\011\004\000\002\011\006\000" +
    "\002\011\010\000\002\011\010\000\002\011\004\000\002" +
    "\011\004\000\002\011\006\000\002\011\010\000\002\011" +
    "\010\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\010\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\006\000\002\011\004\000\002\011" +
    "\010\000\002\011\010\000\002\011\010\000\002\011\006" +
    "\000\002\011\010\000\002\011\010\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\011\004\000\002\011\006" +
    "\000\002\011\010\000\002\011\010\000\002\011\010\000" +
    "\002\011\010\000\002\011\012\000\002\011\012\000\002" +
    "\011\012\000\002\011\012\000\002\011\010\000\002\011" +
    "\010\000\002\011\010\000\002\011\010\000\002\011\010" +
    "\000\002\011\010\000\002\011\010\000\002\011\006\000" +
    "\002\011\006\000\002\011\010\000\002\011\010\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\011\010\000\002\011\010\000\002\011\006" +
    "\000\002\011\006\000\002\011\010\000\002\011\010\000" +
    "\002\011\012\000\002\011\012\000\002\011\012\000\002" +
    "\011\012\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\011\006" +
    "\000\002\011\006\000\002\011\006\000\002\011\010\000" +
    "\002\011\010\000\002\011\004\000\002\011\004\000\002" +
    "\011\010\000\002\011\010\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\010\000\002\011\012\000" +
    "\002\011\012\000\002\011\006\000\002\011\003\000\002" +
    "\011\004\000\002\011\006\000\002\011\010\000\002\011" +
    "\010\000\002\011\004\000\002\011\006\000\002\011\010" +
    "\000\002\011\010\000\002\011\004\000\002\011\006\000" +
    "\002\011\010\000\002\011\010\000\002\011\004\000\002" +
    "\011\006\000\002\011\010\000\002\011\010\000\002\011" +
    "\004\000\002\011\004\000\002\011\010\000\002\011\012" +
    "\000\002\011\012\000\002\011\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\010\000\002\011\012\000\002" +
    "\011\012\000\002\011\006\000\002\011\006\000\002\011" +
    "\010\000\002\011\010\000\002\011\004\000\002\011\006" +
    "\000\002\011\010\000\002\011\010\000\002\011\004\000" +
    "\002\011\006\000\002\011\010\000\002\011\010\000\002" +
    "\011\004\000\002\011\006\000\002\011\010\000\002\011" +
    "\010\000\002\011\004\000\002\011\006\000\002\011\010" +
    "\000\002\011\010\000\002\011\004\000\002\011\004\000" +
    "\002\011\006\000\002\011\010\000\002\011\010\000\002" +
    "\011\004\000\002\011\004\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\003\000\002\031" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u029b\000\242\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb" +
    "\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072" +
    "\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb" +
    "\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb\106\ufffb\107" +
    "\ufffb\120\ufffb\123\ufffb\127\ufffb\130\ufffb\131\ufffb\133\ufffb" +
    "\160\ufffb\205\007\206\ufffb\207\ufffb\001\002\000\010\002" +
    "\u029d\003\175\160\u0237\001\002\000\012\002\000\003\000" +
    "\126\000\160\000\001\002\000\242\002\ufff6\003\ufff6\004" +
    "\015\005\014\006\060\007\025\010\075\011\026\012\050" +
    "\013\011\014\061\015\127\016\073\017\125\020\062\021" +
    "\110\022\024\023\124\024\122\025\120\026\066\027\104" +
    "\030\056\031\055\032\034\033\033\034\076\035\030\036" +
    "\116\037\023\040\022\041\117\042\100\043\013\044\077" +
    "\045\044\046\063\047\107\050\057\051\072\052\113\053" +
    "\106\054\020\055\012\056\103\057\046\060\054\061\053" +
    "\062\071\063\067\064\115\065\043\066\041\067\037\070" +
    "\040\071\111\072\052\073\051\074\010\075\047\076\126" +
    "\077\112\100\074\101\045\102\036\103\042\104\027\105" +
    "\032\106\105\107\064\120\035\123\123\126\ufff6\127\114" +
    "\130\101\131\102\133\021\160\ufff6\206\031\207\ufff6\001" +
    "\002\000\242\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc" +
    "\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc\101" +
    "\ufffc\102\ufffc\103\ufffc\104\ufffc\105\ufffc\106\ufffc\107\ufffc" +
    "\120\ufffc\123\ufffc\126\ufffc\127\ufffc\130\ufffc\131\ufffc\133" +
    "\ufffc\160\ufffc\206\ufffc\207\ufffc\001\002\000\016\002\uffa0" +
    "\003\uffa0\126\uffa0\157\uffa0\160\uffa0\207\uffa0\001\002\000" +
    "\016\002\uffbe\003\uffbe\126\uffbe\157\uffbe\160\uffbe\207\uffbe" +
    "\001\002\000\016\002\uffa7\003\uffa7\126\uffa7\157\uffa7\160" +
    "\uffa7\207\uffa7\001\002\000\016\002\uffaf\003\uffaf\126\uffaf" +
    "\157\uffaf\160\uffaf\207\uffaf\001\002\000\012\134\u027d\143" +
    "\u0280\144\u027e\150\u027f\001\002\000\006\134\u026b\150\u026c" +
    "\001\002\000\014\002\ufff4\003\ufff4\126\ufff4\160\ufff4\207" +
    "\ufff4\001\002\000\014\002\ufff9\003\ufff9\126\ufff9\160\ufff9" +
    "\207\171\001\002\000\016\002\uffa8\003\uffa8\126\uffa8\157" +
    "\uffa8\160\uffa8\207\uffa8\001\002\000\004\204\u0269\001\002" +
    "\000\032\110\u0265\111\u0262\112\u0266\113\u0261\132\141\155" +
    "\130\162\134\163\136\171\142\202\132\203\137\206\140" +
    "\001\002\000\042\110\u0176\111\u0177\112\u0170\113\u0172\114" +
    "\u0175\115\u0173\116\u0174\117\u016f\132\141\155\u0257\162\134" +
    "\163\136\171\142\202\132\203\137\206\140\001\002\000" +
    "\016\002\uffb8\003\uffb8\126\uffb8\157\uffb8\160\uffb8\207\uffb8" +
    "\001\002\000\022\132\141\155\130\162\134\163\136\171" +
    "\142\202\132\203\137\206\140\001\002\000\016\002\uffbf" +
    "\003\uffbf\126\uffbf\157\uffbf\160\uffbf\207\uffbf\001\002\000" +
    "\022\134\252\135\251\136\250\137\247\140\246\141\245" +
    "\142\243\155\u023c\001\002\000\016\002\uffb2\003\uffb2\126" +
    "\uffb2\157\uffb2\160\uffb2\207\uffb2\001\002\000\042\002\uffc2" +
    "\003\uffc2\121\u022b\122\u0228\125\u022d\126\uffc2\132\141\155" +
    "\130\160\uffc2\162\134\163\136\171\142\202\132\203\137" +
    "\206\140\207\uffc2\001\002\000\022\134\252\135\251\136" +
    "\250\137\247\140\246\141\245\142\243\155\u021c\001\002" +
    "\000\016\002\uffb4\003\uffb4\126\uffb4\157\uffb4\160\uffb4\207" +
    "\uffb4\001\002\000\036\134\252\135\251\136\250\137\247" +
    "\140\246\141\245\142\243\143\u0210\144\u020f\145\366\146" +
    "\223\147\240\150\217\155\u020d\001\002\000\022\132\141" +
    "\155\130\162\134\163\136\171\142\202\132\203\137\206" +
    "\140\001\002\000\022\134\252\135\251\136\250\137\247" +
    "\140\246\141\245\142\243\155\u0200\001\002\000\016\002" +
    "\uffa3\003\uffa3\126\uffa3\157\uffa3\160\uffa3\207\uffa3\001\002" +
    "\000\016\002\uffa2\003\uffa2\126\uffa2\157\uffa2\160\uffa2\207" +
    "\uffa2\001\002\000\022\134\252\135\251\136\250\137\247" +
    "\140\246\141\245\142\243\155\u01f4\001\002\000\022\134" +
    "\252\135\251\136\250\137\247\140\246\141\245\142\243" +
    "\155\u01e8\001\002\000\016\002\uffa4\003\uffa4\126\uffa4\157" +
    "\uffa4\160\uffa4\207\uffa4\001\002\000\016\002\uffad\003\uffad" +
    "\126\uffad\157\uffad\160\uffad\207\uffad\001\002\000\022\132" +
    "\141\155\130\162\134\163\136\171\142\202\132\203\137" +
    "\206\140\001\002\000\016\143\u01d9\144\u01d8\146\u0163\147" +
    "\u0164\150\u0165\151\u0168\001\002\000\016\002\uff9f\003\uff9f" +
    "\126\uff9f\157\uff9f\160\uff9f\207\uff9f\001\002\000\040\132" +
    "\141\134\252\135\251\136\250\137\247\140\246\141\245" +
    "\142\243\155\u01ca\162\134\163\136\171\142\202\132\203" +
    "\137\206\140\001\002\000\022\134\252\135\251\136\250" +
    "\137\247\140\246\141\245\142\243\155\u01be\001\002\000" +
    "\016\002\uffa1\003\uffa1\126\uffa1\157\uffa1\160\uffa1\207\uffa1" +
    "\001\002\000\036\002\uff26\003\uff26\110\u0176\111\u0177\112" +
    "\u0170\113\u0172\114\u0175\115\u0173\116\u0174\117\u016f\126\uff26" +
    "\157\uff26\160\uff26\207\uff26\001\002\000\022\132\141\155" +
    "\130\162\134\163\136\171\142\202\132\203\137\206\140" +
    "\001\002\000\020\134\u01a3\135\234\136\233\137\232\140" +
    "\231\141\230\142\225\001\002\000\022\132\141\155\130" +
    "\162\134\163\136\171\142\202\132\203\137\206\140\001" +
    "\002\000\040\132\141\134\252\135\251\136\250\137\247" +
    "\140\246\141\245\142\243\155\u0195\162\134\163\136\171" +
    "\142\202\132\203\137\206\140\001\002\000\040\132\141" +
    "\134\252\135\251\136\250\137\247\140\246\141\245\142" +
    "\243\155\u0188\162\134\163\136\171\142\202\132\203\137" +
    "\206\140\001\002\000\016\002\uffbd\003\uffbd\126\uffbd\157" +
    "\uffbd\160\uffbd\207\uffbd\001\002\000\016\002\uffb9\003\uffb9" +
    "\126\uffb9\157\uffb9\160\uffb9\207\uffb9\001\002\000\016\002" +
    "\uffac\003\uffac\126\uffac\157\uffac\160\uffac\207\uffac\001\002" +
    "\000\040\132\141\134\252\135\251\136\250\137\247\140" +
    "\246\141\245\142\243\155\u017b\162\134\163\136\171\142" +
    "\202\132\203\137\206\140\001\002\000\014\002\ufff8\003" +
    "\ufff8\126\ufff8\160\ufff8\207\ufff8\001\002\000\016\002\uffb6" +
    "\003\uffb6\126\uffb6\157\uffb6\160\uffb6\207\uffb6\001\002\000" +
    "\016\002\uffa5\003\uffa5\126\uffa5\157\uffa5\160\uffa5\207\uffa5" +
    "\001\002\000\014\002\ufff5\003\ufff5\126\ufff5\160\ufff5\207" +
    "\ufff5\001\002\000\016\002\uffa6\003\uffa6\126\uffa6\157\uffa6" +
    "\160\uffa6\207\uffa6\001\002\000\016\002\uffaa\003\uffaa\126" +
    "\uffaa\157\uffaa\160\uffaa\207\uffaa\001\002\000\016\002\uffbb" +
    "\003\uffbb\126\uffbb\157\uffbb\160\uffbb\207\uffbb\001\002\000" +
    "\016\002\uff9e\003\uff9e\126\uff9e\157\uff9e\160\uff9e\207\uff9e" +
    "\001\002\000\042\110\u0176\111\u0177\112\u0170\113\u0172\114" +
    "\u0175\115\u0173\116\u0174\117\u016f\132\141\155\130\162\134" +
    "\163\136\171\142\202\132\203\137\206\140\001\002\000" +
    "\016\002\uffb3\003\uffb3\126\uffb3\157\uffb3\160\uffb3\207\uffb3" +
    "\001\002\000\016\002\uffae\003\uffae\126\uffae\157\uffae\160" +
    "\uffae\207\uffae\001\002\000\016\002\uffb0\003\uffb0\126\uffb0" +
    "\157\uffb0\160\uffb0\207\uffb0\001\002\000\022\132\141\155" +
    "\130\162\134\163\136\171\142\202\132\203\137\206\140" +
    "\001\002\000\022\132\141\155\130\162\134\163\136\171" +
    "\142\202\132\203\137\206\140\001\002\000\016\143\u0167" +
    "\144\u0166\146\u0163\147\u0164\150\u0165\151\u0168\001\002\000" +
    "\016\002\uffb5\003\uffb5\126\uffb5\157\uffb5\160\uffb5\207\uffb5" +
    "\001\002\000\040\132\141\134\252\135\251\136\250\137" +
    "\247\140\246\141\245\142\243\155\u0155\162\134\163\136" +
    "\171\142\202\132\203\137\206\140\001\002\000\004\155" +
    "\u014c\001\002\000\016\002\uffab\003\uffab\126\uffab\157\uffab" +
    "\160\uffab\207\uffab\001\002\000\036\134\u013d\135\234\136" +
    "\233\137\232\140\231\141\230\142\225\143\u013f\144\u013e" +
    "\145\366\146\223\147\240\150\217\155\u013c\001\002\000" +
    "\022\134\252\135\251\136\250\137\247\140\246\141\245" +
    "\142\243\155\u0130\001\002\000\006\134\u011e\150\u011f\001" +
    "\002\000\016\002\uffa9\003\uffa9\126\uffa9\157\uffa9\160\uffa9" +
    "\207\uffa9\001\002\000\234\004\015\005\014\006\060\007" +
    "\025\010\075\011\026\012\050\013\011\014\061\015\127" +
    "\016\073\017\125\020\062\021\110\022\024\023\124\024" +
    "\122\025\120\026\066\027\104\030\056\031\055\032\034" +
    "\033\033\034\076\035\030\036\116\037\023\040\022\041" +
    "\117\042\100\043\013\044\077\045\044\046\063\047\107" +
    "\050\057\051\072\052\113\053\106\054\020\055\012\056" +
    "\103\057\046\060\054\061\053\062\071\063\067\064\115" +
    "\065\043\066\041\067\037\070\040\071\111\072\052\073" +
    "\051\074\010\075\047\076\126\077\112\100\074\101\045" +
    "\102\036\103\042\104\027\105\032\106\105\107\064\132" +
    "\141\155\130\162\134\163\136\171\142\202\132\203\137" +
    "\204\u0118\206\140\001\002\000\022\134\252\135\251\136" +
    "\250\137\247\140\246\141\245\142\243\155\u010b\001\002" +
    "\000\016\002\uffb1\003\uffb1\126\uffb1\157\uffb1\160\uffb1\207" +
    "\uffb1\001\002\000\042\134\235\135\234\136\233\137\232" +
    "\140\231\141\230\142\225\143\221\144\220\145\236\146" +
    "\223\147\240\150\217\153\227\154\224\155\222\001\002" +
    "\000\006\151\202\155\201\001\002\000\014\002\ufff7\003" +
    "\ufff7\126\ufff7\160\ufff7\207\ufff7\001\002\000\016\002\uffb7" +
    "\003\uffb7\126\uffb7\157\uffb7\160\uffb7\207\uffb7\001\002\000" +
    "\022\132\141\155\130\162\134\163\136\171\142\202\132" +
    "\203\137\206\140\001\002\000\022\132\141\155\130\162" +
    "\134\163\136\171\142\202\132\203\137\206\140\001\002" +
    "\000\016\002\uffba\003\uffba\126\uffba\157\uffba\160\uffba\207" +
    "\uffba\001\002\000\022\132\141\155\130\162\134\163\136" +
    "\171\142\202\132\203\137\206\140\001\002\000\016\002" +
    "\uffbc\003\uffbc\126\uffbc\157\uffbc\160\uffbc\207\uffbc\001\002" +
    "\000\022\132\141\155\130\162\134\163\136\171\142\202" +
    "\132\203\137\206\140\001\002\000\056\002\uffe7\003\uffe7" +
    "\126\uffe7\156\uffe7\157\uffe7\160\uffe7\162\uffe7\163\uffe7\164" +
    "\uffe7\165\uffe7\166\uffe7\167\uffe7\170\uffe7\172\uffe7\173\uffe7" +
    "\174\uffe7\175\uffe7\176\uffe7\177\uffe7\200\uffe7\201\uffe7\207" +
    "\uffe7\001\002\000\056\002\uffe4\003\uffe4\126\uffe4\156\uffe4" +
    "\157\uffe4\160\uffe4\162\uffe4\163\uffe4\164\uffe4\165\uffe4\166" +
    "\uffe4\167\uffe4\170\uffe4\172\uffe4\173\uffe4\174\uffe4\175\uffe4" +
    "\176\uffe4\177\uffe4\200\uffe4\201\uffe4\207\uffe4\001\002\000" +
    "\054\002\uff14\003\uff14\126\uff14\157\uff14\160\uff14\162\154" +
    "\163\161\164\151\165\157\166\152\167\153\170\160\172" +
    "\145\173\156\174\146\175\162\176\163\177\155\200\150" +
    "\201\144\207\uff14\001\002\000\022\132\uffdf\155\uffdf\162" +
    "\uffdf\163\uffdf\171\uffdf\202\uffdf\203\uffdf\206\uffdf\001\002" +
    "\000\022\132\141\155\130\162\134\163\136\171\142\202" +
    "\132\203\137\206\140\001\002\000\022\132\uffde\155\uffde" +
    "\162\uffde\163\uffde\171\uffde\202\uffde\203\uffde\206\uffde\001" +
    "\002\000\056\002\uffe3\003\uffe3\126\uffe3\156\uffe3\157\uffe3" +
    "\160\uffe3\162\uffe3\163\uffe3\164\uffe3\165\uffe3\166\uffe3\167" +
    "\uffe3\170\uffe3\172\uffe3\173\uffe3\174\uffe3\175\uffe3\176\uffe3" +
    "\177\uffe3\200\uffe3\201\uffe3\207\uffe3\001\002\000\056\002" +
    "\uffe1\003\uffe1\126\uffe1\156\uffe1\157\uffe1\160\uffe1\162\uffe1" +
    "\163\uffe1\164\uffe1\165\uffe1\166\uffe1\167\uffe1\170\uffe1\172" +
    "\uffe1\173\uffe1\174\uffe1\175\uffe1\176\uffe1\177\uffe1\200\uffe1" +
    "\201\uffe1\207\uffe1\001\002\000\056\002\uffe2\003\uffe2\126" +
    "\uffe2\156\uffe2\157\uffe2\160\uffe2\162\uffe2\163\uffe2\164\uffe2" +
    "\165\uffe2\166\uffe2\167\uffe2\170\uffe2\172\uffe2\173\uffe2\174" +
    "\uffe2\175\uffe2\176\uffe2\177\uffe2\200\uffe2\201\uffe2\207\uffe2" +
    "\001\002\000\022\132\uffe0\155\uffe0\162\uffe0\163\uffe0\171" +
    "\uffe0\202\uffe0\203\uffe0\206\uffe0\001\002\000\056\002\uffe5" +
    "\003\uffe5\126\uffe5\156\uffe5\157\uffe5\160\uffe5\162\154\163" +
    "\161\164\151\165\157\166\152\167\153\170\160\172\145" +
    "\173\156\174\146\175\162\176\163\177\155\200\150\201" +
    "\144\207\uffe5\001\002\000\022\132\uffd6\155\uffd6\162\uffd6" +
    "\163\uffd6\171\uffd6\202\uffd6\203\uffd6\206\uffd6\001\002\000" +
    "\022\132\uffdb\155\uffdb\162\uffdb\163\uffdb\171\uffdb\202\uffdb" +
    "\203\uffdb\206\uffdb\001\002\000\022\132\uffdc\155\uffdc\162" +
    "\uffdc\163\uffdc\171\uffdc\202\uffdc\203\uffdc\206\uffdc\001\002" +
    "\000\022\132\141\155\130\162\134\163\136\171\142\202" +
    "\132\203\137\206\140\001\002\000\022\132\uffd7\155\uffd7" +
    "\162\uffd7\163\uffd7\171\uffd7\202\uffd7\203\uffd7\206\uffd7\001" +
    "\002\000\022\132\uffd3\155\uffd3\162\uffd3\163\uffd3\171\uffd3" +
    "\202\uffd3\203\uffd3\206\uffd3\001\002\000\022\132\uffd1\155" +
    "\uffd1\162\uffd1\163\uffd1\171\uffd1\202\uffd1\203\uffd1\206\uffd1" +
    "\001\002\000\022\132\uffd0\155\uffd0\162\uffd0\163\uffd0\171" +
    "\uffd0\202\uffd0\203\uffd0\206\uffd0\001\002\000\022\132\uffd5" +
    "\155\uffd5\162\uffd5\163\uffd5\171\uffd5\202\uffd5\203\uffd5\206" +
    "\uffd5\001\002\000\022\132\uffd8\155\uffd8\162\uffd8\163\uffd8" +
    "\171\uffd8\202\uffd8\203\uffd8\206\uffd8\001\002\000\022\132" +
    "\uffdd\155\uffdd\162\uffdd\163\uffdd\171\uffdd\202\uffdd\203\uffdd" +
    "\206\uffdd\001\002\000\022\132\uffd2\155\uffd2\162\uffd2\163" +
    "\uffd2\171\uffd2\202\uffd2\203\uffd2\206\uffd2\001\002\000\022" +
    "\132\uffcf\155\uffcf\162\uffcf\163\uffcf\171\uffcf\202\uffcf\203" +
    "\uffcf\206\uffcf\001\002\000\022\132\uffd4\155\uffd4\162\uffd4" +
    "\163\uffd4\171\uffd4\202\uffd4\203\uffd4\206\uffd4\001\002\000" +
    "\022\132\uffda\155\uffda\162\uffda\163\uffda\171\uffda\202\uffda" +
    "\203\uffda\206\uffda\001\002\000\022\132\uffd9\155\uffd9\162" +
    "\uffd9\163\uffd9\171\uffd9\202\uffd9\203\uffd9\206\uffd9\001\002" +
    "\000\056\002\uffe6\003\uffe6\126\uffe6\156\uffe6\157\uffe6\160" +
    "\uffe6\162\154\163\161\164\151\165\157\166\152\167\153" +
    "\170\160\172\145\173\156\174\146\175\162\176\163\177" +
    "\155\200\150\201\144\207\uffe6\001\002\000\042\156\166" +
    "\162\154\163\161\164\151\165\157\166\152\167\153\170" +
    "\160\172\145\173\156\174\146\175\162\176\163\177\155" +
    "\200\150\201\144\001\002\000\056\002\uffe8\003\uffe8\126" +
    "\uffe8\156\uffe8\157\uffe8\160\uffe8\162\uffe8\163\uffe8\164\uffe8" +
    "\165\uffe8\166\uffe8\167\uffe8\170\uffe8\172\uffe8\173\uffe8\174" +
    "\uffe8\175\uffe8\176\uffe8\177\uffe8\200\uffe8\201\uffe8\207\uffe8" +
    "\001\002\000\054\002\uff77\003\uff77\126\uff77\157\uff77\160" +
    "\uff77\162\154\163\161\164\151\165\157\166\152\167\153" +
    "\170\160\172\145\173\156\174\146\175\162\176\163\177" +
    "\155\200\150\201\144\207\uff77\001\002\000\044\160\ufff9" +
    "\162\154\163\161\164\151\165\157\166\152\167\153\170" +
    "\160\172\145\173\156\174\146\175\162\176\163\177\155" +
    "\200\150\201\144\207\171\001\002\000\012\002\ufffa\003" +
    "\ufffa\126\ufffa\160\ufffa\001\002\000\004\160\173\001\002" +
    "\000\240\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074" +
    "\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb" +
    "\103\ufffb\104\ufffb\105\ufffb\106\ufffb\107\ufffb\120\ufffb\123" +
    "\ufffb\127\ufffb\130\ufffb\131\ufffb\133\ufffb\160\ufffb\205\007" +
    "\206\ufffb\207\ufffb\001\002\000\006\003\175\160\176\001" +
    "\002\000\012\002\ufffe\003\ufffe\126\ufffe\160\ufffe\001\002" +
    "\000\242\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074" +
    "\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb" +
    "\103\ufffb\104\ufffb\105\ufffb\106\ufffb\107\ufffb\120\ufffb\123" +
    "\ufffb\124\200\127\ufffb\130\ufffb\131\ufffb\133\ufffb\160\ufffb" +
    "\205\007\206\ufffb\207\ufffb\001\002\000\012\002\uffff\003" +
    "\uffff\126\uffff\160\uffff\001\002\000\014\002\uffcb\003\uffcb" +
    "\126\uffcb\160\uffcb\207\uffcb\001\002\000\006\145\205\147" +
    "\206\001\002\000\004\157\203\001\002\000\004\152\204" +
    "\001\002\000\016\002\uff72\003\uff72\126\uff72\157\uff72\160" +
    "\uff72\207\uff72\001\002\000\004\156\212\001\002\000\004" +
    "\156\207\001\002\000\004\157\210\001\002\000\004\150" +
    "\211\001\002\000\016\002\uff73\003\uff73\126\uff73\157\uff73" +
    "\160\uff73\207\uff73\001\002\000\004\157\213\001\002\000" +
    "\010\143\216\144\215\150\214\001\002\000\016\002\uff76" +
    "\003\uff76\126\uff76\157\uff76\160\uff76\207\uff76\001\002\000" +
    "\016\002\uff74\003\uff74\126\uff74\157\uff74\160\uff74\207\uff74" +
    "\001\002\000\016\002\uff75\003\uff75\126\uff75\157\uff75\160" +
    "\uff75\207\uff75\001\002\000\016\002\ufede\003\ufede\126\ufede" +
    "\157\ufede\160\ufede\207\ufede\001\002\000\004\157\u0106\001" +
    "\002\000\004\157\u0101\001\002\000\034\132\141\143\342" +
    "\144\341\146\335\147\336\150\340\155\130\162\134\163" +
    "\136\171\142\202\132\203\137\206\140\001\002\000\016" +
    "\002\ufee0\003\ufee0\126\ufee0\157\ufee0\160\ufee0\207\ufee0\001" +
    "\002\000\004\157\333\001\002\000\016\002\ufee3\003\ufee3" +
    "\126\ufee3\157\ufee3\160\ufee3\207\ufee3\001\002\000\004\157" +
    "\326\001\002\000\004\157\324\001\002\000\016\002\ufee4" +
    "\003\ufee4\126\ufee4\157\ufee4\160\ufee4\207\ufee4\001\002\000" +
    "\016\002\ufee5\003\ufee5\126\ufee5\157\ufee5\160\ufee5\207\ufee5" +
    "\001\002\000\016\002\ufee6\003\ufee6\126\ufee6\157\ufee6\160" +
    "\ufee6\207\ufee6\001\002\000\016\002\ufee7\003\ufee7\126\ufee7" +
    "\157\ufee7\160\ufee7\207\ufee7\001\002\000\016\002\ufee8\003" +
    "\ufee8\126\ufee8\157\ufee8\160\ufee8\207\ufee8\001\002\000\004" +
    "\157\276\001\002\000\004\157\266\001\002\000\004\157" +
    "\241\001\002\000\016\002\ufedf\003\ufedf\126\ufedf\157\ufedf" +
    "\160\ufedf\207\ufedf\001\002\000\040\132\141\134\252\135" +
    "\251\136\250\137\247\140\246\141\245\142\243\155\242" +
    "\162\134\163\136\171\142\202\132\203\137\206\140\001" +
    "\002\000\030\132\141\143\256\144\255\150\254\155\130" +
    "\162\134\163\136\171\142\202\132\203\137\206\140\001" +
    "\002\000\016\002\ufee9\003\ufee9\126\ufee9\157\ufee9\160\ufee9" +
    "\207\ufee9\001\002\000\016\002\uff3d\003\uff3d\126\uff3d\157" +
    "\uff3d\160\uff3d\207\uff3d\001\002\000\016\002\ufeea\003\ufeea" +
    "\126\ufeea\157\ufeea\160\ufeea\207\ufeea\001\002\000\016\002" +
    "\ufeeb\003\ufeeb\126\ufeeb\157\ufeeb\160\ufeeb\207\ufeeb\001\002" +
    "\000\016\002\ufeec\003\ufeec\126\ufeec\157\ufeec\160\ufeec\207" +
    "\ufeec\001\002\000\016\002\ufeed\003\ufeed\126\ufeed\157\ufeed" +
    "\160\ufeed\207\ufeed\001\002\000\016\002\ufeee\003\ufeee\126" +
    "\ufeee\157\ufeee\160\ufeee\207\ufeee\001\002\000\016\002\ufeef" +
    "\003\ufeef\126\ufeef\157\ufeef\160\ufeef\207\ufeef\001\002\000" +
    "\054\002\uff3c\003\uff3c\126\uff3c\157\uff3c\160\uff3c\162\154" +
    "\163\161\164\151\165\157\166\152\167\153\170\160\172" +
    "\145\173\156\174\146\175\162\176\163\177\155\200\150" +
    "\201\144\207\uff3c\001\002\000\004\156\265\001\002\000" +
    "\004\162\262\001\002\000\004\162\257\001\002\000\022" +
    "\132\141\155\130\162\134\163\136\171\142\202\132\203" +
    "\137\206\140\001\002\000\042\156\261\162\154\163\161" +
    "\164\151\165\157\166\152\167\153\170\160\172\145\173" +
    "\156\174\146\175\162\176\163\177\155\200\150\201\144" +
    "\001\002\000\016\002\uff42\003\uff42\126\uff42\157\uff42\160" +
    "\uff42\207\uff42\001\002\000\022\132\141\155\130\162\134" +
    "\163\136\171\142\202\132\203\137\206\140\001\002\000" +
    "\042\156\264\162\154\163\161\164\151\165\157\166\152" +
    "\167\153\170\160\172\145\173\156\174\146\175\162\176" +
    "\163\177\155\200\150\201\144\001\002\000\016\002\uff41" +
    "\003\uff41\126\uff41\157\uff41\160\uff41\207\uff41\001\002\000" +
    "\016\002\uff44\003\uff44\126\uff44\157\uff44\160\uff44\207\uff44" +
    "\001\002\000\032\132\141\143\273\144\272\150\270\155" +
    "\130\161\271\162\134\163\136\171\142\202\132\203\137" +
    "\206\140\001\002\000\054\002\uff4b\003\uff4b\126\uff4b\157" +
    "\uff4b\160\uff4b\162\154\163\161\164\151\165\157\166\152" +
    "\167\153\170\160\172\145\173\156\174\146\175\162\176" +
    "\163\177\155\200\150\201\144\207\uff4b\001\002\000\016" +
    "\002\uff3a\003\uff3a\126\uff3a\157\uff3a\160\uff3a\207\uff3a\001" +
    "\002\000\022\132\141\155\130\162\134\163\136\171\142" +
    "\202\132\203\137\206\140\001\002\000\016\002\uff38\003" +
    "\uff38\126\uff38\157\uff38\160\uff38\207\uff38\001\002\000\016" +
    "\002\uff39\003\uff39\126\uff39\157\uff39\160\uff39\207\uff39\001" +
    "\002\000\042\156\275\162\154\163\161\164\151\165\157" +
    "\166\152\167\153\170\160\172\145\173\156\174\146\175" +
    "\162\176\163\177\155\200\150\201\144\001\002\000\016" +
    "\002\uff4d\003\uff4d\126\uff4d\157\uff4d\160\uff4d\207\uff4d\001" +
    "\002\000\046\132\141\134\252\135\251\136\250\137\247" +
    "\140\246\141\245\142\243\153\302\154\277\155\130\161" +
    "\300\162\134\163\136\171\142\202\132\203\137\206\140" +
    "\001\002\000\016\002\uff4f\003\uff4f\126\uff4f\157\uff4f\160" +
    "\uff4f\207\uff4f\001\002\000\034\132\141\143\311\144\310" +
    "\146\304\147\305\150\307\155\130\162\134\163\136\171" +
    "\142\202\132\203\137\206\140\001\002\000\016\002\uff3e" +
    "\003\uff3e\126\uff3e\157\uff3e\160\uff3e\207\uff3e\001\002\000" +
    "\016\002\uff50\003\uff50\126\uff50\157\uff50\160\uff50\207\uff50" +
    "\001\002\000\054\002\uff3b\003\uff3b\126\uff3b\157\uff3b\160" +
    "\uff3b\162\154\163\161\164\151\165\157\166\152\167\153" +
    "\170\160\172\145\173\156\174\146\175\162\176\163\177" +
    "\155\200\150\201\144\207\uff3b\001\002\000\004\156\323" +
    "\001\002\000\004\156\322\001\002\000\042\156\321\162" +
    "\154\163\161\164\151\165\157\166\152\167\153\170\160" +
    "\172\145\173\156\174\146\175\162\176\163\177\155\200" +
    "\150\201\144\001\002\000\004\156\320\001\002\000\004" +
    "\162\315\001\002\000\004\162\312\001\002\000\022\132" +
    "\141\155\130\162\134\163\136\171\142\202\132\203\137" +
    "\206\140\001\002\000\042\156\314\162\154\163\161\164" +
    "\151\165\157\166\152\167\153\170\160\172\145\173\156" +
    "\174\146\175\162\176\163\177\155\200\150\201\144\001" +
    "\002\000\016\002\uff40\003\uff40\126\uff40\157\uff40\160\uff40" +
    "\207\uff40\001\002\000\022\132\141\155\130\162\134\163" +
    "\136\171\142\202\132\203\137\206\140\001\002\000\042" +
    "\156\317\162\154\163\161\164\151\165\157\166\152\167" +
    "\153\170\160\172\145\173\156\174\146\175\162\176\163" +
    "\177\155\200\150\201\144\001\002\000\016\002\uff3f\003" +
    "\uff3f\126\uff3f\157\uff3f\160\uff3f\207\uff3f\001\002\000\016" +
    "\002\uff43\003\uff43\126\uff43\157\uff43\160\uff43\207\uff43\001" +
    "\002\000\016\002\uff51\003\uff51\126\uff51\157\uff51\160\uff51" +
    "\207\uff51\001\002\000\016\002\uff52\003\uff52\126\uff52\157" +
    "\uff52\160\uff52\207\uff52\001\002\000\016\002\uff53\003\uff53" +
    "\126\uff53\157\uff53\160\uff53\207\uff53\001\002\000\004\134" +
    "\325\001\002\000\016\002\uff4a\003\uff4a\126\uff4a\157\uff4a" +
    "\160\uff4a\207\uff4a\001\002\000\024\132\141\155\130\161" +
    "\330\162\134\163\136\171\142\202\132\203\137\206\140" +
    "\001\002\000\054\002\uff4c\003\uff4c\126\uff4c\157\uff4c\160" +
    "\uff4c\162\154\163\161\164\151\165\157\166\152\167\153" +
    "\170\160\172\145\173\156\174\146\175\162\176\163\177" +
    "\155\200\150\201\144\207\uff4c\001\002\000\022\132\141" +
    "\155\130\162\134\163\136\171\142\202\132\203\137\206" +
    "\140\001\002\000\042\156\332\162\154\163\161\164\151" +
    "\165\157\166\152\167\153\170\160\172\145\173\156\174" +
    "\146\175\162\176\163\177\155\200\150\201\144\001\002" +
    "\000\016\002\uff4e\003\uff4e\126\uff4e\157\uff4e\160\uff4e\207" +
    "\uff4e\001\002\000\004\134\334\001\002\000\016\002\uff49" +
    "\003\uff49\126\uff49\157\uff49\160\uff49\207\uff49\001\002\000" +
    "\004\156\376\001\002\000\004\156\373\001\002\000\042" +
    "\156\363\162\154\163\161\164\151\165\157\166\152\167" +
    "\153\170\160\172\145\173\156\174\146\175\162\176\163" +
    "\177\155\200\150\201\144\001\002\000\004\156\357\001" +
    "\002\000\004\162\351\001\002\000\004\162\343\001\002" +
    "\000\022\132\141\155\130\162\134\163\136\171\142\202" +
    "\132\203\137\206\140\001\002\000\042\156\345\162\154" +
    "\163\161\164\151\165\157\166\152\167\153\170\160\172" +
    "\145\173\156\174\146\175\162\176\163\177\155\200\150" +
    "\201\144\001\002\000\004\157\346\001\002\000\040\132" +
    "\141\134\252\135\251\136\250\137\247\140\246\141\245" +
    "\142\243\155\130\162\134\163\136\171\142\202\132\203" +
    "\137\206\140\001\002\000\016\002\uff59\003\uff59\126\uff59" +
    "\157\uff59\160\uff59\207\uff59\001\002\000\054\002\uff5b\003" +
    "\uff5b\126\uff5b\157\uff5b\160\uff5b\162\154\163\161\164\151" +
    "\165\157\166\152\167\153\170\160\172\145\173\156\174" +
    "\146\175\162\176\163\177\155\200\150\201\144\207\uff5b" +
    "\001\002\000\022\132\141\155\130\162\134\163\136\171" +
    "\142\202\132\203\137\206\140\001\002\000\042\156\353" +
    "\162\154\163\161\164\151\165\157\166\152\167\153\170" +
    "\160\172\145\173\156\174\146\175\162\176\163\177\155" +
    "\200\150\201\144\001\002\000\004\157\354\001\002\000" +
    "\040\132\141\134\252\135\251\136\250\137\247\140\246" +
    "\141\245\142\243\155\130\162\134\163\136\171\142\202" +
    "\132\203\137\206\140\001\002\000\016\002\uff58\003\uff58" +
    "\126\uff58\157\uff58\160\uff58\207\uff58\001\002\000\054\002" +
    "\uff5a\003\uff5a\126\uff5a\157\uff5a\160\uff5a\162\154\163\161" +
    "\164\151\165\157\166\152\167\153\170\160\172\145\173" +
    "\156\174\146\175\162\176\163\177\155\200\150\201\144" +
    "\207\uff5a\001\002\000\004\157\360\001\002\000\040\132" +
    "\141\134\252\135\251\136\250\137\247\140\246\141\245" +
    "\142\243\155\130\162\134\163\136\171\142\202\132\203" +
    "\137\206\140\001\002\000\016\002\uff5c\003\uff5c\126\uff5c" +
    "\157\uff5c\160\uff5c\207\uff5c\001\002\000\054\002\uff5d\003" +
    "\uff5d\126\uff5d\157\uff5d\160\uff5d\162\154\163\161\164\151" +
    "\165\157\166\152\167\153\170\160\172\145\173\156\174" +
    "\146\175\162\176\163\177\155\200\150\201\144\207\uff5d" +
    "\001\002\000\004\157\364\001\002\000\020\134\365\143" +
    "\370\144\367\145\366\146\223\147\240\150\217\001\002" +
    "\000\016\002\uff57\003\uff57\126\uff57\157\uff57\160\uff57\207" +
    "\uff57\001\002\000\016\002\ufee2\003\ufee2\126\ufee2\157\ufee2" +
    "\160\ufee2\207\ufee2\001\002\000\016\002\uff54\003\uff54\126" +
    "\uff54\157\uff54\160\uff54\207\uff54\001\002\000\016\002\uff55" +
    "\003\uff55\126\uff55\157\uff55\160\uff55\207\uff55\001\002\000" +
    "\016\002\uff56\003\uff56\126\uff56\157\uff56\160\uff56\207\uff56" +
    "\001\002\000\016\002\ufee1\003\ufee1\126\ufee1\157\ufee1\160" +
    "\ufee1\207\ufee1\001\002\000\004\157\374\001\002\000\004" +
    "\134\375\001\002\000\016\002\uff5e\003\uff5e\126\uff5e\157" +
    "\uff5e\160\uff5e\207\uff5e\001\002\000\004\157\377\001\002" +
    "\000\004\134\u0100\001\002\000\016\002\uff5f\003\uff5f\126" +
    "\uff5f\157\uff5f\160\uff5f\207\uff5f\001\002\000\024\132\141" +
    "\155\130\161\u0103\162\134\163\136\171\142\202\132\203" +
    "\137\206\140\001\002\000\054\002\uff46\003\uff46\126\uff46" +
    "\157\uff46\160\uff46\162\154\163\161\164\151\165\157\166" +
    "\152\167\153\170\160\172\145\173\156\174\146\175\162" +
    "\176\163\177\155\200\150\201\144\207\uff46\001\002\000" +
    "\022\132\141\155\130\162\134\163\136\171\142\202\132" +
    "\203\137\206\140\001\002\000\042\156\u0105\162\154\163" +
    "\161\164\151\165\157\166\152\167\153\170\160\172\145" +
    "\173\156\174\146\175\162\176\163\177\155\200\150\201" +
    "\144\001\002\000\016\002\uff48\003\uff48\126\uff48\157\uff48" +
    "\160\uff48\207\uff48\001\002\000\024\132\141\155\130\161" +
    "\u0108\162\134\163\136\171\142\202\132\203\137\206\140" +
    "\001\002\000\054\002\uff45\003\uff45\126\uff45\157\uff45\160" +
    "\uff45\162\154\163\161\164\151\165\157\166\152\167\153" +
    "\170\160\172\145\173\156\174\146\175\162\176\163\177" +
    "\155\200\150\201\144\207\uff45\001\002\000\022\132\141" +
    "\155\130\162\134\163\136\171\142\202\132\203\137\206" +
    "\140\001\002\000\042\156\u010a\162\154\163\161\164\151" +
    "\165\157\166\152\167\153\170\160\172\145\173\156\174" +
    "\146\175\162\176\163\177\155\200\150\201\144\001\002" +
    "\000\016\002\uff47\003\uff47\126\uff47\157\uff47\160\uff47\207" +
    "\uff47\001\002\000\010\143\u010f\144\u010d\150\u010e\001\002" +
    "\000\016\002\uff21\003\uff21\126\uff21\157\uff21\160\uff21\207" +
    "\uff21\001\002\000\004\162\u0114\001\002\000\004\156\u0113" +
    "\001\002\000\004\162\u0110\001\002\000\022\132\141\155" +
    "\130\162\134\163\136\171\142\202\132\203\137\206\140" +
    "\001\002\000\042\156\u0112\162\154\163\161\164\151\165" +
    "\157\166\152\167\153\170\160\172\145\173\156\174\146" +
    "\175\162\176\163\177\155\200\150\201\144\001\002\000" +
    "\016\002\uff23\003\uff23\126\uff23\157\uff23\160\uff23\207\uff23" +
    "\001\002\000\016\002\uff24\003\uff24\126\uff24\157\uff24\160" +
    "\uff24\207\uff24\001\002\000\022\132\141\155\130\162\134" +
    "\163\136\171\142\202\132\203\137\206\140\001\002\000" +
    "\042\156\u0116\162\154\163\161\164\151\165\157\166\152" +
    "\167\153\170\160\172\145\173\156\174\146\175\162\176" +
    "\163\177\155\200\150\201\144\001\002\000\016\002\uff22" +
    "\003\uff22\126\uff22\157\uff22\160\uff22\207\uff22\001\002\000" +
    "\016\002\uffea\003\uffea\126\uffea\157\uffea\160\uffea\207\uffea" +
    "\001\002\000\016\002\uffeb\003\uffeb\126\uffeb\157\uffeb\160" +
    "\uffeb\207\uffeb\001\002\000\016\002\ufff0\003\ufff0\126\ufff0" +
    "\157\ufff0\160\ufff0\207\ufff0\001\002\000\016\002\ufff3\003" +
    "\ufff3\126\ufff3\157\u011c\160\ufff3\207\ufff3\001\002\000\054" +
    "\002\uffec\003\uffec\126\uffec\157\uffec\160\uffec\162\154\163" +
    "\161\164\151\165\157\166\152\167\153\170\160\172\145" +
    "\173\156\174\146\175\162\176\163\177\155\200\150\201" +
    "\144\207\uffec\001\002\000\234\004\015\005\014\006\060" +
    "\007\025\010\075\011\026\012\050\013\011\014\061\015" +
    "\127\016\073\017\125\020\062\021\110\022\024\023\124" +
    "\024\122\025\120\026\066\027\104\030\056\031\055\032" +
    "\034\033\033\034\076\035\030\036\116\037\023\040\022" +
    "\041\117\042\100\043\013\044\077\045\044\046\063\047" +
    "\107\050\057\051\072\052\113\053\106\054\020\055\012" +
    "\056\103\057\046\060\054\061\053\062\071\063\067\064" +
    "\115\065\043\066\041\067\037\070\040\071\111\072\052" +
    "\073\051\074\010\075\047\076\126\077\112\100\074\101" +
    "\045\102\036\103\042\104\027\105\032\106\105\107\064" +
    "\132\141\155\130\162\134\163\136\171\142\202\132\203" +
    "\137\204\u0118\206\140\001\002\000\016\002\uffef\003\uffef" +
    "\126\uffef\157\uffef\160\uffef\207\uffef\001\002\000\004\157" +
    "\u0122\001\002\000\004\157\u0120\001\002\000\012\145\366" +
    "\146\223\147\240\150\217\001\002\000\016\002\uff0e\003" +
    "\uff0e\126\uff0e\157\uff0e\160\uff0e\207\uff0e\001\002\000\040" +
    "\132\141\134\252\135\251\136\250\137\247\140\246\141" +
    "\245\142\243\155\u0123\162\134\163\136\171\142\202\132" +
    "\203\137\206\140\001\002\000\030\132\141\143\u0128\144" +
    "\u0127\150\u0126\155\130\162\134\163\136\171\142\202\132" +
    "\203\137\206\140\001\002\000\016\002\uff0f\003\uff0f\126" +
    "\uff0f\157\uff0f\160\uff0f\207\uff0f\001\002\000\054\002\uff10" +
    "\003\uff10\126\uff10\157\uff10\160\uff10\162\154\163\161\164" +
    "\151\165\157\166\152\167\153\170\160\172\145\173\156" +
    "\174\146\175\162\176\163\177\155\200\150\201\144\207" +
    "\uff10\001\002\000\004\156\u012f\001\002\000\004\162\u012c" +
    "\001\002\000\004\162\u0129\001\002\000\022\132\141\155" +
    "\130\162\134\163\136\171\142\202\132\203\137\206\140" +
    "\001\002\000\042\156\u012b\162\154\163\161\164\151\165" +
    "\157\166\152\167\153\170\160\172\145\173\156\174\146" +
    "\175\162\176\163\177\155\200\150\201\144\001\002\000" +
    "\016\002\uff12\003\uff12\126\uff12\157\uff12\160\uff12\207\uff12" +
    "\001\002\000\022\132\141\155\130\162\134\163\136\171" +
    "\142\202\132\203\137\206\140\001\002\000\042\156\u012e" +
    "\162\154\163\161\164\151\165\157\166\152\167\153\170" +
    "\160\172\145\173\156\174\146\175\162\176\163\177\155" +
    "\200\150\201\144\001\002\000\016\002\uff11\003\uff11\126" +
    "\uff11\157\uff11\160\uff11\207\uff11\001\002\000\016\002\uff13" +
    "\003\uff13\126\uff13\157\uff13\160\uff13\207\uff13\001\002\000" +
    "\010\143\u0134\144\u0132\150\u0133\001\002\000\016\002\uff19" +
    "\003\uff19\126\uff19\157\uff19\160\uff19\207\uff19\001\002\000" +
    "\004\162\u0139\001\002\000\004\156\u0138\001\002\000\004" +
    "\162\u0135\001\002\000\022\132\141\155\130\162\134\163" +
    "\136\171\142\202\132\203\137\206\140\001\002\000\042" +
    "\156\u0137\162\154\163\161\164\151\165\157\166\152\167" +
    "\153\170\160\172\145\173\156\174\146\175\162\176\163" +
    "\177\155\200\150\201\144\001\002\000\016\002\uff1b\003" +
    "\uff1b\126\uff1b\157\uff1b\160\uff1b\207\uff1b\001\002\000\016" +
    "\002\uff1c\003\uff1c\126\uff1c\157\uff1c\160\uff1c\207\uff1c\001" +
    "\002\000\022\132\141\155\130\162\134\163\136\171\142" +
    "\202\132\203\137\206\140\001\002\000\042\156\u013b\162" +
    "\154\163\161\164\151\165\157\166\152\167\153\170\160" +
    "\172\145\173\156\174\146\175\162\176\163\177\155\200" +
    "\150\201\144\001\002\000\016\002\uff1a\003\uff1a\126\uff1a" +
    "\157\uff1a\160\uff1a\207\uff1a\001\002\000\010\143\u0144\144" +
    "\u0142\150\u0143\001\002\000\016\002\uff7c\003\uff7c\126\uff7c" +
    "\157\uff7c\160\uff7c\207\uff7c\001\002\000\016\002\uff78\003" +
    "\uff78\126\uff78\157\uff78\160\uff78\207\uff78\001\002\000\016" +
    "\002\uff79\003\uff79\126\uff79\157\uff79\160\uff79\207\uff79\001" +
    "\002\000\016\002\uff7a\003\uff7a\126\uff7a\157\uff7a\160\uff7a" +
    "\207\uff7a\001\002\000\016\002\uff7b\003\uff7b\126\uff7b\157" +
    "\uff7b\160\uff7b\207\uff7b\001\002\000\004\162\u0149\001\002" +
    "\000\004\156\u0148\001\002\000\004\162\u0145\001\002\000" +
    "\022\132\141\155\130\162\134\163\136\171\142\202\132" +
    "\203\137\206\140\001\002\000\042\156\u0147\162\154\163" +
    "\161\164\151\165\157\166\152\167\153\170\160\172\145" +
    "\173\156\174\146\175\162\176\163\177\155\200\150\201" +
    "\144\001\002\000\016\002\uff7e\003\uff7e\126\uff7e\157\uff7e" +
    "\160\uff7e\207\uff7e\001\002\000\016\002\uff7f\003\uff7f\126" +
    "\uff7f\157\uff7f\160\uff7f\207\uff7f\001\002\000\022\132\141" +
    "\155\130\162\134\163\136\171\142\202\132\203\137\206" +
    "\140\001\002\000\042\156\u014b\162\154\163\161\164\151" +
    "\165\157\166\152\167\153\170\160\172\145\173\156\174" +
    "\146\175\162\176\163\177\155\200\150\201\144\001\002" +
    "\000\016\002\uff7d\003\uff7d\126\uff7d\157\uff7d\160\uff7d\207" +
    "\uff7d\001\002\000\024\132\141\136\u014d\155\130\162\134" +
    "\163\136\171\142\202\132\203\137\206\140\001\002\000" +
    "\004\156\u0152\001\002\000\042\156\u014f\162\154\163\161" +
    "\164\151\165\157\166\152\167\153\170\160\172\145\173" +
    "\156\174\146\175\162\176\163\177\155\200\150\201\144" +
    "\001\002\000\004\157\u0150\001\002\000\004\134\u0151\001" +
    "\002\000\016\002\uff32\003\uff32\126\uff32\157\uff32\160\uff32" +
    "\207\uff32\001\002\000\004\157\u0153\001\002\000\020\134" +
    "\252\135\251\136\250\137\247\140\246\141\245\142\243" +
    "\001\002\000\016\002\uff31\003\uff31\126\uff31\157\uff31\160" +
    "\uff31\207\uff31\001\002\000\030\132\141\143\u015a\144\u0159" +
    "\150\u0158\155\130\162\134\163\136\171\142\202\132\203" +
    "\137\206\140\001\002\000\016\002\ufef6\003\ufef6\126\ufef6" +
    "\157\ufef6\160\ufef6\207\ufef6\001\002\000\054\002\ufef5\003" +
    "\ufef5\126\ufef5\157\ufef5\160\ufef5\162\154\163\161\164\151" +
    "\165\157\166\152\167\153\170\160\172\145\173\156\174" +
    "\146\175\162\176\163\177\155\200\150\201\144\207\ufef5" +
    "\001\002\000\004\156\u0161\001\002\000\004\162\u015e\001" +
    "\002\000\004\162\u015b\001\002\000\022\132\141\155\130" +
    "\162\134\163\136\171\142\202\132\203\137\206\140\001" +
    "\002\000\042\156\u015d\162\154\163\161\164\151\165\157" +
    "\166\152\167\153\170\160\172\145\173\156\174\146\175" +
    "\162\176\163\177\155\200\150\201\144\001\002\000\016" +
    "\002\ufef8\003\ufef8\126\ufef8\157\ufef8\160\ufef8\207\ufef8\001" +
    "\002\000\022\132\141\155\130\162\134\163\136\171\142" +
    "\202\132\203\137\206\140\001\002\000\042\156\u0160\162" +
    "\154\163\161\164\151\165\157\166\152\167\153\170\160" +
    "\172\145\173\156\174\146\175\162\176\163\177\155\200" +
    "\150\201\144\001\002\000\016\002\ufef7\003\ufef7\126\ufef7" +
    "\157\ufef7\160\ufef7\207\ufef7\001\002\000\016\002\ufef9\003" +
    "\ufef9\126\ufef9\157\ufef9\160\ufef9\207\ufef9\001\002\000\016" +
    "\002\uff30\003\uff30\126\uff30\157\uff30\160\uff30\207\uff30\001" +
    "\002\000\016\002\ufec8\003\ufec8\126\ufec8\157\ufec8\160\ufec8" +
    "\207\ufec8\001\002\000\016\002\ufec7\003\ufec7\126\ufec7\157" +
    "\ufec7\160\ufec7\207\ufec7\001\002\000\016\002\ufec6\003\ufec6" +
    "\126\ufec6\157\ufec6\160\ufec6\207\ufec6\001\002\000\016\002" +
    "\uff2e\003\uff2e\126\uff2e\157\uff2e\160\uff2e\207\uff2e\001\002" +
    "\000\016\002\uff2f\003\uff2f\126\uff2f\157\uff2f\160\uff2f\207" +
    "\uff2f\001\002\000\016\002\ufec9\003\ufec9\126\ufec9\157\ufec9" +
    "\160\ufec9\207\ufec9\001\002\000\052\002\ufff1\003\ufff1\126" +
    "\ufff1\160\ufff1\162\154\163\161\164\151\165\157\166\152" +
    "\167\153\170\160\172\145\173\156\174\146\175\162\176" +
    "\163\177\155\200\150\201\144\207\ufff1\001\002\000\016" +
    "\002\ufff2\003\ufff2\126\ufff2\157\u016d\160\ufff2\207\ufff2\001" +
    "\002\000\054\002\uffe9\003\uffe9\126\uffe9\157\uffe9\160\uffe9" +
    "\162\154\163\161\164\151\165\157\166\152\167\153\170" +
    "\160\172\145\173\156\174\146\175\162\176\163\177\155" +
    "\200\150\201\144\207\uffe9\001\002\000\016\002\uffee\003" +
    "\uffee\126\uffee\157\uffee\160\uffee\207\uffee\001\002\000\022" +
    "\132\141\155\130\162\134\163\136\171\142\202\132\203" +
    "\137\206\140\001\002\000\016\002\uffed\003\uffed\126\uffed" +
    "\157\uffed\160\uffed\207\uffed\001\002\000\016\002\ufece\003" +
    "\ufece\126\ufece\157\ufece\160\ufece\207\ufece\001\002\000\016" +
    "\002\ufed3\003\ufed3\126\ufed3\157\ufed3\160\ufed3\207\ufed3\001" +
    "\002\000\004\157\u0179\001\002\000\016\002\ufed2\003\ufed2" +
    "\126\ufed2\157\ufed2\160\ufed2\207\ufed2\001\002\000\016\002" +
    "\ufed0\003\ufed0\126\ufed0\157\ufed0\160\ufed0\207\ufed0\001\002" +
    "\000\016\002\ufecf\003\ufecf\126\ufecf\157\ufecf\160\ufecf\207" +
    "\ufecf\001\002\000\016\002\ufed1\003\ufed1\126\ufed1\157\ufed1" +
    "\160\ufed1\207\ufed1\001\002\000\016\002\ufed5\003\ufed5\126" +
    "\ufed5\157\ufed5\160\ufed5\207\ufed5\001\002\000\016\002\ufed4" +
    "\003\ufed4\126\ufed4\157\ufed4\160\ufed4\207\ufed4\001\002\000" +
    "\054\002\uff85\003\uff85\126\uff85\157\uff85\160\uff85\162\154" +
    "\163\161\164\151\165\157\166\152\167\153\170\160\172" +
    "\145\173\156\174\146\175\162\176\163\177\155\200\150" +
    "\201\144\207\uff85\001\002\000\022\132\141\155\130\162" +
    "\134\163\136\171\142\202\132\203\137\206\140\001\002" +
    "\000\054\002\uff86\003\uff86\126\uff86\157\uff86\160\uff86\162" +
    "\154\163\161\164\151\165\157\166\152\167\153\170\160" +
    "\172\145\173\156\174\146\175\162\176\163\177\155\200" +
    "\150\201\144\207\uff86\001\002\000\030\132\141\143\u0180" +
    "\144\u017f\150\u017e\155\130\162\134\163\136\171\142\202" +
    "\132\203\137\206\140\001\002\000\016\002\ufef1\003\ufef1" +
    "\126\ufef1\157\ufef1\160\ufef1\207\ufef1\001\002\000\054\002" +
    "\ufef0\003\ufef0\126\ufef0\157\ufef0\160\ufef0\162\154\163\161" +
    "\164\151\165\157\166\152\167\153\170\160\172\145\173" +
    "\156\174\146\175\162\176\163\177\155\200\150\201\144" +
    "\207\ufef0\001\002\000\004\156\u0187\001\002\000\004\162" +
    "\u0184\001\002\000\004\162\u0181\001\002\000\022\132\141" +
    "\155\130\162\134\163\136\171\142\202\132\203\137\206" +
    "\140\001\002\000\042\156\u0183\162\154\163\161\164\151" +
    "\165\157\166\152\167\153\170\160\172\145\173\156\174" +
    "\146\175\162\176\163\177\155\200\150\201\144\001\002" +
    "\000\016\002\ufef3\003\ufef3\126\ufef3\157\ufef3\160\ufef3\207" +
    "\ufef3\001\002\000\022\132\141\155\130\162\134\163\136" +
    "\171\142\202\132\203\137\206\140\001\002\000\042\156" +
    "\u0186\162\154\163\161\164\151\165\157\166\152\167\153" +
    "\170\160\172\145\173\156\174\146\175\162\176\163\177" +
    "\155\200\150\201\144\001\002\000\016\002\ufef2\003\ufef2" +
    "\126\ufef2\157\ufef2\160\ufef2\207\ufef2\001\002\000\016\002" +
    "\ufef4\003\ufef4\126\ufef4\157\ufef4\160\ufef4\207\ufef4\001\002" +
    "\000\030\132\141\143\u018d\144\u018c\150\u018b\155\130\162" +
    "\134\163\136\171\142\202\132\203\137\206\140\001\002" +
    "\000\016\002\uff8c\003\uff8c\126\uff8c\157\uff8c\160\uff8c\207" +
    "\uff8c\001\002\000\054\002\uff8b\003\uff8b\126\uff8b\157\uff8b" +
    "\160\uff8b\162\154\163\161\164\151\165\157\166\152\167" +
    "\153\170\160\172\145\173\156\174\146\175\162\176\163" +
    "\177\155\200\150\201\144\207\uff8b\001\002\000\004\156" +
    "\u0194\001\002\000\004\162\u0191\001\002\000\004\162\u018e" +
    "\001\002\000\022\132\141\155\130\162\134\163\136\171" +
    "\142\202\132\203\137\206\140\001\002\000\042\156\u0190" +
    "\162\154\163\161\164\151\165\157\166\152\167\153\170" +
    "\160\172\145\173\156\174\146\175\162\176\163\177\155" +
    "\200\150\201\144\001\002\000\016\002\uff8e\003\uff8e\126" +
    "\uff8e\157\uff8e\160\uff8e\207\uff8e\001\002\000\022\132\141" +
    "\155\130\162\134\163\136\171\142\202\132\203\137\206" +
    "\140\001\002\000\042\156\u0193\162\154\163\161\164\151" +
    "\165\157\166\152\167\153\170\160\172\145\173\156\174" +
    "\146\175\162\176\163\177\155\200\150\201\144\001\002" +
    "\000\016\002\uff8d\003\uff8d\126\uff8d\157\uff8d\160\uff8d\207" +
    "\uff8d\001\002\000\016\002\uff8f\003\uff8f\126\uff8f\157\uff8f" +
    "\160\uff8f\207\uff8f\001\002\000\030\132\141\143\u019a\144" +
    "\u0199\150\u0198\155\130\162\134\163\136\171\142\202\132" +
    "\203\137\206\140\001\002\000\016\002\uff34\003\uff34\126" +
    "\uff34\157\uff34\160\uff34\207\uff34\001\002\000\054\002\uff33" +
    "\003\uff33\126\uff33\157\uff33\160\uff33\162\154\163\161\164" +
    "\151\165\157\166\152\167\153\170\160\172\145\173\156" +
    "\174\146\175\162\176\163\177\155\200\150\201\144\207" +
    "\uff33\001\002\000\004\156\u01a1\001\002\000\004\162\u019e" +
    "\001\002\000\004\162\u019b\001\002\000\022\132\141\155" +
    "\130\162\134\163\136\171\142\202\132\203\137\206\140" +
    "\001\002\000\042\156\u019d\162\154\163\161\164\151\165" +
    "\157\166\152\167\153\170\160\172\145\173\156\174\146" +
    "\175\162\176\163\177\155\200\150\201\144\001\002\000" +
    "\016\002\uff36\003\uff36\126\uff36\157\uff36\160\uff36\207\uff36" +
    "\001\002\000\022\132\141\155\130\162\134\163\136\171" +
    "\142\202\132\203\137\206\140\001\002\000\042\156\u01a0" +
    "\162\154\163\161\164\151\165\157\166\152\167\153\170" +
    "\160\172\145\173\156\174\146\175\162\176\163\177\155" +
    "\200\150\201\144\001\002\000\016\002\uff35\003\uff35\126" +
    "\uff35\157\uff35\160\uff35\207\uff35\001\002\000\016\002\uff37" +
    "\003\uff37\126\uff37\157\uff37\160\uff37\207\uff37\001\002\000" +
    "\054\002\uff71\003\uff71\126\uff71\157\uff71\160\uff71\162\154" +
    "\163\161\164\151\165\157\166\152\167\153\170\160\172" +
    "\145\173\156\174\146\175\162\176\163\177\155\200\150" +
    "\201\144\207\uff71\001\002\000\004\157\u01a9\001\002\000" +
    "\004\157\u01a5\001\002\000\004\155\u01a6\001\002\000\004" +
    "\136\u01a7\001\002\000\004\156\u01a8\001\002\000\016\002" +
    "\uff6e\003\uff6e\126\uff6e\157\uff6e\160\uff6e\207\uff6e\001\002" +
    "\000\004\155\u01aa\001\002\000\024\132\141\136\u01ab\155" +
    "\130\162\134\163\136\171\142\202\132\203\137\206\140" +
    "\001\002\000\004\156\u01ae\001\002\000\042\156\u01ad\162" +
    "\154\163\161\164\151\165\157\166\152\167\153\170\160" +
    "\172\145\173\156\174\146\175\162\176\163\177\155\200" +
    "\150\201\144\001\002\000\016\002\uff70\003\uff70\126\uff70" +
    "\157\uff70\160\uff70\207\uff70\001\002\000\016\002\uff6f\003" +
    "\uff6f\126\uff6f\157\uff6f\160\uff6f\207\uff6f\001\002\000\042" +
    "\157\u01b0\162\154\163\161\164\151\165\157\166\152\167" +
    "\153\170\160\172\145\173\156\174\146\175\162\176\163" +
    "\177\155\200\150\201\144\001\002\000\022\134\252\135" +
    "\251\136\250\137\247\140\246\141\245\142\243\155\u01b1" +
    "\001\002\000\010\143\u01b5\144\u01b3\150\u01b4\001\002\000" +
    "\016\002\uff27\003\uff27\126\uff27\157\uff27\160\uff27\207\uff27" +
    "\001\002\000\004\162\u01ba\001\002\000\004\156\u01b9\001" +
    "\002\000\004\162\u01b6\001\002\000\022\132\141\155\130" +
    "\162\134\163\136\171\142\202\132\203\137\206\140\001" +
    "\002\000\042\156\u01b8\162\154\163\161\164\151\165\157" +
    "\166\152\167\153\170\160\172\145\173\156\174\146\175" +
    "\162\176\163\177\155\200\150\201\144\001\002\000\016" +
    "\002\uff29\003\uff29\126\uff29\157\uff29\160\uff29\207\uff29\001" +
    "\002\000\016\002\uff2a\003\uff2a\126\uff2a\157\uff2a\160\uff2a" +
    "\207\uff2a\001\002\000\022\132\141\155\130\162\134\163" +
    "\136\171\142\202\132\203\137\206\140\001\002\000\042" +
    "\156\u01bc\162\154\163\161\164\151\165\157\166\152\167" +
    "\153\170\160\172\145\173\156\174\146\175\162\176\163" +
    "\177\155\200\150\201\144\001\002\000\016\002\uff28\003" +
    "\uff28\126\uff28\157\uff28\160\uff28\207\uff28\001\002\000\016" +
    "\002\uff25\003\uff25\126\uff25\157\uff25\160\uff25\207\uff25\001" +
    "\002\000\010\143\u01c2\144\u01c0\150\u01c1\001\002\000\016" +
    "\002\uff15\003\uff15\126\uff15\157\uff15\160\uff15\207\uff15\001" +
    "\002\000\004\162\u01c7\001\002\000\004\156\u01c6\001\002" +
    "\000\004\162\u01c3\001\002\000\022\132\141\155\130\162" +
    "\134\163\136\171\142\202\132\203\137\206\140\001\002" +
    "\000\042\156\u01c5\162\154\163\161\164\151\165\157\166" +
    "\152\167\153\170\160\172\145\173\156\174\146\175\162" +
    "\176\163\177\155\200\150\201\144\001\002\000\016\002" +
    "\uff17\003\uff17\126\uff17\157\uff17\160\uff17\207\uff17\001\002" +
    "\000\016\002\uff18\003\uff18\126\uff18\157\uff18\160\uff18\207" +
    "\uff18\001\002\000\022\132\141\155\130\162\134\163\136" +
    "\171\142\202\132\203\137\206\140\001\002\000\042\156" +
    "\u01c9\162\154\163\161\164\151\165\157\166\152\167\153" +
    "\170\160\172\145\173\156\174\146\175\162\176\163\177" +
    "\155\200\150\201\144\001\002\000\016\002\uff16\003\uff16" +
    "\126\uff16\157\uff16\160\uff16\207\uff16\001\002\000\030\132" +
    "\141\143\u01cf\144\u01ce\150\u01cd\155\130\162\134\163\136" +
    "\171\142\202\132\203\137\206\140\001\002\000\016\002" +
    "\uff81\003\uff81\126\uff81\157\uff81\160\uff81\207\uff81\001\002" +
    "\000\054\002\uff80\003\uff80\126\uff80\157\uff80\160\uff80\162" +
    "\154\163\161\164\151\165\157\166\152\167\153\170\160" +
    "\172\145\173\156\174\146\175\162\176\163\177\155\200" +
    "\150\201\144\207\uff80\001\002\000\004\156\u01d6\001\002" +
    "\000\004\162\u01d3\001\002\000\004\162\u01d0\001\002\000" +
    "\022\132\141\155\130\162\134\163\136\171\142\202\132" +
    "\203\137\206\140\001\002\000\042\156\u01d2\162\154\163" +
    "\161\164\151\165\157\166\152\167\153\170\160\172\145" +
    "\173\156\174\146\175\162\176\163\177\155\200\150\201" +
    "\144\001\002\000\016\002\uff83\003\uff83\126\uff83\157\uff83" +
    "\160\uff83\207\uff83\001\002\000\022\132\141\155\130\162" +
    "\134\163\136\171\142\202\132\203\137\206\140\001\002" +
    "\000\042\156\u01d5\162\154\163\161\164\151\165\157\166" +
    "\152\167\153\170\160\172\145\173\156\174\146\175\162" +
    "\176\163\177\155\200\150\201\144\001\002\000\016\002" +
    "\uff82\003\uff82\126\uff82\157\uff82\160\uff82\207\uff82\001\002" +
    "\000\016\002\uff84\003\uff84\126\uff84\157\uff84\160\uff84\207" +
    "\uff84\001\002\000\016\002\uff2d\003\uff2d\126\uff2d\157\uff2d" +
    "\160\uff2d\207\uff2d\001\002\000\016\002\uff2b\003\uff2b\126" +
    "\uff2b\157\uff2b\160\uff2b\207\uff2b\001\002\000\016\002\uff2c" +
    "\003\uff2c\126\uff2c\157\uff2c\160\uff2c\207\uff2c\001\002\000" +
    "\042\157\u01db\162\154\163\161\164\151\165\157\166\152" +
    "\167\153\170\160\172\145\173\156\174\146\175\162\176" +
    "\163\177\155\200\150\201\144\001\002\000\022\134\252" +
    "\135\251\136\250\137\247\140\246\141\245\142\243\155" +
    "\u01dc\001\002\000\010\143\u01e0\144\u01df\150\u01de\001\002" +
    "\000\016\002\uff0a\003\uff0a\126\uff0a\157\uff0a\160\uff0a\207" +
    "\uff0a\001\002\000\004\156\u01e7\001\002\000\004\162\u01e4" +
    "\001\002\000\004\162\u01e1\001\002\000\022\132\141\155" +
    "\130\162\134\163\136\171\142\202\132\203\137\206\140" +
    "\001\002\000\042\156\u01e3\162\154\163\161\164\151\165" +
    "\157\166\152\167\153\170\160\172\145\173\156\174\146" +
    "\175\162\176\163\177\155\200\150\201\144\001\002\000" +
    "\016\002\uff0c\003\uff0c\126\uff0c\157\uff0c\160\uff0c\207\uff0c" +
    "\001\002\000\022\132\141\155\130\162\134\163\136\171" +
    "\142\202\132\203\137\206\140\001\002\000\042\156\u01e6" +
    "\162\154\163\161\164\151\165\157\166\152\167\153\170" +
    "\160\172\145\173\156\174\146\175\162\176\163\177\155" +
    "\200\150\201\144\001\002\000\016\002\uff0b\003\uff0b\126" +
    "\uff0b\157\uff0b\160\uff0b\207\uff0b\001\002\000\016\002\uff0d" +
    "\003\uff0d\126\uff0d\157\uff0d\160\uff0d\207\uff0d\001\002\000" +
    "\010\143\u01ec\144\u01ea\150\u01eb\001\002\000\016\002\uff02" +
    "\003\uff02\126\uff02\157\uff02\160\uff02\207\uff02\001\002\000" +
    "\004\162\u01f1\001\002\000\004\156\u01f0\001\002\000\004" +
    "\162\u01ed\001\002\000\022\132\141\155\130\162\134\163" +
    "\136\171\142\202\132\203\137\206\140\001\002\000\042" +
    "\156\u01ef\162\154\163\161\164\151\165\157\166\152\167" +
    "\153\170\160\172\145\173\156\174\146\175\162\176\163" +
    "\177\155\200\150\201\144\001\002\000\016\002\uff04\003" +
    "\uff04\126\uff04\157\uff04\160\uff04\207\uff04\001\002\000\016" +
    "\002\uff05\003\uff05\126\uff05\157\uff05\160\uff05\207\uff05\001" +
    "\002\000\022\132\141\155\130\162\134\163\136\171\142" +
    "\202\132\203\137\206\140\001\002\000\042\156\u01f3\162" +
    "\154\163\161\164\151\165\157\166\152\167\153\170\160" +
    "\172\145\173\156\174\146\175\162\176\163\177\155\200" +
    "\150\201\144\001\002\000\016\002\uff03\003\uff03\126\uff03" +
    "\157\uff03\160\uff03\207\uff03\001\002\000\010\143\u01f8\144" +
    "\u01f7\150\u01f6\001\002\000\016\002\uff1d\003\uff1d\126\uff1d" +
    "\157\uff1d\160\uff1d\207\uff1d\001\002\000\004\156\u01ff\001" +
    "\002\000\004\162\u01fc\001\002\000\004\162\u01f9\001\002" +
    "\000\022\132\141\155\130\162\134\163\136\171\142\202" +
    "\132\203\137\206\140\001\002\000\042\156\u01fb\162\154" +
    "\163\161\164\151\165\157\166\152\167\153\170\160\172" +
    "\145\173\156\174\146\175\162\176\163\177\155\200\150" +
    "\201\144\001\002\000\016\002\uff1f\003\uff1f\126\uff1f\157" +
    "\uff1f\160\uff1f\207\uff1f\001\002\000\022\132\141\155\130" +
    "\162\134\163\136\171\142\202\132\203\137\206\140\001" +
    "\002\000\042\156\u01fe\162\154\163\161\164\151\165\157" +
    "\166\152\167\153\170\160\172\145\173\156\174\146\175" +
    "\162\176\163\177\155\200\150\201\144\001\002\000\016" +
    "\002\uff1e\003\uff1e\126\uff1e\157\uff1e\160\uff1e\207\uff1e\001" +
    "\002\000\016\002\uff20\003\uff20\126\uff20\157\uff20\160\uff20" +
    "\207\uff20\001\002\000\010\143\u0204\144\u0202\150\u0203\001" +
    "\002\000\016\002\uff06\003\uff06\126\uff06\157\uff06\160\uff06" +
    "\207\uff06\001\002\000\004\162\u0209\001\002\000\004\156" +
    "\u0208\001\002\000\004\162\u0205\001\002\000\022\132\141" +
    "\155\130\162\134\163\136\171\142\202\132\203\137\206" +
    "\140\001\002\000\042\156\u0207\162\154\163\161\164\151" +
    "\165\157\166\152\167\153\170\160\172\145\173\156\174" +
    "\146\175\162\176\163\177\155\200\150\201\144\001\002" +
    "\000\016\002\uff08\003\uff08\126\uff08\157\uff08\160\uff08\207" +
    "\uff08\001\002\000\016\002\uff09\003\uff09\126\uff09\157\uff09" +
    "\160\uff09\207\uff09\001\002\000\022\132\141\155\130\162" +
    "\134\163\136\171\142\202\132\203\137\206\140\001\002" +
    "\000\042\156\u020b\162\154\163\161\164\151\165\157\166" +
    "\152\167\153\170\160\172\145\173\156\174\146\175\162" +
    "\176\163\177\155\200\150\201\144\001\002\000\016\002" +
    "\uff07\003\uff07\126\uff07\157\uff07\160\uff07\207\uff07\001\002" +
    "\000\052\002\uffce\003\uffce\126\uffce\160\uffce\162\154\163" +
    "\161\164\151\165\157\166\152\167\153\170\160\172\145" +
    "\173\156\174\146\175\162\176\163\177\155\200\150\201" +
    "\144\207\uffce\001\002\000\010\143\u0214\144\u0213\150\u0212" +
    "\001\002\000\016\002\uff6a\003\uff6a\126\uff6a\157\uff6a\160" +
    "\uff6a\207\uff6a\001\002\000\016\002\uff67\003\uff67\126\uff67" +
    "\157\uff67\160\uff67\207\uff67\001\002\000\016\002\uff68\003" +
    "\uff68\126\uff68\157\uff68\160\uff68\207\uff68\001\002\000\016" +
    "\002\uff69\003\uff69\126\uff69\157\uff69\160\uff69\207\uff69\001" +
    "\002\000\004\156\u021b\001\002\000\004\162\u0218\001\002" +
    "\000\004\162\u0215\001\002\000\022\132\141\155\130\162" +
    "\134\163\136\171\142\202\132\203\137\206\140\001\002" +
    "\000\042\156\u0217\162\154\163\161\164\151\165\157\166" +
    "\152\167\153\170\160\172\145\173\156\174\146\175\162" +
    "\176\163\177\155\200\150\201\144\001\002\000\016\002" +
    "\uff6c\003\uff6c\126\uff6c\157\uff6c\160\uff6c\207\uff6c\001\002" +
    "\000\022\132\141\155\130\162\134\163\136\171\142\202" +
    "\132\203\137\206\140\001\002\000\042\156\u021a\162\154" +
    "\163\161\164\151\165\157\166\152\167\153\170\160\172" +
    "\145\173\156\174\146\175\162\176\163\177\155\200\150" +
    "\201\144\001\002\000\016\002\uff6b\003\uff6b\126\uff6b\157" +
    "\uff6b\160\uff6b\207\uff6b\001\002\000\016\002\uff6d\003\uff6d" +
    "\126\uff6d\157\uff6d\160\uff6d\207\uff6d\001\002\000\010\143" +
    "\u0220\144\u021e\150\u021f\001\002\000\016\002\ufefa\003\ufefa" +
    "\126\ufefa\157\ufefa\160\ufefa\207\ufefa\001\002\000\004\162" +
    "\u0225\001\002\000\004\156\u0224\001\002\000\004\162\u0221" +
    "\001\002\000\022\132\141\155\130\162\134\163\136\171" +
    "\142\202\132\203\137\206\140\001\002\000\042\156\u0223" +
    "\162\154\163\161\164\151\165\157\166\152\167\153\170" +
    "\160\172\145\173\156\174\146\175\162\176\163\177\155" +
    "\200\150\201\144\001\002\000\016\002\ufefc\003\ufefc\126" +
    "\ufefc\157\ufefc\160\ufefc\207\ufefc\001\002\000\016\002\ufefd" +
    "\003\ufefd\126\ufefd\157\ufefd\160\ufefd\207\ufefd\001\002\000" +
    "\022\132\141\155\130\162\134\163\136\171\142\202\132" +
    "\203\137\206\140\001\002\000\042\156\u0227\162\154\163" +
    "\161\164\151\165\157\166\152\167\153\170\160\172\145" +
    "\173\156\174\146\175\162\176\163\177\155\200\150\201" +
    "\144\001\002\000\016\002\ufefb\003\ufefb\126\ufefb\157\ufefb" +
    "\160\ufefb\207\ufefb\001\002\000\022\132\141\155\130\162" +
    "\134\163\136\171\142\202\132\203\137\206\140\001\002" +
    "\000\016\002\uffc3\003\uffc3\126\uffc3\157\u0239\160\uffc3\207" +
    "\uffc3\001\002\000\054\002\uffc1\003\uffc1\126\uffc1\157\uffc1" +
    "\160\uffc1\162\154\163\161\164\151\165\157\166\152\167" +
    "\153\170\160\172\145\173\156\174\146\175\162\176\163" +
    "\177\155\200\150\201\144\207\uffc1\001\002\000\022\132" +
    "\141\155\130\162\134\163\136\171\142\202\132\203\137" +
    "\206\140\001\002\000\014\002\uffc9\003\uffc9\126\uffc9\160" +
    "\uffc9\207\uffc9\001\002\000\010\160\uffc6\206\u022e\207\uffc6" +
    "\001\002\000\010\157\uffc5\160\uffc5\207\uffc5\001\002\000" +
    "\006\160\ufff9\207\171\001\002\000\010\157\u0231\160\uffc7" +
    "\207\uffc7\001\002\000\004\206\u0232\001\002\000\010\157" +
    "\uffc4\160\uffc4\207\uffc4\001\002\000\004\160\u0234\001\002" +
    "\000\242\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074" +
    "\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb" +
    "\103\ufffb\104\ufffb\105\ufffb\106\ufffb\107\ufffb\120\ufffb\123" +
    "\ufffb\126\ufffb\127\ufffb\130\ufffb\131\ufffb\133\ufffb\160\ufffb" +
    "\205\007\206\ufffb\207\ufffb\001\002\000\010\003\175\126" +
    "\u0236\160\u0237\001\002\000\014\002\uffca\003\uffca\126\uffca" +
    "\160\uffca\207\uffca\001\002\000\244\002\ufffb\003\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb" +
    "\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070" +
    "\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb" +
    "\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105" +
    "\ufffb\106\ufffb\107\ufffb\120\ufffb\123\ufffb\126\ufffb\127\ufffb" +
    "\130\ufffb\131\ufffb\133\ufffb\160\ufffb\205\007\206\ufffb\207" +
    "\ufffb\001\002\000\052\002\uffcd\003\uffcd\126\uffcd\160\uffcd" +
    "\162\154\163\161\164\151\165\157\166\152\167\153\170" +
    "\160\172\145\173\156\174\146\175\162\176\163\177\155" +
    "\200\150\201\144\207\uffcd\001\002\000\022\132\141\155" +
    "\130\162\134\163\136\171\142\202\132\203\137\206\140" +
    "\001\002\000\054\002\uffc0\003\uffc0\126\uffc0\157\uffc0\160" +
    "\uffc0\162\154\163\161\164\151\165\157\166\152\167\153" +
    "\170\160\172\145\173\156\174\146\175\162\176\163\177" +
    "\155\200\150\201\144\207\uffc0\001\002\000\052\002\uffcc" +
    "\003\uffcc\126\uffcc\160\uffcc\162\154\163\161\164\151\165" +
    "\157\166\152\167\153\170\160\172\145\173\156\174\146" +
    "\175\162\176\163\177\155\200\150\201\144\207\uffcc\001" +
    "\002\000\010\143\u0240\144\u023e\150\u023f\001\002\000\016" +
    "\002\ufefe\003\ufefe\126\ufefe\157\ufefe\160\ufefe\207\ufefe\001" +
    "\002\000\004\162\u0245\001\002\000\004\156\u0244\001\002" +
    "\000\004\162\u0241\001\002\000\022\132\141\155\130\162" +
    "\134\163\136\171\142\202\132\203\137\206\140\001\002" +
    "\000\042\156\u0243\162\154\163\161\164\151\165\157\166" +
    "\152\167\153\170\160\172\145\173\156\174\146\175\162" +
    "\176\163\177\155\200\150\201\144\001\002\000\016\002" +
    "\uff00\003\uff00\126\uff00\157\uff00\160\uff00\207\uff00\001\002" +
    "\000\016\002\uff01\003\uff01\126\uff01\157\uff01\160\uff01\207" +
    "\uff01\001\002\000\022\132\141\155\130\162\134\163\136" +
    "\171\142\202\132\203\137\206\140\001\002\000\042\156" +
    "\u0247\162\154\163\161\164\151\165\157\166\152\167\153" +
    "\170\160\172\145\173\156\174\146\175\162\176\163\177" +
    "\155\200\150\201\144\001\002\000\016\002\ufeff\003\ufeff" +
    "\126\ufeff\157\ufeff\160\ufeff\207\ufeff\001\002\000\042\157" +
    "\u0249\162\154\163\161\164\151\165\157\166\152\167\153" +
    "\170\160\172\145\173\156\174\146\175\162\176\163\177" +
    "\155\200\150\201\144\001\002\000\022\134\252\135\251" +
    "\136\250\137\247\140\246\141\245\142\243\155\u024a\001" +
    "\002\000\010\143\u024e\144\u024c\150\u024d\001\002\000\016" +
    "\002\uff87\003\uff87\126\uff87\157\uff87\160\uff87\207\uff87\001" +
    "\002\000\004\162\u0253\001\002\000\004\156\u0252\001\002" +
    "\000\004\162\u024f\001\002\000\022\132\141\155\130\162" +
    "\134\163\136\171\142\202\132\203\137\206\140\001\002" +
    "\000\042\156\u0251\162\154\163\161\164\151\165\157\166" +
    "\152\167\153\170\160\172\145\173\156\174\146\175\162" +
    "\176\163\177\155\200\150\201\144\001\002\000\016\002" +
    "\uff89\003\uff89\126\uff89\157\uff89\160\uff89\207\uff89\001\002" +
    "\000\016\002\uff8a\003\uff8a\126\uff8a\157\uff8a\160\uff8a\207" +
    "\uff8a\001\002\000\022\132\141\155\130\162\134\163\136" +
    "\171\142\202\132\203\137\206\140\001\002\000\042\156" +
    "\u0255\162\154\163\161\164\151\165\157\166\152\167\153" +
    "\170\160\172\145\173\156\174\146\175\162\176\163\177" +
    "\155\200\150\201\144\001\002\000\016\002\uff88\003\uff88" +
    "\126\uff88\157\uff88\160\uff88\207\uff88\001\002\000\004\157" +
    "\u025f\001\002\000\030\132\141\143\u025b\144\u025a\150\u0259" +
    "\155\130\162\134\163\136\171\142\202\132\203\137\206" +
    "\140\001\002\000\054\002\uff66\003\uff66\126\uff66\157\uff66" +
    "\160\uff66\162\154\163\161\164\151\165\157\166\152\167" +
    "\153\170\160\172\145\173\156\174\146\175\162\176\163" +
    "\177\155\200\150\201\144\207\uff66\001\002\000\004\156" +
    "\u025e\001\002\000\004\156\u025d\001\002\000\004\156\u025c" +
    "\001\002\000\016\002\uff64\003\uff64\126\uff64\157\uff64\160" +
    "\uff64\207\uff64\001\002\000\016\002\uff63\003\uff63\126\uff63" +
    "\157\uff63\160\uff63\207\uff63\001\002\000\016\002\uff65\003" +
    "\uff65\126\uff65\157\uff65\160\uff65\207\uff65\001\002\000\022" +
    "\132\141\155\130\162\134\163\136\171\142\202\132\203" +
    "\137\206\140\001\002\000\054\002\uff62\003\uff62\126\uff62" +
    "\157\uff62\160\uff62\162\154\163\161\164\151\165\157\166" +
    "\152\167\153\170\160\172\145\173\156\174\146\175\162" +
    "\176\163\177\155\200\150\201\144\207\uff62\001\002\000" +
    "\004\157\ufeca\001\002\000\004\157\ufecc\001\002\000\004" +
    "\157\u0267\001\002\000\054\002\uff61\003\uff61\126\uff61\157" +
    "\uff61\160\uff61\162\154\163\161\164\151\165\157\166\152" +
    "\167\153\170\160\172\145\173\156\174\146\175\162\176" +
    "\163\177\155\200\150\201\144\207\uff61\001\002\000\004" +
    "\157\ufecd\001\002\000\004\157\ufecb\001\002\000\022\132" +
    "\141\155\130\162\134\163\136\171\142\202\132\203\137" +
    "\206\140\001\002\000\054\002\uff60\003\uff60\126\uff60\157" +
    "\uff60\160\uff60\162\154\163\161\164\151\165\157\166\152" +
    "\167\153\170\160\172\145\173\156\174\146\175\162\176" +
    "\163\177\155\200\150\201\144\207\uff60\001\002\000\014" +
    "\002\uffc8\003\uffc8\126\uffc8\160\uffc8\207\uffc8\001\002\000" +
    "\012\002\ufffd\003\ufffd\126\ufffd\160\ufffd\001\002\000\004" +
    "\157\u026f\001\002\000\004\157\u026d\001\002\000\012\145" +
    "\366\146\223\147\240\150\217\001\002\000\016\002\uff98" +
    "\003\uff98\126\uff98\157\uff98\160\uff98\207\uff98\001\002\000" +
    "\040\132\141\134\252\135\251\136\250\137\247\140\246" +
    "\141\245\142\243\155\u0270\162\134\163\136\171\142\202" +
    "\132\203\137\206\140\001\002\000\030\132\141\143\u0275" +
    "\144\u0274\150\u0273\155\130\162\134\163\136\171\142\202" +
    "\132\203\137\206\140\001\002\000\016\002\uff9a\003\uff9a" +
    "\126\uff9a\157\uff9a\160\uff9a\207\uff9a\001\002\000\054\002" +
    "\uff99\003\uff99\126\uff99\157\uff99\160\uff99\162\154\163\161" +
    "\164\151\165\157\166\152\167\153\170\160\172\145\173" +
    "\156\174\146\175\162\176\163\177\155\200\150\201\144" +
    "\207\uff99\001\002\000\004\156\u027c\001\002\000\004\162" +
    "\u0279\001\002\000\004\162\u0276\001\002\000\022\132\141" +
    "\155\130\162\134\163\136\171\142\202\132\203\137\206" +
    "\140\001\002\000\042\156\u0278\162\154\163\161\164\151" +
    "\165\157\166\152\167\153\170\160\172\145\173\156\174" +
    "\146\175\162\176\163\177\155\200\150\201\144\001\002" +
    "\000\016\002\uff9c\003\uff9c\126\uff9c\157\uff9c\160\uff9c\207" +
    "\uff9c\001\002\000\022\132\141\155\130\162\134\163\136" +
    "\171\142\202\132\203\137\206\140\001\002\000\042\156" +
    "\u027b\162\154\163\161\164\151\165\157\166\152\167\153" +
    "\170\160\172\145\173\156\174\146\175\162\176\163\177" +
    "\155\200\150\201\144\001\002\000\016\002\uff9b\003\uff9b" +
    "\126\uff9b\157\uff9b\160\uff9b\207\uff9b\001\002\000\016\002" +
    "\uff9d\003\uff9d\126\uff9d\157\uff9d\160\uff9d\207\uff9d\001\002" +
    "\000\004\157\u028f\001\002\000\004\157\u0289\001\002\000" +
    "\004\157\u0287\001\002\000\004\157\u0281\001\002\000\012" +
    "\143\u0286\145\u0282\146\u0283\147\u0284\001\002\000\016\002" +
    "\ufedb\003\ufedb\126\ufedb\157\ufedb\160\ufedb\207\ufedb\001\002" +
    "\000\016\002\ufedd\003\ufedd\126\ufedd\157\ufedd\160\ufedd\207" +
    "\ufedd\001\002\000\016\002\ufedc\003\ufedc\126\ufedc\157\ufedc" +
    "\160\ufedc\207\ufedc\001\002\000\016\002\uff91\003\uff91\126" +
    "\uff91\157\uff91\160\uff91\207\uff91\001\002\000\016\002\ufeda" +
    "\003\ufeda\126\ufeda\157\ufeda\160\ufeda\207\ufeda\001\002\000" +
    "\012\145\366\146\223\147\240\150\217\001\002\000\016" +
    "\002\uff92\003\uff92\126\uff92\157\uff92\160\uff92\207\uff92\001" +
    "\002\000\012\144\u028e\145\u028a\146\u028b\147\u028c\001\002" +
    "\000\016\002\ufed7\003\ufed7\126\ufed7\157\ufed7\160\ufed7\207" +
    "\ufed7\001\002\000\016\002\ufed9\003\ufed9\126\ufed9\157\ufed9" +
    "\160\ufed9\207\ufed9\001\002\000\016\002\ufed8\003\ufed8\126" +
    "\ufed8\157\ufed8\160\ufed8\207\ufed8\001\002\000\016\002\uff90" +
    "\003\uff90\126\uff90\157\uff90\160\uff90\207\uff90\001\002\000" +
    "\016\002\ufed6\003\ufed6\126\ufed6\157\ufed6\160\ufed6\207\ufed6" +
    "\001\002\000\040\132\141\134\252\135\251\136\250\137" +
    "\247\140\246\141\245\142\243\155\u0290\162\134\163\136" +
    "\171\142\202\132\203\137\206\140\001\002\000\030\132" +
    "\141\143\u0295\144\u0294\150\u0293\155\130\162\134\163\136" +
    "\171\142\202\132\203\137\206\140\001\002\000\016\002" +
    "\uff94\003\uff94\126\uff94\157\uff94\160\uff94\207\uff94\001\002" +
    "\000\054\002\uff93\003\uff93\126\uff93\157\uff93\160\uff93\162" +
    "\154\163\161\164\151\165\157\166\152\167\153\170\160" +
    "\172\145\173\156\174\146\175\162\176\163\177\155\200" +
    "\150\201\144\207\uff93\001\002\000\004\156\u029c\001\002" +
    "\000\004\162\u0299\001\002\000\004\162\u0296\001\002\000" +
    "\022\132\141\155\130\162\134\163\136\171\142\202\132" +
    "\203\137\206\140\001\002\000\042\156\u0298\162\154\163" +
    "\161\164\151\165\157\166\152\167\153\170\160\172\145" +
    "\173\156\174\146\175\162\176\163\177\155\200\150\201" +
    "\144\001\002\000\016\002\uff96\003\uff96\126\uff96\157\uff96" +
    "\160\uff96\207\uff96\001\002\000\022\132\141\155\130\162" +
    "\134\163\136\171\142\202\132\203\137\206\140\001\002" +
    "\000\042\156\u029b\162\154\163\161\164\151\165\157\166" +
    "\152\167\153\170\160\172\145\173\156\174\146\175\162" +
    "\176\163\177\155\200\150\201\144\001\002\000\016\002" +
    "\uff95\003\uff95\126\uff95\157\uff95\160\uff95\207\uff95\001\002" +
    "\000\016\002\uff97\003\uff97\126\uff97\157\uff97\160\uff97\207" +
    "\uff97\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u029b\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\016\006\067" +
    "\011\015\012\120\016\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u0269\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\u0263\020\130\022\134\035\u0262\001" +
    "\001\000\012\017\u0257\020\130\022\134\034\u0255\001\001" +
    "\000\002\001\001\000\010\017\u0247\020\130\022\134\001" +
    "\001\000\002\001\001\000\004\027\u023c\001\001\000\002" +
    "\001\001\000\014\017\u0229\020\130\022\134\024\u022b\025" +
    "\u0228\001\001\000\004\027\u021c\001\001\000\002\001\001" +
    "\000\010\027\u020d\031\u0210\037\371\001\001\000\010\017" +
    "\u020b\020\130\022\134\001\001\000\004\027\u0200\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\u01f4\001" +
    "\001\000\004\027\u01e8\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\u01d9\020\130\022\134\001\001\000" +
    "\004\036\u01d6\001\001\000\002\001\001\000\012\017\u01cb" +
    "\020\130\022\134\027\u01ca\001\001\000\004\027\u01be\001" +
    "\001\000\002\001\001\000\004\034\u01bc\001\001\000\010" +
    "\017\u01ae\020\130\022\134\001\001\000\004\030\u01a3\001" +
    "\001\000\010\017\u01a1\020\130\022\134\001\001\000\012" +
    "\017\u0196\020\130\022\134\027\u0195\001\001\000\012\017" +
    "\u0189\020\130\022\134\027\u0188\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\u017c\020" +
    "\130\022\134\027\u017b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\u0177\020\130\022\134\034\u0170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\u0169\014\u016b\017\u016a\020\130\022\134\001\001\000" +
    "\010\017\u0168\020\130\022\134\001\001\000\004\036\u0161" +
    "\001\001\000\002\001\001\000\012\017\u0156\020\130\022" +
    "\134\027\u0155\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\u0140\031\u013f\037\371\001\001\000\004\027" +
    "\u0130\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\u0119\011\u0116\013\u0118\017\u011a\020\130\022\134\001" +
    "\001\000\004\027\u010b\001\001\000\002\001\001\000\006" +
    "\030\236\037\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\167\020\130\022\134" +
    "\001\001\000\010\017\166\020\130\022\134\001\001\000" +
    "\002\001\001\000\010\017\132\020\130\022\134\001\001" +
    "\000\002\001\001\000\010\017\164\020\130\022\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\146" +
    "\001\001\000\002\001\001\000\010\017\142\020\130\022" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\163\020\130\022\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\146\001" +
    "\001\000\004\021\146\001\001\000\002\001\001\000\004" +
    "\021\146\001\001\000\006\015\171\021\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\173\003\004" +
    "\004\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\176\004\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\336\020\130\022\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\252\020\130\022" +
    "\134\027\243\001\001\000\010\017\164\020\130\022\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\257\020\130\022\134\001\001\000\004\021" +
    "\146\001\001\000\002\001\001\000\010\017\262\020\130" +
    "\022\134\001\001\000\004\021\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\266\020\130\022\134" +
    "\001\001\000\004\021\146\001\001\000\002\001\001\000" +
    "\010\017\273\020\130\022\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\146\001\001\000\002\001" +
    "\001\000\012\017\302\020\130\022\134\027\300\001\001" +
    "\000\002\001\001\000\010\017\305\020\130\022\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\312\020\130\022\134\001\001\000" +
    "\004\021\146\001\001\000\002\001\001\000\010\017\315" +
    "\020\130\022\134\001\001\000\004\021\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\326\020\130\022\134\001\001\000\004" +
    "\021\146\001\001\000\010\017\330\020\130\022\134\001" +
    "\001\000\004\021\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\343\020\130\022" +
    "\134\001\001\000\004\021\146\001\001\000\002\001\001" +
    "\000\012\017\347\020\130\022\134\027\346\001\001\000" +
    "\002\001\001\000\004\021\146\001\001\000\010\017\351" +
    "\020\130\022\134\001\001\000\004\021\146\001\001\000" +
    "\002\001\001\000\012\017\355\020\130\022\134\027\354" +
    "\001\001\000\002\001\001\000\004\021\146\001\001\000" +
    "\002\001\001\000\012\017\361\020\130\022\134\027\360" +
    "\001\001\000\002\001\001\000\004\021\146\001\001\000" +
    "\002\001\001\000\006\031\370\037\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\u0101\020\130" +
    "\022\134\001\001\000\004\021\146\001\001\000\010\017" +
    "\u0103\020\130\022\134\001\001\000\004\021\146\001\001" +
    "\000\002\001\001\000\010\017\u0106\020\130\022\134\001" +
    "\001\000\004\021\146\001\001\000\010\017\u0108\020\130" +
    "\022\134\001\001\000\004\021\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\u0110\020" +
    "\130\022\134\001\001\000\004\021\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\u0114\020\130\022" +
    "\134\001\001\000\004\021\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\146\001\001\000\014\011\u0116" +
    "\013\u011c\017\u011a\020\130\022\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\u0120" +
    "\037\371\001\001\000\002\001\001\000\012\017\u0124\020" +
    "\130\022\134\027\u0123\001\001\000\010\017\164\020\130" +
    "\022\134\001\001\000\002\001\001\000\004\021\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\u0129\020\130\022\134\001\001\000\004\021" +
    "\146\001\001\000\002\001\001\000\010\017\u012c\020\130" +
    "\022\134\001\001\000\004\021\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\u0135\020\130\022\134\001\001\000\004\021\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\u0139\020\130\022\134\001\001\000\004\021\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\u0145\020\130\022\134\001\001\000\004" +
    "\021\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\u0149\020\130\022\134\001\001\000\004\021\146" +
    "\001\001\000\002\001\001\000\010\017\u014d\020\130\022" +
    "\134\001\001\000\002\001\001\000\004\021\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u0153\001\001\000\002\001\001" +
    "\000\010\017\164\020\130\022\134\001\001\000\002\001" +
    "\001\000\004\021\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\u015b\020\130\022" +
    "\134\001\001\000\004\021\146\001\001\000\002\001\001" +
    "\000\010\017\u015e\020\130\022\134\001\001\000\004\021" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\146\001\001\000\002\001\001\000\004\021" +
    "\146\001\001\000\002\001\001\000\012\014\u016d\017\u016a" +
    "\020\130\022\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\146\001\001" +
    "\000\010\017\u0179\020\130\022\134\001\001\000\004\021" +
    "\146\001\001\000\010\017\164\020\130\022\134\001\001" +
    "\000\002\001\001\000\004\021\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\u0181" +
    "\020\130\022\134\001\001\000\004\021\146\001\001\000" +
    "\002\001\001\000\010\017\u0184\020\130\022\134\001\001" +
    "\000\004\021\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\164\020\130\022\134\001\001\000\002" +
    "\001\001\000\004\021\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\u018e\020\130" +
    "\022\134\001\001\000\004\021\146\001\001\000\002\001" +
    "\001\000\010\017\u0191\020\130\022\134\001\001\000\004" +
    "\021\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\164\020\130\022\134\001\001\000\002\001\001" +
    "\000\004\021\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\u019b\020\130\022\134" +
    "\001\001\000\004\021\146\001\001\000\002\001\001\000" +
    "\010\017\u019e\020\130\022\134\001\001\000\004\021\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\u01ab\020\130\022\134" +
    "\001\001\000\002\001\001\000\004\021\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\146\001\001" +
    "\000\004\027\u01b1\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\u01b6\020\130\022\134\001\001\000\004\021" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\u01ba\020\130\022\134\001\001\000\004\021\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\u01c3\020\130\022\134\001\001" +
    "\000\004\021\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\u01c7\020\130\022\134\001\001\000\004" +
    "\021\146\001\001\000\002\001\001\000\010\017\164\020" +
    "\130\022\134\001\001\000\002\001\001\000\004\021\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\u01d0\020\130\022\134\001\001\000\004" +
    "\021\146\001\001\000\002\001\001\000\010\017\u01d3\020" +
    "\130\022\134\001\001\000\004\021\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\146\001\001\000\004" +
    "\027\u01dc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\u01e1\020\130\022\134\001\001\000\004\021\146\001" +
    "\001\000\002\001\001\000\010\017\u01e4\020\130\022\134" +
    "\001\001\000\004\021\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\u01ed\020\130\022\134\001\001\000\004\021\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\u01f1\020" +
    "\130\022\134\001\001\000\004\021\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\u01f9" +
    "\020\130\022\134\001\001\000\004\021\146\001\001\000" +
    "\002\001\001\000\010\017\u01fc\020\130\022\134\001\001" +
    "\000\004\021\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\u0205\020" +
    "\130\022\134\001\001\000\004\021\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\u0209\020\130\022" +
    "\134\001\001\000\004\021\146\001\001\000\002\001\001" +
    "\000\004\021\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\u0215\020\130\022\134\001\001\000\004\021\146" +
    "\001\001\000\002\001\001\000\010\017\u0218\020\130\022" +
    "\134\001\001\000\004\021\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\u0221\020\130\022\134\001\001\000\004\021\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\u0225" +
    "\020\130\022\134\001\001\000\004\021\146\001\001\000" +
    "\002\001\001\000\010\017\u023a\020\130\022\134\001\001" +
    "\000\002\001\001\000\004\021\146\001\001\000\010\017" +
    "\u0237\020\130\022\134\001\001\000\002\001\001\000\006" +
    "\023\u022e\026\u022f\001\001\000\002\001\001\000\004\015" +
    "\u0232\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\u0234\003\004\004" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\176\004\005\001\001\000\004\021\146\001\001\000" +
    "\010\017\u0239\020\130\022\134\001\001\000\004\021\146" +
    "\001\001\000\004\021\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\u0241\020\130\022\134\001\001\000" +
    "\004\021\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\u0245\020\130\022\134\001\001\000\004\021" +
    "\146\001\001\000\002\001\001\000\004\021\146\001\001" +
    "\000\004\027\u024a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\u024f\020\130\022\134\001\001\000\004\021" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\u0253\020\130\022\134\001\001\000\004\021\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\164" +
    "\020\130\022\134\001\001\000\004\021\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\u025f\020\130\022\134\001\001\000\004\021\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\u0267\020\130\022\134\001\001\000\004\021" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\u026d\037\371\001" +
    "\001\000\002\001\001\000\012\017\u0271\020\130\022\134" +
    "\027\u0270\001\001\000\010\017\164\020\130\022\134\001" +
    "\001\000\002\001\001\000\004\021\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\u0276\020\130\022\134\001\001\000\004\021\146\001\001" +
    "\000\002\001\001\000\010\017\u0279\020\130\022\134\001" +
    "\001\000\004\021\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u0284\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\u0287\037\371\001\001" +
    "\000\002\001\001\000\004\032\u028c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\u0291\020\130\022\134\027" +
    "\u0290\001\001\000\010\017\164\020\130\022\134\001\001" +
    "\000\002\001\001\000\004\021\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\u0296" +
    "\020\130\022\134\001\001\000\004\021\146\001\001\000" +
    "\002\001\001\000\010\017\u0299\020\130\022\134\001\001" +
    "\000\004\021\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserZ80$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserZ80$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserZ80$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 errorCount = 0; lastLine = 0; lastColumn = 0; 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    IToken t = (IToken)this.getScanner().next_token();
    this.lastLine = t.getLine()+1;
    this.lastColumn = t.getColumn()+1;
    return (Symbol)t;
 
    }


    private IMessageReporter reporter = null;
    public int lastLine;
    public int lastColumn;
    public static int errorCount = 0;
    
    public parserZ80(java_cup.runtime.Scanner s, IMessageReporter reporter) {
        this(s);
        this.reporter = reporter;
    }
    	
    public void syntax_error(Symbol current) {
        report_error("Syntax error: ",current);
    }

    public void unrecovered_syntax_error(Symbol current) {
        report_error("Fatal syntax error: ", current);
        done_parsing();
    }

    public void report_error(String message, Symbol current) {
        String mes;
        String location="";
        if (current instanceof IToken) {
            IToken t = (IToken)current;
            location = (t.getLine()+1)+","+t.getColumn();
            mes = message + t.getErrorString() + " ('"+t.getText()+"')";
        } else mes = message + "symbol " + current.sym;
        if (reporter != null) {
            if (!location.equals("")) reporter.report(location,mes);
            else reporter.report(mes);
        } else System.err.println(mes);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserZ80$actions {
  private final parserZ80 parser;

  /** Constructor */
  CUP$parserZ80$actions(parserZ80 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserZ80$do_action(
    int                        CUP$parserZ80$act_num,
    java_cup.runtime.lr_parser CUP$parserZ80$parser,
    java.util.Stack            CUP$parserZ80$stack,
    int                        CUP$parserZ80$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserZ80$result;

      /* select the action based on the action number */
      switch (CUP$parserZ80$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // RegQQ ::= REGISTERS_HL 
            {
              Integer RESULT =null;
		 RESULT = 0x20; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegQQ",28, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // RegQQ ::= REGISTERS_DE 
            {
              Integer RESULT =null;
		 RESULT = 0x10; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegQQ",28, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // RegQQ ::= REGISTERS_BC 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegQQ",28, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // RegQQ ::= REGISTERS_AF 
            {
              Integer RESULT =null;
		 RESULT = 0x30; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegQQ",28, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // CondCond ::= RESERVED_NZ 
            {
              Integer RESULT =null;
		 RESULT = 0x0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCond",27, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // CondCond ::= RESERVED_Z 
            {
              Integer RESULT =null;
		 RESULT = 0x8; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCond",27, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // CondCond ::= RESERVED_NC 
            {
              Integer RESULT =null;
		 RESULT = 0x10; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCond",27, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // CondCond ::= RESERVED_C 
            {
              Integer RESULT =null;
		 RESULT = 0x18; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCond",27, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // CondCC ::= RESERVED_PO 
            {
              Integer RESULT =null;
		 RESULT = 0x20; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",26, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // CondCC ::= RESERVED_PE 
            {
              Integer RESULT =null;
		 RESULT = 0x28; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",26, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // CondCC ::= RESERVED_P 
            {
              Integer RESULT =null;
		 RESULT = 0x30; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",26, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // CondCC ::= RESERVED_M 
            {
              Integer RESULT =null;
		 RESULT = 0x38; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",26, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // CondCC ::= RESERVED_NZ 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",26, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // CondCC ::= RESERVED_Z 
            {
              Integer RESULT =null;
		 RESULT = 0x8; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",26, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // CondCC ::= RESERVED_NC 
            {
              Integer RESULT =null;
		 RESULT = 0x10; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",26, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // CondCC ::= RESERVED_C 
            {
              Integer RESULT =null;
		 RESULT = 0x18; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("CondCC",26, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // RegRY ::= REGISTERS_IY 
            {
              Integer RESULT =null;
		 RESULT = 0x20; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRY",24, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // RegRY ::= REGISTERS_SP 
            {
              Integer RESULT =null;
		 RESULT = 0x30; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRY",24, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // RegRY ::= REGISTERS_DE 
            {
              Integer RESULT =null;
		 RESULT = 0x10; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRY",24, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // RegRY ::= REGISTERS_BC 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRY",24, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // RegRX ::= REGISTERS_IX 
            {
              Integer RESULT =null;
		 RESULT = 0x20; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRX",25, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // RegRX ::= REGISTERS_SP 
            {
              Integer RESULT =null;
		 RESULT = 0x30; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRX",25, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // RegRX ::= REGISTERS_DE 
            {
              Integer RESULT =null;
		 RESULT = 0x10; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRX",25, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // RegRX ::= REGISTERS_BC 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRX",25, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // RegRR_WSP ::= REGISTERS_HL 
            {
              Integer RESULT =null;
		 RESULT = 0x20; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRR_WSP",29, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // RegRR_WSP ::= REGISTERS_DE 
            {
              Integer RESULT =null;
		 RESULT = 0x10; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRR_WSP",29, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // RegRR_WSP ::= REGISTERS_BC 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRR_WSP",29, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // RegRR ::= RegRR_WSP 
            {
              Integer RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = r; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRR",23, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // RegRR ::= REGISTERS_SP 
            {
              Integer RESULT =null;
		 RESULT = 0x30; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegRR",23, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // RegWA ::= REGISTERS_L 
            {
              Integer RESULT =null;
		 RESULT = 5; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegWA",22, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // RegWA ::= REGISTERS_H 
            {
              Integer RESULT =null;
		 RESULT = 4; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegWA",22, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // RegWA ::= REGISTERS_E 
            {
              Integer RESULT =null;
		 RESULT = 3; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegWA",22, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // RegWA ::= REGISTERS_D 
            {
              Integer RESULT =null;
		 RESULT = 2; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegWA",22, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // RegWA ::= REGISTERS_C 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegWA",22, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // RegWA ::= REGISTERS_B 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("RegWA",22, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // Reg ::= REGISTERS_L 
            {
              Integer RESULT =null;
		 RESULT = 5; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // Reg ::= REGISTERS_H 
            {
              Integer RESULT =null;
		 RESULT = 4; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // Reg ::= REGISTERS_E 
            {
              Integer RESULT =null;
		 RESULT = 3; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // Reg ::= REGISTERS_D 
            {
              Integer RESULT =null;
		 RESULT = 2; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // Reg ::= REGISTERS_C 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // Reg ::= REGISTERS_B 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // Reg ::= REGISTERS_A 
            {
              Integer RESULT =null;
		 RESULT = 7; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Reg",21, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // Codedef ::= RESERVED_XOR Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.XOR,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // Codedef ::= RESERVED_XOR Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.XOR,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // Codedef ::= RESERVED_XOR SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.XOR_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Codedef ::= RESERVED_XOR SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.XOR_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Codedef ::= RESERVED_XOR SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.XOR_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Codedef ::= RESERVED_SUB Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.SUB,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Codedef ::= RESERVED_SUB Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SUB,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Codedef ::= RESERVED_SUB SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SUB_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Codedef ::= RESERVED_SUB SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SUB_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Codedef ::= RESERVED_SUB SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SUB_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Codedef ::= RESERVED_SRL Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SRL,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Codedef ::= RESERVED_SRL SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SRL_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Codedef ::= RESERVED_SRL SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SRL_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Codedef ::= RESERVED_SRL SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SRL_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Codedef ::= RESERVED_SLL Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SLL,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Codedef ::= RESERVED_SLL SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SLL_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // Codedef ::= RESERVED_SLL SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SLL_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // Codedef ::= RESERVED_SLL SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SLL_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // Codedef ::= RESERVED_SRA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SRA,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Codedef ::= RESERVED_SRA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SRA_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Codedef ::= RESERVED_SRA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SRA_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Codedef ::= RESERVED_SRA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SRA_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Codedef ::= RESERVED_SLA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SRL,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // Codedef ::= RESERVED_SLA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SLA_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // Codedef ::= RESERVED_SLA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SLA_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Codedef ::= RESERVED_SLA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SLA_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Codedef ::= RESERVED_SET Expression SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_RegExpr(OC_RegExpr.SET,e,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Codedef ::= RESERVED_SET Expression SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_ExprExpr(OC_ExprExpr.SET_IIY_NN,e1,e2,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Codedef ::= RESERVED_SET Expression SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_ExprExpr(OC_ExprExpr.SET_IIX_NN,e1,e2,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Codedef ::= RESERVED_SET Expression SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).value;
		 RESULT = new OC_Expr(OC_Expr.SET,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Codedef ::= RESERVED_SBC REGISTERS_HL SEPARATOR_COMMA RegRR 
            {
              Instruction RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer rr = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SBC_HL,rr,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Codedef ::= RESERVED_SBC REGISTERS_A SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.SBC,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Codedef ::= RESERVED_SBC REGISTERS_A SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.SBC,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Codedef ::= RESERVED_SBC REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SBC_A_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Codedef ::= RESERVED_SBC REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.SBC_A_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Codedef ::= RESERVED_SBC REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SBC_A_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Codedef ::= RESERVED_RST Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.RST,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Codedef ::= RESERVED_RRC Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.RRC,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Codedef ::= RESERVED_RRC SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RRC_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // Codedef ::= RESERVED_RRC SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RRC_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // Codedef ::= RESERVED_RRC SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RRC_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // Codedef ::= RESERVED_RR Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.RR,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // Codedef ::= RESERVED_RR SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RR_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // Codedef ::= RESERVED_RR SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RR_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Codedef ::= RESERVED_RR SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RR_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Codedef ::= RESERVED_RLC Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.RLC,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Codedef ::= RESERVED_RLC SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RLC_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Codedef ::= RESERVED_RLC SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RLC_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Codedef ::= RESERVED_RLC SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RLC_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Codedef ::= RESERVED_RL Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.RL,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Codedef ::= RESERVED_RL SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RL_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Codedef ::= RESERVED_RL SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.RL_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Codedef ::= RESERVED_RL SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RL_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Codedef ::= RESERVED_RET CondCC 
            {
              Instruction RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer cc = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.RET,cc,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Codedef ::= RESERVED_RET 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RET,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Codedef ::= RESERVED_RES Expression SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_RegExpr(OC_RegExpr.RES,e,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // Codedef ::= RESERVED_RES Expression SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_ExprExpr(OC_ExprExpr.RES_IIY_NN,e1,e2,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Codedef ::= RESERVED_RES Expression SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_ExprExpr(OC_ExprExpr.RES_IIX_NN,e1,e2,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Codedef ::= RESERVED_RES Expression SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).value;
		 RESULT = new OC_Expr(OC_Expr.RES,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Codedef ::= RESERVED_PUSH REGISTERS_IY 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.PUSH_IY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Codedef ::= RESERVED_PUSH REGISTERS_IX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.PUSH_IX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Codedef ::= RESERVED_PUSH RegQQ 
            {
              Instruction RESULT =null;
		int qqleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int qqright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer qq = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.PUSH,qq,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Codedef ::= RESERVED_POP REGISTERS_IY 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.POP_IY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Codedef ::= RESERVED_POP REGISTERS_IX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.POP_IX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Codedef ::= RESERVED_POP RegQQ 
            {
              Instruction RESULT =null;
		int qqleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int qqright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer qq = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.POP,qq,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Codedef ::= RESERVED_OUT SEPARATOR_LPAR REGISTERS_C SEPARATOR_RPAR SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_NoParams.OUT_B; break;
                    case 1: opcode = OC_NoParams.OUT_C; break;
                    case 2: opcode = OC_NoParams.OUT_D; break;
                    case 3: opcode = OC_NoParams.OUT_E; break;
                    case 4: opcode = OC_NoParams.OUT_H; break;
                    case 5: opcode = OC_NoParams.OUT_L; break;
                    case 7: opcode = OC_NoParams.OUT_A; break;
                }
                RESULT = new OC_NoParams(opcode,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Codedef ::= RESERVED_OUT SEPARATOR_LPAR Expression SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_A 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		 RESULT = new OC_Expr(OC_Expr.OUT,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Codedef ::= RESERVED_OR Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.OR,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Codedef ::= RESERVED_OR Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.OR,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Codedef ::= RESERVED_OR SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.OR_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Codedef ::= RESERVED_OR SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.OR_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Codedef ::= RESERVED_OR SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.OR_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Codedef ::= RESERVED_LD REGISTERS_SP SEPARATOR_COMMA REGISTERS_IY 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_SP_IY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Codedef ::= RESERVED_LD REGISTERS_SP SEPARATOR_COMMA REGISTERS_IX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_SP_IX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Codedef ::= RESERVED_LD REGISTERS_SP SEPARATOR_COMMA REGISTERS_HL 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_SP_HL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.LD_A,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Codedef ::= RESERVED_LD RegWA SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_Expr.LD_B; break;
                    case 1: opcode = OC_Expr.LD_C; break;
                    case 2: opcode = OC_Expr.LD_D; break;
                    case 3: opcode = OC_Expr.LD_E; break;
                    case 4: opcode = OC_Expr.LD_H; break;
                    case 5: opcode = OC_Expr.LD_L; break;
                }
                RESULT = new OC_Expr(opcode,e,true,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Codedef ::= RESERVED_LD RegWA SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Integer r1 = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                int opcode = 0;
                switch(r1) {
                    case 0: opcode = OC_Reg.LD_B; break;
                    case 1: opcode = OC_Reg.LD_C; break;
                    case 2: opcode = OC_Reg.LD_D; break;
                    case 3: opcode = OC_Reg.LD_E; break;
                    case 4: opcode = OC_Reg.LD_H; break;
                    case 5: opcode = OC_Reg.LD_L; break;
                }
                RESULT = new OC_Reg(opcode,r,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.LD_A,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA SEPARATOR_INDEXLPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_A_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA SEPARATOR_INDEXLPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_A_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Codedef ::= RESERVED_LD RegWA SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_Expr.LD_B_IIY_NN; break;
                    case 1: opcode = OC_Expr.LD_C_IIY_NN; break;
                    case 2: opcode = OC_Expr.LD_D_IIY_NN; break;
                    case 3: opcode = OC_Expr.LD_E_IIY_NN; break;
                    case 4: opcode = OC_Expr.LD_H_IIY_NN; break;
                    case 5: opcode = OC_Expr.LD_L_IIY_NN; break;
                }
                RESULT = new OC_Expr(opcode,e,true,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Codedef ::= RESERVED_LD RegWA SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_Expr.LD_B_IIX_NN; break;
                    case 1: opcode = OC_Expr.LD_C_IIX_NN; break;
                    case 2: opcode = OC_Expr.LD_D_IIX_NN; break;
                    case 3: opcode = OC_Expr.LD_E_IIX_NN; break;
                    case 4: opcode = OC_Expr.LD_H_IIX_NN; break;
                    case 5: opcode = OC_Expr.LD_L_IIX_NN; break;
                }
                RESULT = new OC_Expr(opcode,e,true,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA SEPARATOR_INDEXLPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_A_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Codedef ::= RESERVED_LD RegWA SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_NoParams.LD_B_HHLL; break;
                    case 1: opcode = OC_NoParams.LD_C_HHLL; break;
                    case 2: opcode = OC_NoParams.LD_D_HHLL; break;
                    case 3: opcode = OC_NoParams.LD_E_HHLL; break;
                    case 4: opcode = OC_NoParams.LD_H_HHLL; break;
                    case 5: opcode = OC_NoParams.LD_L_HHLL; break;
                }
                RESULT = new OC_NoParams(opcode,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Codedef ::= RESERVED_LD REGISTERS_IY SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.LD_IY,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Codedef ::= RESERVED_LD REGISTERS_IX SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.LD_IX,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Codedef ::= RESERVED_LD REGISTERS_IY SEPARATOR_COMMA SEPARATOR_INDEXLPAR Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_IY_NN,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Codedef ::= RESERVED_LD REGISTERS_IX SEPARATOR_COMMA SEPARATOR_INDEXLPAR Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_IX_NN,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Codedef ::= RESERVED_LD REGISTERS_R SEPARATOR_COMMA REGISTERS_A 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_R,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Codedef ::= RESERVED_LD REGISTERS_I SEPARATOR_COMMA REGISTERS_A 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_I,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Codedef ::= RESERVED_LD REGISTERS_SP SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_RegExpr(OC_RegExpr.LD_RR,0x30,0,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Codedef ::= RESERVED_LD RegRR_WSP SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Integer rr = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_RegExpr(OC_RegExpr.LD_RR,rr,0,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Codedef ::= RESERVED_LD REGISTERS_SP SEPARATOR_COMMA SEPARATOR_INDEXLPAR Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_SP_NN,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Codedef ::= RESERVED_LD RegRR_WSP SEPARATOR_COMMA SEPARATOR_INDEXLPAR Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).right;
		Integer rr = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		
                int opcode = 0;
                switch(rr) {
                    case 0: opcode = OC_Expr.LD_BC_NN; break;
                    case 0x10: opcode = OC_Expr.LD_DE_NN; break;
                    case 0x20: opcode = OC_Expr.LD_HL_NN; break;
                }
                RESULT = new OC_Expr(opcode,e,false,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA REGISTERS_R 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_A_R,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA REGISTERS_I 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_A_I,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA SEPARATOR_INDEXLPAR Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_A_NN,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA SEPARATOR_INDEXLPAR REGISTERS_DE SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_A_DDEE,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Codedef ::= RESERVED_LD REGISTERS_A SEPARATOR_COMMA SEPARATOR_INDEXLPAR REGISTERS_BC SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_A_BBCC,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Codedef ::= RESERVED_LD SEPARATOR_LPAR Expression SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_IY 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_NN_IY,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Codedef ::= RESERVED_LD SEPARATOR_LPAR Expression SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_IX 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_NN_IX,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Codedef ::= RESERVED_LD SEPARATOR_LPAR Expression SEPARATOR_RPAR SEPARATOR_COMMA RegRR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		int rrleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer rr = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                int opcode = 0;
                switch(rr) {
                    case 0: opcode = OC_Expr.LD_NN_BC; break;
                    case 0x10: opcode = OC_Expr.LD_NN_DE; break;
                    case 0x20: opcode = OC_Expr.LD_NN_HL; break;
                    case 0x30: opcode = OC_Expr.LD_NN_SP; break;
                }
                RESULT = new OC_Expr(opcode,e,false,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Codedef ::= RESERVED_LD SEPARATOR_LPAR Expression SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_A 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		 RESULT = new OC_Expr(OC_Expr.LD_NN_A,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Codedef ::= RESERVED_LD SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_RegExpr(OC_RegExpr.LD_IIY_NN,r,1,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Codedef ::= RESERVED_LD SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_RegExpr(OC_RegExpr.LD_IIX_NN,r,1,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Codedef ::= RESERVED_LD SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_ExprExpr(OC_ExprExpr.LD_IIY_NN,e1,e2,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Codedef ::= RESERVED_LD SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_ExprExpr(OC_ExprExpr.LD_IIX_NN,e1,e2,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Codedef ::= RESERVED_LD SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.LD_HHLL_r,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Codedef ::= RESERVED_LD SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.LD_HHLL,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Codedef ::= RESERVED_LD SEPARATOR_LPAR REGISTERS_DE SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_A 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_DDEE_A,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Codedef ::= RESERVED_LD SEPARATOR_LPAR REGISTERS_BC SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_A 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LD_BBCC_A,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Codedef ::= RESERVED_JR CondCond SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Integer cc = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_RegExpr(OC_RegExpr.JR,cc,0,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Codedef ::= RESERVED_JR Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.JR,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Codedef ::= RESERVED_JP CondCC SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Integer cc = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_RegExpr(OC_RegExpr.JP,cc,0,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Codedef ::= RESERVED_JP SEPARATOR_LPAR REGISTERS_IY SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.JP_IIYY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Codedef ::= RESERVED_JP SEPARATOR_LPAR REGISTERS_IX SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.JP_IIXX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Codedef ::= RESERVED_JP SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.JP_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Codedef ::= RESERVED_JP Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.JP,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Codedef ::= RESERVED_INC REGISTERS_IY 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.INC_IY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Codedef ::= RESERVED_INC REGISTERS_IX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.INC_IX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Codedef ::= RESERVED_INC RegRR 
            {
              Instruction RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer rr = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.INC,rr,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Codedef ::= RESERVED_INC Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_NoParams.INC_B; break;
                    case 1: opcode = OC_NoParams.INC_C; break;
                    case 2: opcode = OC_NoParams.INC_D; break;
                    case 3: opcode = OC_NoParams.INC_E; break;
                    case 4: opcode = OC_NoParams.INC_H; break;
                    case 5: opcode = OC_NoParams.INC_L; break;
                    case 7: opcode = OC_NoParams.INC_A; break;
                }
                RESULT = new OC_NoParams(opcode,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Codedef ::= RESERVED_INC SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.INC_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Codedef ::= RESERVED_INC SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.INC_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Codedef ::= RESERVED_INC SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.INC_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Codedef ::= RESERVED_IN RegWA SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_C SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_NoParams.IN_B; break;
                    case 1: opcode = OC_NoParams.IN_C; break;
                    case 2: opcode = OC_NoParams.IN_D; break;
                    case 3: opcode = OC_NoParams.IN_E; break;
                    case 4: opcode = OC_NoParams.IN_H; break;
                    case 5: opcode = OC_NoParams.IN_L; break;
                }
                RESULT = new OC_NoParams(opcode,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Codedef ::= RESERVED_IN REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_C SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.IN_A,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Codedef ::= RESERVED_IN REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.IN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Codedef ::= RESERVED_IM Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.IM,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Codedef ::= RESERVED_EX REGISTERS_AF SEPARATOR_COMMA REGISTERS_AFF 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EX_AF_AFF,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Codedef ::= RESERVED_EX SEPARATOR_LPAR REGISTERS_DE SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_HL 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EX_DDEE_HL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Codedef ::= RESERVED_EX SEPARATOR_LPAR REGISTERS_SP SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_IY 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EX_SSPP_IY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Codedef ::= RESERVED_EX SEPARATOR_LPAR REGISTERS_SP SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_IX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EX_SSPP_IX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Codedef ::= RESERVED_EX SEPARATOR_LPAR REGISTERS_SP SEPARATOR_RPAR SEPARATOR_COMMA REGISTERS_HL 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EX_SSPP_HL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Codedef ::= RESERVED_DJNZ Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.DJNZ,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Codedef ::= RESERVED_DEC REGISTERS_IY 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.DEC_IY,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Codedef ::= RESERVED_DEC REGISTERS_IX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.DEC_IX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Codedef ::= RESERVED_DEC RegRR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.DEC,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Codedef ::= RESERVED_DEC RegWA 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                int opcode = 0;
                switch(r) {
                    case 0: opcode = OC_NoParams.DEC_B; break;
                    case 1: opcode = OC_NoParams.DEC_C; break;
                    case 2: opcode = OC_NoParams.DEC_D; break;
                    case 3: opcode = OC_NoParams.DEC_E; break;
                    case 4: opcode = OC_NoParams.DEC_H; break;
                    case 5: opcode = OC_NoParams.DEC_L; break;
                }
                RESULT = new OC_NoParams(opcode,parser.lastLine,parser.lastColumn);
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Codedef ::= RESERVED_DEC REGISTERS_A 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.DEC_A,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Codedef ::= RESERVED_DEC SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.DEC_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Codedef ::= RESERVED_DEC SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.DEC_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Codedef ::= RESERVED_DEC SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.DEC_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Codedef ::= RESERVED_CP Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.CP,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Codedef ::= RESERVED_CP Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.CP,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Codedef ::= RESERVED_CP SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.CP_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Codedef ::= RESERVED_CP SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.CP_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Codedef ::= RESERVED_CP SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CP_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Codedef ::= RESERVED_CALL Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.CALL,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Codedef ::= RESERVED_CALL CondCC SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Integer cc = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_RegExpr(OC_RegExpr.CALL,cc,0,e,false,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Codedef ::= RESERVED_BIT Expression SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_RegExpr(OC_RegExpr.BIT,e,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Codedef ::= RESERVED_BIT Expression SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_ExprExpr(OC_ExprExpr.BIT_IIY_NN,e1,e2,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Codedef ::= RESERVED_BIT Expression SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_ExprExpr(OC_ExprExpr.BIT_IIX_NN,e1,e2,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Codedef ::= RESERVED_BIT Expression SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).value;
		 RESULT = new OC_Expr(OC_Expr.BIT,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Codedef ::= RESERVED_AND Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.AND,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Codedef ::= RESERVED_AND Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.AND,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Codedef ::= RESERVED_AND SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.ADD_A_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Codedef ::= RESERVED_AND SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.ADD_A_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Codedef ::= RESERVED_AND SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.AND_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Codedef ::= RESERVED_ADD REGISTERS_IY SEPARATOR_COMMA RegRY 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.ADD_IY,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Codedef ::= RESERVED_ADD REGISTERS_IX SEPARATOR_COMMA RegRX 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.ADD_IX,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Codedef ::= RESERVED_ADD REGISTERS_HL SEPARATOR_COMMA RegRR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.ADD_HL,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Codedef ::= RESERVED_ADD REGISTERS_A SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.ADD,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Codedef ::= RESERVED_ADD REGISTERS_A SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.ADD,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Codedef ::= RESERVED_ADD REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.ADD_A_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Codedef ::= RESERVED_ADD REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.ADD_A_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Codedef ::= RESERVED_ADD REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.ADD_A_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Codedef ::= RESERVED_ADC REGISTERS_HL SEPARATOR_COMMA RegRR 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.ADC_HL,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Codedef ::= RESERVED_ADC REGISTERS_A SEPARATOR_COMMA Expression 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Expr(OC_Expr.ADC,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Codedef ::= RESERVED_ADC REGISTERS_A SEPARATOR_COMMA Reg 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new OC_Reg(OC_Reg.ADC,r,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-3)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Codedef ::= RESERVED_ADC REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IY OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.ADC_A_IIY_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Codedef ::= RESERVED_ADC REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_IX OPERATOR_ADD Expression SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new OC_Expr(OC_Expr.ADC_A_IIX_NN,e,true,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-7)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Codedef ::= RESERVED_ADC REGISTERS_A SEPARATOR_COMMA SEPARATOR_LPAR REGISTERS_HL SEPARATOR_RPAR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.ADC_A_HHLL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Codedef ::= RESERVED_SCF 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.SCF,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Codedef ::= RESERVED_RRD 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RRD,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Codedef ::= RESERVED_RRCA 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RRCA,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Codedef ::= RESERVED_RRA 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RRA,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Codedef ::= RESERVED_RLD 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RLD,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Codedef ::= RESERVED_RLCA 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RLCA,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Codedef ::= RESERVED_RLA 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RLA,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Codedef ::= RESERVED_RETN 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RETN,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Codedef ::= RESERVED_RETI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.RETI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Codedef ::= RESERVED_OUTI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.OUTI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Codedef ::= RESERVED_OUTD 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.OUTD,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Codedef ::= RESERVED_OTIR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.OTIR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Codedef ::= RESERVED_OTDR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.OTDR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Codedef ::= RESERVED_NOP 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.NOP,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Codedef ::= RESERVED_NEG 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.NEG,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Codedef ::= RESERVED_LDIR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LDIR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Codedef ::= RESERVED_LDI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LDI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Codedef ::= RESERVED_LDDR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LDDR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Codedef ::= RESERVED_LDD 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.LDD,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Codedef ::= RESERVED_INIR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.INIR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Codedef ::= RESERVED_INI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.INI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Codedef ::= RESERVED_INDR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.INDR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Codedef ::= RESERVED_IND 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.IND,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Codedef ::= RESERVED_HALT 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.HALT,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Codedef ::= RESERVED_EXX 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EXX,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Codedef ::= RESERVED_EI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.EI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Codedef ::= RESERVED_DI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.DI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Codedef ::= RESERVED_DAA 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.DAA,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Codedef ::= RESERVED_CPL 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CPL,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Codedef ::= RESERVED_CPIR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CPIR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Codedef ::= RESERVED_CPI 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CPI,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Codedef ::= RESERVED_CPDR 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CPDR,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Codedef ::= RESERVED_CPD 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CPD,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Codedef ::= RESERVED_CCF 
            {
              Instruction RESULT =null;
		 RESULT = new OC_NoParams(OC_NoParams.CCF,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Codedef",7, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MacroParamsList ::= MacroParamsList SEPARATOR_COMMA Expression 
            {
              Vector RESULT =null;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Vector parameters = (Vector)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 parameters.addElement(e); RESULT = parameters; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroParamsList",19, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MacroParamsList ::= Expression 
            {
              Vector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                        Vector vec = new Vector();
                        vec.addElement(e);
                        RESULT = vec;
                    
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroParamsList",19, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MacroParameters ::= 
            {
              Vector RESULT =null;
		 RESULT = null; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroParameters",18, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MacroParameters ::= MacroParamsList 
            {
              Vector RESULT =null;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Vector parameters = (Vector)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = parameters; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroParameters",18, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MacroOperList ::= MacroOperList SEPARATOR_COMMA TIDENTIFIER 
            {
              Vector RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Vector operands = (Vector)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 operands.addElement(name); RESULT = operands; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroOperList",20, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MacroOperList ::= TIDENTIFIER 
            {
              Vector RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                      Vector vec = new Vector();
                      vec.addElement(name);
                      RESULT = vec;
                  
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroOperList",20, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MacroOperands ::= 
            {
              Vector RESULT =null;
		 RESULT = null; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroOperands",17, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MacroOperands ::= MacroOperList 
            {
              Vector RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Vector operands = (Vector)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = operands; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("MacroOperands",17, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Pseudo ::= PREPROCESSOR_INCLUDE LITERAL_STRING 
            {
              Pseudo RESULT =null;
		int filenameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int filenameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		String filename = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new PseudoINCLUDE(filename,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Pseudo ::= TIDENTIFIER MacroParameters 
            {
              Pseudo RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Vector params = (Vector)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new PseudoMACROCall(name,params,parser.lastLine, parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Pseudo ::= TIDENTIFIER PREPROCESSOR_MACRO MacroOperands Comment SEPARATOR_EOL Program PREPROCESSOR_ENDM 
            {
              Pseudo RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)).value;
		int opersleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).left;
		int opersright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).right;
		Vector opers = (Vector)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Program s = (Program)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = new PseudoMACRO(name,opers,s,parser.lastLine, parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Pseudo ::= PREPROCESSOR_IF Expression Comment SEPARATOR_EOL Program SEPARATOR_EOL PREPROCESSOR_ENDIF 
            {
              Pseudo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Program s = (Program)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		 RESULT = new PseudoIF(e,s,parser.lastLine, parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-6)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Pseudo ::= TIDENTIFIER PREPROCESSOR_VAR Expression 
            {
              Pseudo RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new PseudoVAR(name,e,parser.lastLine, parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Pseudo ::= TIDENTIFIER PREPROCESSOR_EQU Expression 
            {
              Pseudo RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new PseudoEQU(name,e,parser.lastLine, parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Pseudo ::= PREPROCESSOR_ORG Expression 
            {
              Pseudo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new PseudoORG(e,parser.lastLine, parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Pseudo",8, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BinaryOperator ::= OPERATOR_SHL 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.SHL; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BinaryOperator ::= OPERATOR_SHR 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.SHR; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BinaryOperator ::= OPERATOR_MOD 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.MOD; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BinaryOperator ::= OPERATOR_DIVIDE 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.DIV; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BinaryOperator ::= OPERATOR_MULTIPLY 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.MUL; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BinaryOperator ::= OPERATOR_SUBTRACT 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.MINUS; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BinaryOperator ::= OPERATOR_ADD 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.ADD; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BinaryOperator ::= OPERATOR_GE 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.GE; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BinaryOperator ::= OPERATOR_LE 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.LE; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BinaryOperator ::= OPERATOR_GREATER 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.GREATER; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BinaryOperator ::= OPERATOR_LESS 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.LESS; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BinaryOperator ::= OPERATOR_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.EQ; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BinaryOperator ::= OPERATOR_AND 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.AND; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BinaryOperator ::= OPERATOR_XOR 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.XOR; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BinaryOperator ::= OPERATOR_OR 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.OR; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("BinaryOperator",15, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // UnaryOperator ::= OPERATOR_SUBTRACT 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.MINUS; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("UnaryOperator",16, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // UnaryOperator ::= OPERATOR_ADD 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.ADD; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("UnaryOperator",16, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // UnaryOperator ::= OPERATOR_NOT 
            {
              Integer RESULT =null;
		 RESULT = Arithmetic.NOT; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("UnaryOperator",16, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Primarny ::= TIDENTIFIER 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new Identifier(name,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Primarny",14, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Primarny ::= PREPROCESSOR_ADDR 
            {
              Expression RESULT =null;
		 RESULT = new Address(); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Primarny",14, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Primarny ::= LITERAL_DECIMAL_16BIT 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new DecimalExpr(n); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Primarny",14, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Primarny ::= LITERAL_DECIMAL_8BIT 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new DecimalExpr(n); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Primarny",14, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Primarny ::= UnaryOperator Expression 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new Arithmetic(e,null,op); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Primarny",14, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Primarny ::= Expression BinaryOperator Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new Arithmetic(e1,e2,op); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Primarny",14, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expression ::= Primarny 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = e; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expression ::= SEPARATOR_LPAR Expression SEPARATOR_RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 RESULT = e; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DWData ::= Expression 
            {
              DataDW RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new DataDW(e,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DWData",10, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DBData ::= Codedef 
            {
              DataDB RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Instruction code = (Instruction)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new DataDB(code,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DBData",9, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DBData ::= LITERAL_STRING 
            {
              DataDB RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new DataDB(str,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DBData",9, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DBData ::= Expression 
            {
              DataDB RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new DataDB(e,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DBData",9, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DWList ::= DWList SEPARATOR_COMMA DWData 
            {
              DataNode RESULT =null;
		int dwlistleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int dwlistright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		DataNode dwlist = (DataNode)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int dwdataleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dwdataright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataDW dwdata = (DataDW)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 dwlist.addElement(dwdata); RESULT = dwlist; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DWList",6, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DWList ::= DWData 
            {
              DataNode RESULT =null;
		int dwdataleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dwdataright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataDW dwdata = (DataDW)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
               DataNode dn = new DataNode(parser.lastLine,parser.lastColumn);
               dn.addElement(dwdata);
               RESULT = dn;
           
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DWList",6, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DBList ::= DBList SEPARATOR_COMMA DBData 
            {
              DataNode RESULT =null;
		int dblistleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int dblistright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		DataNode dblist = (DataNode)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int dbdataleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dbdataright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataDB dbdata = (DataDB)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 dblist.addElement(dbdata); RESULT = dblist; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DBList",5, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DBList ::= DBData 
            {
              DataNode RESULT =null;
		int dbdataleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dbdataright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataDB dbdata = (DataDB)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
               DataNode dn = new DataNode(parser.lastLine,parser.lastColumn);
               dn.addElement(dbdata);
               RESULT = dn;
           
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("DBList",5, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Datadef ::= PREPROCESSOR_DS Expression 
            {
              DataNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                DataNode dn = new DataNode(parser.lastLine,parser.lastColumn);
                dn.addElement(new DataDS(e,parser.lastLine,parser.lastColumn));
                RESULT= dn;
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Datadef",4, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Datadef ::= PREPROCESSOR_DW DWList 
            {
              DataNode RESULT =null;
		int dwlistleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dwlistright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataNode dwlist = (DataNode)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = dwlist; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Datadef",4, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Datadef ::= PREPROCESSOR_DB DBList 
            {
              DataNode RESULT =null;
		int dblistleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dblistright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataNode dblist = (DataNode)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = dblist; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Datadef",4, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruction ::= Codedef 
            {
              InstrData RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Instruction code = (Instruction)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = code; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Instruction",12, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruction ::= Datadef 
            {
              InstrData RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		DataNode data = (DataNode)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = data; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Instruction",12, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= 
            {
              Statement RESULT =null;
		 RESULT = null; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= Pseudo 
            {
              Statement RESULT =null;
		int pseudoleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int pseudoright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Pseudo pseudo = (Pseudo)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = pseudo; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= Instruction 
            {
              Statement RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		InstrData instr = (InstrData)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = instr; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Comment ::= 
            {
              Object RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Comment",11, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Comment ::= TCOMMENT 
            {
              Object RESULT =null;

              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Comment",11, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Label ::= 
            {
              Label RESULT =null;
		 RESULT = null; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Label",2, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Label ::= TLABEL 
            {
              Label RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		 RESULT = new Label(name,parser.lastLine,parser.lastColumn); 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Label",2, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Row ::= Label Statement Comment 
            {
              Row RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Label label = (Label)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		
            if ((label == null) && (stmt == null)) RESULT = null;
            else RESULT = new Row(label,stmt);
        
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Row",1, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= Program error 
            {
              Program RESULT =null;
		int programleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Program program = (Program)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		 parser.errorCount++; RESULT = program; 
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Program SEPARATOR_EOL Row 
            {
              Program RESULT =null;
		int programleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).right;
		Program program = (Program)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)).value;
		int rowleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Row row = (Row)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                if (row != null) program.addRow(row);
                RESULT = program;
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-2)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Row 
            {
              Program RESULT =null;
		int rowleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()).right;
		Row row = (Row)((java_cup.runtime.Symbol) CUP$parserZ80$stack.peek()).value;
		
                Program program = new Program();
                if (row != null) program.addRow(row);
                RESULT = program;
            
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          return CUP$parserZ80$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)).value;
		RESULT = start_val;
              CUP$parserZ80$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserZ80$stack.elementAt(CUP$parserZ80$top-1)), ((java_cup.runtime.Symbol)CUP$parserZ80$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserZ80$parser.done_parsing();
          return CUP$parserZ80$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

