/*
 * RAMParser.java
 *
 * Parser (syntactic analyzer for RAM)
 *
 * KEEP IT SIMPLE STUPID
 * sometimes just: YOU AREN'T GONNA NEED IT
 * DON'T REPEAT YOURSELF
 *
 * Copyright (C) 2009-2012 Peter Jakubƒço <pjakubco@gmail.com>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package ramc_ram.impl;

import interfaces.C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E;
import java_cup.runtime.Symbol;
import emulib.plugins.compiler.IToken;
import java.util.ArrayList;
import ramc_ram.tree.*;
import emulib.plugins.compiler.Message;
import emulib.plugins.compiler.Message.MessageType;

init with {: errorCount = 0; :}
parser code {:
    private RAMCompiler ram = null;
    public IToken lastToken;
    public int errorCount = 0;
    
    public RAMParser(java_cup.runtime.Scanner s, RAMCompiler ram) {
        this(s);
        this.ram = ram;
    }
    	
    public void syntax_error(Symbol current) {
        errorCount++;
        report_error("Syntax error: ",current);
    }

    public void unrecovered_syntax_error(Symbol current) {
        errorCount++;
        report_error("Fatal syntax error: ", current);
        done_parsing();
    }

    public void report_error(String message, Symbol current) {
        String mes;

        IToken t = (IToken)current;
        mes = message + t.getErrorString() + " ('"+t.getText()+"')";
        
        ram.fireMessage(new Message(MessageType.TYPE_ERROR, mes,
            t.getLine()+1, t.getColumn(), null, errorCount));
    }
:}

terminal HALT,LOAD,STORE,READ,WRITE,ADD,SUB,MUL,DIV,JMP,JZ,JGTZ;
terminal EOL;
terminal DIRECT,INDIRECT;
terminal String NUMBER, IDENT, LABELL,STRING;
terminal TCOMMENT, INPUT;

non terminal Program Program;
non terminal Row Row;
non terminal RAMInstruction Statement;
non terminal Comment;
non terminal Integer Number;
non terminal Label LabelOpt;
non terminal ArrayList StringVector;

start with Program;

Program ::= Row:row
            {:
                Program program = new Program();
                if (row != null) program.addRow(row);
                RESULT = program;
            :}
          | Program:program EOL Row:row
            {:
                if (row != null) program.addRow(row);
                RESULT = program;
            :};

Row ::= LabelOpt:label Statement:stmt Comment
        {: RESULT = new Row(stmt, label); :}
      | LabelOpt:label Comment
        {: RESULT = (label==null)?null:new Row(label); :}
      | INPUT StringVector:vector 
        {: RESULT = new Row(vector); :};

StringVector ::= STRING:str
                 {: 
                     ArrayList<String> v = new ArrayList<String>();
                     v.add(str);
                     RESULT = v;
                 :}
               | StringVector:v STRING:str
                 {:
                     v.add(str);
                     RESULT = v;
                 :};

Comment ::= TCOMMENT | ;

LabelOpt ::= LABELL:label {: RESULT = new Label(label); :}
           |             {: RESULT = null; :}
           ;


Statement ::= READ Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.READ, (char)0, num); :}
            | READ INDIRECT Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.READ, '*', num); :}
            | WRITE DIRECT STRING:str {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.WRITE, '=', str); :}
            | WRITE Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.WRITE, (char)0, num); :}
            | WRITE INDIRECT Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.WRITE, '*', num); :}
            | LOAD DIRECT STRING:str {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.LOAD, '=', str); :}
            | LOAD Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.LOAD, (char)0, num); :}
            | LOAD INDIRECT Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.LOAD, '*', num); :}
            | STORE Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.STORE, (char)0, num); :}
            | STORE INDIRECT Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.STORE, '*', num); :}
            | ADD DIRECT STRING:str {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.ADD, '=', str); :}
            | ADD Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.ADD, (char)0, num); :}
            | ADD INDIRECT Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.ADD, '*', num); :}
            | SUB DIRECT STRING:str {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.SUB, '=', str); :}
            | SUB Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.SUB, (char)0, num); :}
            | SUB INDIRECT Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.SUB, '*', num); :}
            | MUL DIRECT STRING:str {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.MUL, '=', str); :}
            | MUL Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.MUL, (char)0, num); :}
            | MUL INDIRECT Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.MUL, '*', num); :}
            | DIV DIRECT STRING:str {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.DIV, '=', str); :}
            | DIV Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.DIV, (char)0, num); :}
            | DIV INDIRECT Number:num {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.DIV, '*', num); :}
            | JMP IDENT:label {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.JMP, label); :}
            | JZ IDENT:label {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.JZ, label); :}
            | JGTZ IDENT:label {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.JGTZ, label); :}
            | HALT  {: RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.HALT, (char)0,0); :}
            ;

Number ::= NUMBER:num {: RESULT = Integer.parseInt((String)num); :};

