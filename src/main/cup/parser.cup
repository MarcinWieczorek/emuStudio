/*
 * BDParser.java
 *
 * Parser (syntactic analyzer for BrainDuck)
 *
 * Copyright (C) 2009-2012 Peter Jakubƒço
 * KISS, YAGNI, DRY
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package net.sf.emustudio.brainduck.brainc.impl;

import java_cup.runtime.Symbol;
import emulib.plugins.compiler.Token;
import net.sf.emustudio.brainduck.brainc.tree.*;
import emulib.plugins.compiler.Message;
import emulib.plugins.compiler.Message.MessageType;

init with {: errorCount = 0; :}
parser code {:
    private CompilerImpl compiler = null;
    public Token lastToken;
    public int errorCount = 0;
    
    public ParserBD(java_cup.runtime.Scanner s, CompilerImpl compiler) {
        this(s);
        this.compiler = compiler;
    }
    	
    public void syntax_error(Symbol current) {
        errorCount++;
        report_error("Syntax error: ",current);
    }

    public void unrecovered_syntax_error(Symbol current) {
        errorCount++;
        report_error("Fatal syntax error: ", current);
        done_parsing();
    }

    public void report_error(String message, Symbol current) {
        String mes;

        Token t = (Token)current;
        mes = message + t.getErrorString() + " ('"+t.getText()+"')";

        compiler.fireMessage(new Message(MessageType.TYPE_ERROR, mes,
            t.getLine()+1, t.getColumn(), null, errorCount));
    }
:}

terminal HALT,INC,DEC,INCV,DECV,PRINT,LOAD,LOOP,ENDL;
terminal EOL;
terminal String NUMBER;
terminal TCOMMENT;

non terminal Program Program;
non terminal Row Row;
non terminal Statement Statement;
non terminal Comment;
non terminal Integer NumberOpt;

start with Program;

Program ::= Row:row
            {:
                Program program = new Program();
                if (row != null) program.addRow(row);
                RESULT = program;
            :}
          | Program:program EOL Row:row
            {:
                if (row != null) program.addRow(row);
                RESULT = program;
            :};

Row ::= Statement:stmt Comment
        {: RESULT = new Row(stmt); :}
      | Comment
        {: RESULT = null; :};
         
Comment ::= TCOMMENT | ;

Statement ::= INC NumberOpt:num  {: RESULT = new Statement(Statement.INC, num); :}
            | DEC NumberOpt:num  {: RESULT = new Statement(Statement.DEC, num); :}
            | INCV NumberOpt:num {: RESULT = new Statement(Statement.INCV, num); :}
            | DECV NumberOpt:num {: RESULT = new Statement(Statement.DECV, num); :}
            | PRINT NumberOpt:num {: RESULT = new Statement(Statement.PRINT, num); :}
            | LOAD NumberOpt:num {: RESULT = new Statement(Statement.LOAD, num); :}
            | LOOP  {: RESULT = new Statement(Statement.LOOP, 0); :}
            | ENDL  {: RESULT = new Statement(Statement.ENDL, 0); :}
            | HALT  {: RESULT = new Statement(Statement.HALT, 0); :}
            ;

NumberOpt ::= NUMBER:num {: 

RESULT = Integer.parseInt((String)num)&0xFF;
                            
                         :}
            |            {: RESULT = 0xFF;   :}
            ;

