
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 23 09:49:13 CET 2009
//----------------------------------------------------

package ram.impl;

import java_cup.runtime.Symbol;
import plugins.compiler.IMessageReporter;
import plugins.compiler.IToken;
import ram.tree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 23 09:49:13 CET 2009
  */
public class RAMParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public RAMParser() {super();}

  /** Constructor which sets the default scanner. */
  public RAMParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RAMParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\003\005\000\002\003\004\000\002\005\003" +
    "\000\002\005\002\000\002\007\003\000\002\007\002\000" +
    "\002\004\004\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\004\005\000\002\004\005\000\002\004" +
    "\004\000\002\004\005\000\002\004\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\004\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\005\000\002\004" +
    "\005\000\002\004\004\000\002\004\005\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\040\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\024\007\025\ufff9\001\002\000\006\002" +
    "\077\017\076\001\002\000\036\002\ufffb\004\012\005\023" +
    "\006\014\007\010\010\021\011\015\012\016\013\025\014" +
    "\020\015\024\016\013\017\ufffb\025\022\001\002\000\006" +
    "\002\000\017\000\001\002\000\036\002\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\025\ufffa\001\002\000" +
    "\006\021\073\022\027\001\002\000\006\002\ufffd\017\ufffd" +
    "\001\002\000\010\002\uffe0\017\uffe0\025\uffe0\001\002\000" +
    "\004\023\072\001\002\000\006\021\067\022\027\001\002" +
    "\000\010\020\064\021\062\022\027\001\002\000\010\020" +
    "\057\021\055\022\027\001\002\000\010\002\ufffb\017\ufffb" +
    "\025\022\001\002\000\010\020\051\021\047\022\027\001" +
    "\002\000\010\020\044\021\042\022\027\001\002\000\006" +
    "\002\ufffc\017\ufffc\001\002\000\010\020\037\021\035\022" +
    "\027\001\002\000\004\023\034\001\002\000\010\020\031" +
    "\021\026\022\027\001\002\000\004\022\027\001\002\000" +
    "\010\002\uffdf\017\uffdf\025\uffdf\001\002\000\010\002\uffe7" +
    "\017\uffe7\025\uffe7\001\002\000\004\022\027\001\002\000" +
    "\010\002\uffe8\017\uffe8\025\uffe8\001\002\000\010\002\uffe6" +
    "\017\uffe6\025\uffe6\001\002\000\010\002\uffe2\017\uffe2\025" +
    "\uffe2\001\002\000\004\022\027\001\002\000\010\002\ufff2" +
    "\017\ufff2\025\ufff2\001\002\000\004\022\027\001\002\000" +
    "\010\002\ufff3\017\ufff3\025\ufff3\001\002\000\010\002\ufff1" +
    "\017\ufff1\025\ufff1\001\002\000\004\022\027\001\002\000" +
    "\010\002\ufff5\017\ufff5\025\ufff5\001\002\000\004\022\027" +
    "\001\002\000\010\002\ufff6\017\ufff6\025\ufff6\001\002\000" +
    "\010\002\ufff4\017\ufff4\025\ufff4\001\002\000\004\022\027" +
    "\001\002\000\010\002\uffe4\017\uffe4\025\uffe4\001\002\000" +
    "\004\022\027\001\002\000\010\002\uffe5\017\uffe5\025\uffe5" +
    "\001\002\000\010\002\uffe3\017\uffe3\025\uffe3\001\002\000" +
    "\006\002\ufffe\017\ufffe\001\002\000\004\022\027\001\002" +
    "\000\010\002\uffea\017\uffea\025\uffea\001\002\000\004\022" +
    "\027\001\002\000\010\002\uffeb\017\uffeb\025\uffeb\001\002" +
    "\000\010\002\uffe9\017\uffe9\025\uffe9\001\002\000\004\022" +
    "\027\001\002\000\010\002\uffed\017\uffed\025\uffed\001\002" +
    "\000\004\022\027\001\002\000\010\002\uffee\017\uffee\025" +
    "\uffee\001\002\000\010\002\uffec\017\uffec\025\uffec\001\002" +
    "\000\004\022\027\001\002\000\010\002\ufff0\017\ufff0\025" +
    "\ufff0\001\002\000\010\002\uffef\017\uffef\025\uffef\001\002" +
    "\000\010\002\uffe1\017\uffe1\025\uffe1\001\002\000\004\022" +
    "\027\001\002\000\010\002\ufff8\017\ufff8\025\ufff8\001\002" +
    "\000\010\002\ufff7\017\ufff7\025\ufff7\001\002\000\040\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\024" +
    "\007\025\ufff9\001\002\000\004\002\001\001\002\000\006" +
    "\002\uffff\017\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\010\002\003\003\005\007\004\001\001\000" +
    "\002\001\001\000\006\004\016\005\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\067\001\001\000\004\006\062\001\001\000\004\006" +
    "\055\001\001\000\004\005\053\001\001\000\004\006\047" +
    "\001\001\000\004\006\042\001\001\000\002\001\001\000" +
    "\004\006\035\001\001\000\002\001\001\000\004\006\027" +
    "\001\001\000\004\006\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\040\001" +
    "\001\000\002\001\001\000\004\006\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\045\001\001\000" +
    "\002\001\001\000\004\006\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\052\001\001\000\002\001" +
    "\001\000\004\006\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\060\001\001\000" +
    "\002\001\001\000\004\006\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\065\001\001\000\002\001" +
    "\001\000\004\006\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\077\007" +
    "\004\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RAMParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RAMParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RAMParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 errorCount = 0; 
    }


    private IMessageReporter reporter = null;
    public IToken lastToken;
    public int errorCount = 0;
    
    public RAMParser(java_cup.runtime.Scanner s, IMessageReporter reporter) {
        this(s);
        this.reporter = reporter;
    }
    	
    public void syntax_error(Symbol current) {
        errorCount++;
        report_error("Syntax error: ",current);
    }

    public void unrecovered_syntax_error(Symbol current) {
        errorCount++;
        report_error("Fatal syntax error: ", current);
        done_parsing();
    }

    public void report_error(String message, Symbol current) {
        String mes;

        IToken t = (IToken)current;
        mes = message + t.getErrorString() + " ('"+t.getText()+"')";

        reporter.report(t.getLine()+1, t.getColumn(),mes, IMessageReporter.TYPE_ERROR);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$RAMParser$actions {
  private final RAMParser parser;

  /** Constructor */
  CUP$RAMParser$actions(RAMParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$RAMParser$do_action(
    int                        CUP$RAMParser$act_num,
    java_cup.runtime.lr_parser CUP$RAMParser$parser,
    java.util.Stack            CUP$RAMParser$stack,
    int                        CUP$RAMParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RAMParser$result;

      /* select the action based on the action number */
      switch (CUP$RAMParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Number ::= NUMBER 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = Integer.parseInt((String)num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Number",4, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= HALT 
            {
              Statement RESULT =null;
		 RESULT = new Statement(Statement.HALT, 0,0); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= JZ IDENT 
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.JZ, label); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= JMP IDENT 
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.JMP, label); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= DIV INDIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.DIV, 2, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= DIV Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.DIV, 0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= DIV DIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.DIV, 1, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= MUL INDIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.MUL, 2, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= MUL Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.MUL, 0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= MUL DIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.MUL, 1, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= SUB INDIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.SUB, 2, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= SUB Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.SUB, 0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= SUB DIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.SUB, 1, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= ADD INDIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.ADD, 2, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= ADD Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.ADD, 0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= ADD DIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.ADD, 1, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= STORE INDIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.STORE, 2, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= STORE Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.STORE, 0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= LOAD INDIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.LOAD, 2, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= LOAD Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.LOAD, 0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= LOAD DIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.LOAD, 1, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= WRITE INDIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.WRITE, 2, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= WRITE Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.WRITE, 0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= WRITE DIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.WRITE, 1, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= READ INDIRECT Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.READ, 2, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= READ Number 
            {
              Statement RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Statement(Statement.READ, 0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LabelOpt ::= 
            {
              Label RESULT =null;
		 RESULT = null; 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("LabelOpt",5, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LabelOpt ::= LABELL 
            {
              Label RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Label(label); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("LabelOpt",5, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Comment ::= 
            {
              Object RESULT =null;

              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Comment",3, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Comment ::= TCOMMENT 
            {
              Object RESULT =null;

              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Comment",3, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Row ::= LabelOpt Comment 
            {
              Row RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).right;
		Label label = (Label)((java_cup.runtime.Symbol) CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).value;
		 RESULT = (label==null)?null:new Row(label); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Row",1, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Row ::= LabelOpt Statement Comment 
            {
              Row RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)).right;
		Label label = (Label)((java_cup.runtime.Symbol) CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).value;
		 RESULT = new Row(stmt, label); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Row",1, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Program EOL Row 
            {
              Program RESULT =null;
		int programleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)).right;
		Program program = (Program)((java_cup.runtime.Symbol) CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)).value;
		int rowleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Row row = (Row)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		
                if (row != null) program.addRow(row);
                RESULT = program;
            
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Row 
            {
              Program RESULT =null;
		int rowleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Row row = (Row)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		
                Program program = new Program();
                if (row != null) program.addRow(row);
                RESULT = program;
            
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).value;
		RESULT = start_val;
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RAMParser$parser.done_parsing();
          return CUP$RAMParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

