
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 28 08:51:06 CEST 2011
//----------------------------------------------------

package ramc_ram.impl;

import interfaces.C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E;
import java_cup.runtime.Symbol;
import emuLib8.plugins.compiler.IToken;
import java.util.ArrayList;
import ramc_ram.tree.*;
import emuLib8.plugins.compiler.Message;
import emuLib8.plugins.compiler.Message.MessageType;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 28 08:51:06 CEST 2011
  */
public class RAMParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public RAMParser() {super();}

  /** Constructor which sets the default scanner. */
  public RAMParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RAMParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\010\003\000\002\010\004\000\002\005\003\000" +
    "\002\005\002\000\002\007\003\000\002\007\002\000\002" +
    "\004\004\000\002\004\005\000\002\004\005\000\002\004" +
    "\004\000\002\004\005\000\002\004\005\000\002\004\004" +
    "\000\002\004\005\000\002\004\004\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\005\000\002\004" +
    "\005\000\002\004\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\004\005\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\044\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\025\010\027\ufff6\030\005\001" +
    "\002\000\006\002\105\020\104\001\002\000\004\026\101" +
    "\001\002\000\040\002\ufff8\004\013\005\023\006\016\007" +
    "\011\010\022\011\015\012\020\013\026\014\021\015\025" +
    "\016\014\017\027\020\ufff8\027\024\001\002\000\006\002" +
    "\000\020\000\001\002\000\040\002\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\027\ufff7\001\002" +
    "\000\006\022\076\023\033\001\002\000\006\002\ufffd\020" +
    "\ufffd\001\002\000\010\002\uffdc\020\uffdc\027\uffdc\001\002" +
    "\000\004\024\075\001\002\000\010\021\072\022\070\023" +
    "\033\001\002\000\006\022\065\023\033\001\002\000\010" +
    "\002\ufff8\020\ufff8\027\024\001\002\000\010\021\061\022" +
    "\057\023\033\001\002\000\010\021\054\022\052\023\033" +
    "\001\002\000\010\021\047\022\045\023\033\001\002\000" +
    "\010\021\042\022\040\023\033\001\002\000\006\002\ufff9" +
    "\020\ufff9\001\002\000\004\024\037\001\002\000\010\021" +
    "\034\022\031\023\033\001\002\000\004\024\030\001\002" +
    "\000\010\002\uffdd\020\uffdd\027\uffdd\001\002\000\004\023" +
    "\033\001\002\000\010\002\uffe4\020\uffe4\027\uffe4\001\002" +
    "\000\010\002\uffdb\020\uffdb\027\uffdb\001\002\000\004\026" +
    "\035\001\002\000\010\002\uffe5\020\uffe5\027\uffe5\001\002" +
    "\000\010\002\uffe3\020\uffe3\027\uffe3\001\002\000\010\002" +
    "\uffdf\020\uffdf\027\uffdf\001\002\000\004\023\033\001\002" +
    "\000\010\002\uffef\020\uffef\027\uffef\001\002\000\004\026" +
    "\043\001\002\000\010\002\ufff0\020\ufff0\027\ufff0\001\002" +
    "\000\010\002\uffee\020\uffee\027\uffee\001\002\000\004\023" +
    "\033\001\002\000\010\002\ufff2\020\ufff2\027\ufff2\001\002" +
    "\000\004\026\050\001\002\000\010\002\ufff3\020\ufff3\027" +
    "\ufff3\001\002\000\010\002\ufff1\020\ufff1\027\ufff1\001\002" +
    "\000\004\023\033\001\002\000\010\002\uffe1\020\uffe1\027" +
    "\uffe1\001\002\000\004\026\055\001\002\000\010\002\uffe2" +
    "\020\uffe2\027\uffe2\001\002\000\010\002\uffe0\020\uffe0\027" +
    "\uffe0\001\002\000\004\023\033\001\002\000\010\002\uffe7" +
    "\020\uffe7\027\uffe7\001\002\000\004\026\062\001\002\000" +
    "\010\002\uffe8\020\uffe8\027\uffe8\001\002\000\010\002\uffe6" +
    "\020\uffe6\027\uffe6\001\002\000\006\002\ufffe\020\ufffe\001" +
    "\002\000\004\023\033\001\002\000\010\002\uffed\020\uffed" +
    "\027\uffed\001\002\000\010\002\uffec\020\uffec\027\uffec\001" +
    "\002\000\004\023\033\001\002\000\010\002\uffea\020\uffea" +
    "\027\uffea\001\002\000\004\026\073\001\002\000\010\002" +
    "\uffeb\020\uffeb\027\uffeb\001\002\000\010\002\uffe9\020\uffe9" +
    "\027\uffe9\001\002\000\010\002\uffde\020\uffde\027\uffde\001" +
    "\002\000\004\023\033\001\002\000\010\002\ufff5\020\ufff5" +
    "\027\ufff5\001\002\000\010\002\ufff4\020\ufff4\027\ufff4\001" +
    "\002\000\010\002\ufffb\020\ufffb\026\ufffb\001\002\000\010" +
    "\002\ufffc\020\ufffc\026\103\001\002\000\010\002\ufffa\020" +
    "\ufffa\026\ufffa\001\002\000\044\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\025\010\027\ufff6" +
    "\030\005\001\002\000\004\002\001\001\002\000\006\002" +
    "\uffff\020\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\010\002\003\003\006\007\005\001\001\000" +
    "\002\001\001\000\004\010\101\001\001\000\006\004\016" +
    "\005\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\070\001\001\000\004\006" +
    "\065\001\001\000\004\005\063\001\001\000\004\006\057" +
    "\001\001\000\004\006\052\001\001\000\004\006\045\001" +
    "\001\000\004\006\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\105" +
    "\007\005\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RAMParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RAMParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RAMParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 errorCount = 0; 
    }


    private RAMCompiler ram = null;
    public IToken lastToken;
    public int errorCount = 0;
    
    public RAMParser(java_cup.runtime.Scanner s, RAMCompiler ram) {
        this(s);
        this.ram = ram;
    }
    	
    public void syntax_error(Symbol current) {
        errorCount++;
        report_error("Syntax error: ",current);
    }

    public void unrecovered_syntax_error(Symbol current) {
        errorCount++;
        report_error("Fatal syntax error: ", current);
        done_parsing();
    }

    public void report_error(String message, Symbol current) {
        String mes;

        IToken t = (IToken)current;
        mes = message + t.getErrorString() + " ('"+t.getText()+"')";
        
        ram.fireMessage(new Message(MessageType.TYPE_ERROR, mes,
            t.getLine()+1, t.getColumn(), null, errorCount));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$RAMParser$actions {
  private final RAMParser parser;

  /** Constructor */
  CUP$RAMParser$actions(RAMParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$RAMParser$do_action(
    int                        CUP$RAMParser$act_num,
    java_cup.runtime.lr_parser CUP$RAMParser$parser,
    java.util.Stack            CUP$RAMParser$stack,
    int                        CUP$RAMParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RAMParser$result;

      /* select the action based on the action number */
      switch (CUP$RAMParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Number ::= NUMBER 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = Integer.parseInt((String)num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Number",4, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= HALT 
            {
              RAMInstruction RESULT =null;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.HALT, (char)0,0); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= JGTZ IDENT 
            {
              RAMInstruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.JGTZ, label); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= JZ IDENT 
            {
              RAMInstruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.JZ, label); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= JMP IDENT 
            {
              RAMInstruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.JMP, label); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= DIV INDIRECT Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.DIV, '*', num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= DIV Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.DIV, (char)0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= DIV DIRECT STRING 
            {
              RAMInstruction RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.DIV, '=', str); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= MUL INDIRECT Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.MUL, '*', num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= MUL Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.MUL, (char)0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= MUL DIRECT STRING 
            {
              RAMInstruction RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.MUL, '=', str); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= SUB INDIRECT Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.SUB, '*', num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= SUB Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.SUB, (char)0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= SUB DIRECT STRING 
            {
              RAMInstruction RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.SUB, '=', str); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= ADD INDIRECT Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.ADD, '*', num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= ADD Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.ADD, (char)0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= ADD DIRECT STRING 
            {
              RAMInstruction RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.ADD, '=', str); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= STORE INDIRECT Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.STORE, '*', num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= STORE Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.STORE, (char)0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= LOAD INDIRECT Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.LOAD, '*', num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= LOAD Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.LOAD, (char)0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= LOAD DIRECT STRING 
            {
              RAMInstruction RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.LOAD, '=', str); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= WRITE INDIRECT Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.WRITE, '*', num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= WRITE Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.WRITE, (char)0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= WRITE DIRECT STRING 
            {
              RAMInstruction RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.WRITE, '=', str); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= READ INDIRECT Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.READ, '*', num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= READ Number 
            {
              RAMInstruction RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new RAMInstruction(C451E861E4A4CCDA8E08442AB068DE18DEE56ED8E.READ, (char)0, num); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LabelOpt ::= 
            {
              Label RESULT =null;
		 RESULT = null; 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("LabelOpt",5, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LabelOpt ::= LABELL 
            {
              Label RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Label(label); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("LabelOpt",5, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Comment ::= 
            {
              Object RESULT =null;

              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Comment",3, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Comment ::= TCOMMENT 
            {
              Object RESULT =null;

              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Comment",3, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // StringVector ::= StringVector STRING 
            {
              ArrayList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).right;
		ArrayList v = (ArrayList)((java_cup.runtime.Symbol) CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		
                     v.add(str);
                     RESULT = v;
                 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("StringVector",6, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // StringVector ::= STRING 
            {
              ArrayList RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 
                     ArrayList<String> v = new ArrayList<String>();
                     v.add(str);
                     RESULT = v;
                 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("StringVector",6, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Row ::= INPUT StringVector 
            {
              Row RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		ArrayList vector = (ArrayList)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		 RESULT = new Row(vector); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Row",1, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Row ::= LabelOpt Comment 
            {
              Row RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).right;
		Label label = (Label)((java_cup.runtime.Symbol) CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).value;
		 RESULT = (label==null)?null:new Row(label); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Row",1, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Row ::= LabelOpt Statement Comment 
            {
              Row RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)).right;
		Label label = (Label)((java_cup.runtime.Symbol) CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).right;
		RAMInstruction stmt = (RAMInstruction)((java_cup.runtime.Symbol) CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).value;
		 RESULT = new Row(stmt, label); 
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Row",1, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Program EOL Row 
            {
              Program RESULT =null;
		int programleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)).right;
		Program program = (Program)((java_cup.runtime.Symbol) CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)).value;
		int rowleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Row row = (Row)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		
                if (row != null) program.addRow(row);
                RESULT = program;
            
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-2)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Row 
            {
              Program RESULT =null;
		int rowleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()).right;
		Row row = (Row)((java_cup.runtime.Symbol) CUP$RAMParser$stack.peek()).value;
		
                Program program = new Program();
                if (row != null) program.addRow(row);
                RESULT = program;
            
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          return CUP$RAMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)).value;
		RESULT = start_val;
              CUP$RAMParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RAMParser$stack.elementAt(CUP$RAMParser$top-1)), ((java_cup.runtime.Symbol)CUP$RAMParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RAMParser$parser.done_parsing();
          return CUP$RAMParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

